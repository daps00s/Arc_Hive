<!---<script>
        let selectedFile = null;
        let selectedHardcopyId = null;
        const notyf = new Notyf();

        $(document).ready(function() {
            $('#recipientSelect').select2({
                placeholder: 'Select recipients'
            });

            $('#fileInput').on('change', function(e) {
                selectedFile = e.target.files[0];
                if (selectedFile) {
                    $('#fileDetailsPopup').show();
                }
            });

            $('#uploadFileButton').on('click', function() {
                $('#fileInput').click();
            });

            $('#selectDocumentButton').on('click', function() {
                $('#fileSelectionPopup').show();
            });

            $('#hardcopyCheckbox').on('change', function() {
                if ($(this).is(':checked')) {
                    $('#hardcopyOptions').show();
                    if ($('input[name="hardcopyOption"]:checked').val() === 'new') {
                        $('#hardcopyDetails').show();
                        fetchStorageSuggestion();
                    }
                } else {
                    $('#hardcopyOptions').hide();
                    $('#hardcopyDetails').hide();
                    $('#storageSuggestion').hide().empty();
                }
            });

            $('input[name="hardcopyOption"]').on('change', function() {
                if ($(this).val() === 'new') {
                    $('#hardcopyDetails').show();
                    fetchStorageSuggestion();
                } else {
                    $('#hardcopyDetails').hide();
                    $('#storageSuggestion').hide().empty();
                }
            });

            $("#searchInput").autocomplete({
                source: function(request, response) {
                    $.ajax({
                        url: "autocomplete.php",
                        dataType: "json",
                        data: {
                            term: request.term,
                            csrf_token: '<?= htmlspecialchars($_SESSION['csrf_token']) ?>'
                        },
                        success: function(data) {
                            if (data.success) {
                                response(data.results);
                            } else {
                                notyf.error(data.message);
                            }
                        },
                        error: function() {
                            notyf.error('Error fetching autocomplete suggestions.');
                        }
                    });
                },
                minLength: 2,
                select: function(event, ui) {
                    $("#searchInput").val(ui.item.value);
                    if (ui.item.document_type) $("#document-type").val(ui.item.document_type.toLowerCase());
                    if (ui.item.department_id) $("#folder").val("department-" + ui.item.department_id);
                    $("#search-form").submit();
                }
            });

            $('#documentType').on('change', function() {
                const docTypeName = $(this).val();
                const dynamicFields = $('#dynamicFields');
                dynamicFields.empty();

                if (docTypeName) {
                    $.ajax({
                        url: 'get_document_type_field.php',
                        method: 'POST',
                        data: {
                            document_type_name: docTypeName,
                            csrf_token: '<?= htmlspecialchars($_SESSION['csrf_token']) ?>'
                        },
                        dataType: 'json',
                        success: function(data) {
                            if (data.success && Array.isArray(data.data.fields) && data.data.fields.length > 0) {
                                data.data.fields.forEach(field => {
                                    const requiredAttr = field.is_required ? 'required' : '';
                                    let inputField = '';
                                    switch (field.field_type) {
                                        case 'text':
                                            inputField = `<input type="text" id="${field.field_name}" name="${field.field_name}" ${requiredAttr}>`;
                                            break;
                                        case 'textarea':
                                            inputField = `<textarea id="${field.field_name}" name="${field.field_name}" ${requiredAttr}></textarea>`;
                                            break;
                                        case 'date':
                                            inputField = `<input type="date" id="${field.field_name}" name="${field.field_name}" ${requiredAttr}>`;
                                            break;
                                    }
                                    dynamicFields.append(`
                                        <label for="${field.field_name}">${field.field_label}${field.is_required ? ' *' : ''}:</label>
                                        ${inputField}
                                    `);
                                });
                            } else {
                                dynamicFields.append(`<p>${data.message || 'No metadata fields defined for this document type.'}</p>`);
                            }
                        },
                        error: function(jqXHR, textStatus, errorThrown) {
                            console.error('AJAX error:', textStatus, errorThrown, jqXHR.responseText);
                            notyf.error('Failed to load metadata fields.');
                        }
                    });
                }
            });

            $('#fileDetailsForm').on('submit', function(e) {
                e.preventDefault();
                proceedToHardcopy();
            });

            $(document).on('click', '.select-file-button', function() {
                $('.file-item').removeClass('selected');
                const $fileItem = $(this).closest('.file-item');
                $fileItem.addClass('selected');
                $('#sendFilePopup').data('selected-file-id', $fileItem.data('file-id'));
                $('#fileSelectionPopup').hide();
                $('#sendFilePopup').show();
            });

            $(document).on('click', '.notification-item', function() {
                const status = $(this).data('status');
                const fileId = $(this).data('file-id');
                const notificationId = $(this).data('notification-id');
                const message = $(this).data('message');

                if (status !== 'pending') {
                    $('#alreadyProcessedMessage').text('This request has already been processed.');
                    $('#alreadyProcessedPopup').show();
                    return;
                }

                $('#fileAcceptanceTitle').text('Review File');
                $('#fileAcceptanceMessage').text(message);
                $('#fileAcceptancePopup').data('notification-id', notificationId).data('file-id', fileId).show();
                showFilePreview(fileId);
            });

            fetchNotifications();
            setInterval(fetchNotifications, 5000);
        });

        function fetchNotifications() {
            $.ajax({
                url: 'fetch_notifications.php',
                method: 'GET',
                data: {
                    csrf_token: '<?= htmlspecialchars($_SESSION['csrf_token']) ?>'
                },
                dataType: 'json',
                success: function(data) {
                    const notificationContainer = $('.notification-log .log-entries');
                    if (data.success) {
                        const currentIds = notificationContainer.find('.notification-item').map(function() {
                            return $(this).data('notification-id');
                        }).get();
                        const newIds = data.notifications.map(n => n.id);

                        if (JSON.stringify(currentIds) !== JSON.stringify(newIds)) {
                            notificationContainer.empty();
                            if (data.notifications.length > 0) {
                                data.notifications.forEach(n => {
                                    const notificationClass = n.status === 'pending' ? 'pending-access' : 'processed-access';
                                    notificationContainer.append(`
                                        <div class="log-entry notification-item ${notificationClass}"
                                             data-notification-id="${n.id}"
                                             data-file-id="${n.file_id || ''}"
                                             data-message="${n.message}"
                                             data-status="${n.status}">
                                            <i class="fas fa-bell"></i>
                                            <p>${n.message}</p>
                                            <span>${new Date(n.timestamp).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</span>
                                        </div>
                                    `);
                                });
                            } else {
                                notificationContainer.empty().append('<div class="log-entry no-notifications"><p>No new notifications.</p></div>');
                            }
                        }
                    } else {
                        notyf.error(data.message);
                    }
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    console.error('Notification fetch error:', textStatus, errorThrown, jqXHR.responseText);
                    notyf.error('Failed to fetch notifications. Check console for details.');
                }
            });
        }

        function showFilePreview(fileId) {
            if (!fileId) {
                $('#filePreview').html('<p>No file selected.</p>');
                return;
            }
            $.ajax({
                url: 'get_file_preview.php',
                method: 'GET',
                data: {
                    file_id: fileId
                },
                success: function(data) {
                    $('#filePreview').html(data);
                },
                error: function() {
                    $('#filePreview').html('<p>Unable to load preview.</p>');
                }
            });
        }

        function handleFileAction(notificationId, fileId, action) {
            if (!notificationId || !fileId) {
                notyf.error('Invalid notification or file ID.');
                return;
            }
            $.ajax({
                url: 'handle_file_acceptance.php',
                method: 'POST',
                data: {
                    notification_id: notificationId,
                    file_id: fileId,
                    action: action,
                    csrf_token: '<?= htmlspecialchars($_SESSION['csrf_token']) ?>'
                },
                dataType: 'json',
                success: function(response) {
                    if (response.success) {
                        notyf.success(response.message);
                        $('#fileAcceptancePopup').hide();
                        $('.notification-item[data-notification-id="' + notificationId + '"]')
                            .removeClass('pending-access')
                            .addClass('processed-access')
                            .off('click')
                            .find('p').text(response.message + ' (Processed)');
                        fetchNotifications();
                        if (response.redirect) window.location.href = response.redirect;
                    } else {
                        notyf.error(response.message);
                    }
                },
                error: function() {
                    notyf.error('Error processing file action.');
                }
            });
        }

        $('#acceptFileButton').on('click', function() {
            const notificationId = $('#fileAcceptancePopup').data('notification-id');
            const fileId = $('#fileAcceptancePopup').data('file-id');
            handleFileAction(notificationId, fileId, 'accept');
        });

        $('#denyFileButton').on('click', function() {
            const notificationId = $('#fileAcceptancePopup').data('notification-id');
            const fileId = $('#fileAcceptancePopup').data('file-id');
            handleFileAction(notificationId, fileId, 'deny');
        });

        function closePopup(popupId) {
            $(`#${popupId}`).hide();
            if (popupId === 'sendFilePopup') {
                $('.file-item').removeClass('selected');
                $('#sendFilePopup').removeData('selected-file-id');
            }
            if (popupId === 'fileDetailsPopup' || popupId === 'linkHardcopyPopup') {
                resetUploadForm();
            }
        }

        function toggleActivityLog() {
            $('#activityLog').toggle();
        }

        $(document).on('click', function(event) {
            if (!$(event.target).closest('.activity-log, .activity-log-icon').length) {
                $('#activityLog').hide();
            }
        });

        function proceedToHardcopy() {
            const documentType = $('#documentType').val();
            if (!documentType) {
                notyf.error('Please select a document type.');
                return;
            }
            if ($('#hardcopyCheckbox').is(':checked') && $('input[name="hardcopyOption"]:checked').val() === 'link') {
                fetchHardcopyFiles();
                $('#fileDetailsPopup').hide();
                $('#linkHardcopyPopup').show();
            } else {
                uploadFile();
            }
        }

        function fetchHardcopyFiles() {
            const departmentId = $('#departmentId').val();
            const documentType = $('#documentType').val();
            if (!departmentId || !documentType) {
                notyf.error('Please select both a department and a document type.');
                return;
            }
            $.ajax({
                url: 'fetch_hardcopy_files.php',
                method: 'POST',
                data: {
                    department_id: departmentId,
                    document_type: documentType,
                    csrf_token: '<?= htmlspecialchars($_SESSION['csrf_token']) ?>'
                },
                dataType: 'json',
                success: function(data) {
                    const hardcopyList = $('#hardcopyList');
                    hardcopyList.empty();
                    if (data.success && data.files.length > 0) {
                        data.files.forEach(file => {
                            const metadata = file.meta_data ? JSON.parse(file.meta_data) : {};
                            const location = metadata.cabinet ?
                                `Cabinet: ${metadata.cabinet}, Layer: ${metadata.layer || 'N/A'}, Box: ${metadata.box || 'N/A'}, Folder: ${metadata.folder || 'N/A'}` : 'No location specified';
                            hardcopyList.append(`
                                <div class="file-item" data-file-id="${file.id}">
                                    <input type="radio" name="hardcopyFile" value="${file.id}">
                                    <span>${file.file_name} (${location})</span>
                                </div>
                            `);
                        });
                        hardcopyList.find('input').on('change', function() {
                            selectedHardcopyId = $(this).val();
                            $('#linkHardcopyButton').prop('disabled', !selectedHardcopyId);
                        });
                    } else {
                        hardcopyList.append('<p>No hardcopy files available for this department and document type.</p>');
                        $('#linkHardcopyButton').prop('disabled', true);
                    }
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    console.error('Hardcopy fetch error:', textStatus, errorThrown, jqXHR.responseText);
                    notyf.error('Failed to fetch hardcopy files.');
                }
            });
        }

        function filterHardcopies() {
            const searchTerm = $('#hardcopySearch').val().toLowerCase();
            $('#hardcopyList .file-item').each(function() {
                const fileName = $(this).find('span').text().toLowerCase();
                $(this).toggle(fileName.includes(searchTerm));
            });
        }

        function linkHardcopy() {
            if (!selectedHardcopyId) {
                notyf.error('Please select a hardcopy to link.');
                return;
            }
            $('#linkHardcopyPopup').hide();
            uploadFile();
        }

        function fetchStorageSuggestion() {
            const departmentId = $('#departmentId').val();
            const documentType = $('#documentType').val();
            if (!departmentId || !documentType) {
                $('#storageSuggestion').html('<p>Please select both a department and a document type.</p>').show();
                return;
            }
            $.ajax({
                url: 'get_storage_suggestions.php',
                method: 'POST',
                data: {
                    department_id: departmentId,
                    document_type: documentType,
                    csrf_token: '<?= htmlspecialchars($_SESSION['csrf_token']) ?>'
                },
                dataType: 'json',
                success: function(data) {
                    if (data.success && data.metadata) {
                        window.storageMetadata = data.metadata;
                        $('#storageSuggestion').html(`
                            <p>Suggested Location: Cabinet ${data.metadata.cabinet || 'N/A'}, 
                            Layer ${data.metadata.layer || 'N/A'}, 
                            Box ${data.metadata.box || 'N/A'}, 
                            Folder ${data.metadata.folder || 'N/A'}</p>
                        `).show();
                        $('#cabinet').val(data.metadata.cabinet || '');
                        $('#layer').val(data.metadata.layer || '');
                        $('#box').val(data.metadata.box || '');
                        $('#folder').val(data.metadata.folder || '');
                    } else {
                        $('#storageSuggestion').html(`<p>${data.message || 'No storage suggestion available.'}</p>`).show();
                        window.storageMetadata = null;
                    }
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    console.error('Storage suggestion error:', textStatus, errorThrown, jqXHR.responseText);
                    $('#storageSuggestion').html('<p>Failed to fetch storage suggestion.</p>').show();
                    window.storageMetadata = null;
                }
            });
        }

        function uploadFile() {
            const documentType = $('#documentType').val();
            const departmentId = $('#departmentId').val();
            if (!documentType) {
                notyf.error('Please select a document type.');
                return;
            }
            if (!departmentId) {
                notyf.error('Please select a department.');
                return;
            }
            if (!$('#hardcopyCheckbox').is(':checked') && !selectedFile) {
                notyf.error('No file selected for upload.');
                return;
            }

            const formData = new FormData();
            if (selectedFile) {
                formData.append('file', selectedFile);
            }
            formData.append('document_type', documentType);
            formData.append('user_id', '<?= htmlspecialchars($userId) ?>');
            formData.append('csrf_token', '<?= htmlspecialchars($_SESSION['csrf_token']) ?>');
            formData.append('department_id', departmentId);
            formData.append('cabinet', $('#cabinet').val() || '');
            formData.append('hard_copy_available', $('#hardcopyCheckbox').is(':checked') ? 1 : 0);

            if ($('#hardcopyCheckbox').is(':checked')) {
                const hardcopyOption = $('input[name="hardcopyOption"]:checked').val();
                if (hardcopyOption === 'new') {
                    const layer = $('#layer').val() || (window.storageMetadata?.layer || 0);
                    const box = $('#box').val() || (window.storageMetadata?.box || 0);
                    const folder = $('#folder').val() || (window.storageMetadata?.folder || 0);
                    if (!$('#cabinet').val() || layer === '' || box === '' || folder === '') {
                        notyf.error('Please provide complete storage details for new hardcopy.');
                        return;
                    }
                    formData.append('layer', layer);
                    formData.append('box', box);
                    formData.append('folder', folder);
                } else if (hardcopyOption === 'link' && selectedHardcopyId) {
                    formData.append('link_hardcopy_id', selectedHardcopyId);
                } else {
                    notyf.error('Please select a hardcopy file to link or specify new storage details.');
                    return;
                }
            }

            $('#fileDetailsForm').find('input:not([type="file"]), textarea, select').each(function() {
                const name = $(this).attr('name');
                const value = $(this).val();
                if (name && value && !['department_id', 'document_type', 'csrf_token', 'cabinet', 'layer', 'box', 'folder', 'hard_copy_available', 'hardcopyOption'].includes(name)) {
                    formData.append(`metadata[${name}]`, value);
                }
            });

            let progressNotyf = null;
            $.ajax({
                url: 'upload_handler.php',
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                xhr: function() {
                    const xhr = new XMLHttpRequest();
                    if (selectedFile) {
                        xhr.upload.addEventListener('progress', function(e) {
                            if (e.lengthComputable) {
                                const percent = Math.round((e.loaded / e.total) * 100);
                                if (progressNotyf) {
                                    notyf.dismiss(progressNotyf);
                                }
                                progressNotyf = notyf.open({
                                    type: 'info',
                                    message: `Uploading: ${percent}%`,
                                    duration: 0
                                });
                            }
                        }, false);
                    }
                    return xhr;
                },
                success: function(data) {
                    if (progressNotyf) {
                        notyf.dismiss(progressNotyf);
                    }
                    let response;
                    try {
                        response = typeof data === 'string' ? JSON.parse(data) : data;
                    } catch (e) {
                        console.error('Invalid server response:', data);
                        notyf.error('Invalid server response. Check console for details.');
                        return;
                    }
                    if (response.success) {
                        notyf.success(response.message);
                        resetUploadForm();
                        window.location.reload();
                    } else {
                        notyf.error(response.message || 'Failed to upload file.');
                    }
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    if (progressNotyf) {
                        notyf.dismiss(progressNotyf);
                    }
                    console.error('Upload error:', textStatus, errorThrown, jqXHR.responseText);
                    notyf.error('An error occurred while uploading the file. Check console for details.');
                }
            });
        }

        function resetUploadForm() {
            selectedFile = null;
            selectedHardcopyId = null;
            window.storageMetadata = null;
            $('#fileInput').val('');
            $('#fileDetailsForm')[0].reset();
            $('#dynamicFields').empty();
            $('#hardcopyDetails').hide();
            $('#hardcopyOptions').hide();
            $('#storageSuggestion').hide().empty();
            $('#hardcopyCheckbox').prop('checked', false);
            $('#linkHardcopyButton').prop('disabled', true);
            $('#documentType, #departmentId').val('').trigger('change');
            closePopup('fileDetailsPopup');
            closePopup('linkHardcopyPopup');
        }

        function sendFile() {
            const recipients = $('#recipientSelect').val();
            if (!recipients || recipients.length === 0) {
                notyf.error('Please select at least one recipient.');
                return;
            }
            const fileId = $('.file-item.selected').data('file-id') || $('#sendFilePopup').data('selected-file-id');
            if (!fileId) {
                notyf.error('No file selected to send.');
                return;
            }

            $.ajax({
                url: 'send_file_handler.php',
                method: 'POST',
                data: {
                    file_id: fileId,
                    recipients: recipients,
                    csrf_token: '<?= htmlspecialchars($_SESSION['csrf_token']) ?>'
                },
                dataType: 'json',
                success: function(response) {
                    if (response.success) {
                        notyf.success(response.message);
                        closePopup('sendFilePopup');
                        fetchNotifications();
                    } else {
                        notyf.error(response.message);
                    }
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    console.error('Send file error:', textStatus, errorThrown, jqXHR.responseText);
                    notyf.error('An error occurred while sending the file. Check console for details.');
                }
            });
        }

        function viewFile(fileId) {
            if (!fileId) {
                notyf.error('Invalid file ID.');
                return;
            }
            window.location.href = `view_file.php?file_id=${fileId}`;
        }

        function sortPersonalFiles() {
            const sortName = $('.sort-personal-name').val();
            const sortType = $('.sort-personal-type').val();
            const sortSource = $('.sort-personal-source').val();
            const isHardCopy = $('#hardCopyPersonalFilter').is(':checked');

            const $files = $('#personalFiles .file-item').get();
            $files.sort(function(a, b) {
                let valA, valB;
                if (sortName) {
                    valA = $(a).data('file-name').toLowerCase();
                    valB = $(b).data('file-name').toLowerCase();
                    return sortName === 'name-asc' ? valA.localeCompare(valB) : valB.localeCompare(valA);
                } else if (sortType) {
                    valA = $(a).data('document-type').toLowerCase();
                    valB = $(b).data('document-type').toLowerCase();
                    return valA.localeCompare(valB);
                } else if (sortSource) {
                    valA = $(a).data('source');
                    valB = $(b).data('source');
                    return valA.localeCompare(valB);
                }
                return 0;
            });

            if (isHardCopy) {
                $files.filter(function() {
                    return !$(this).data('hard-copy');
                }).remove();
            }

            $('#personalFiles').empty().append($files);
        }

        function filterPersonalFilesByHardCopy() {
            const isHardCopy = $('#hardCopyPersonalFilter').is(':checked');
            $('#personalFiles .file-item').each(function() {
                $(this).toggle($(this).data('hard-copy') || !isHardCopy);
            });
        }

        function sortDepartmentFiles(deptId) {
            const $grid = $('#departmentFiles-' + deptId);
            const sortName = $grid.closest('.file-subsection').find('.sort-department-name').val();
            const sortType = $grid.closest('.file-subsection').find('.sort-department-type').val();
            const isHardCopy = $grid.closest('.file-subsection').find('.hard-copy-department-filter').is(':checked');

            const $files = $grid.find('.file-item').get();
            $files.sort(function(a, b) {
                let valA, valB;
                if (sortName) {
                    valA = $(a).data('file-name').toLowerCase();
                    valB = $(b).data('file-name').toLowerCase();
                    return sortName === 'name-asc' ? valA.localeCompare(valB) : valB.localeCompare(valA);
                } else if (sortType) {
                    valA = $(a).data('document-type').toLowerCase();
                    valB = $(b).data('document-type').toLowerCase();
                    return valA.localeCompare(valB);
                }
                return 0;
            });

            if (isHardCopy) {
                $files.filter(function() {
                    return !$(this).data('hard-copy');
                }).remove();
            }

            $grid.empty().append($files);
        }

        function filterDepartmentFilesByHardCopy(deptId) {
            const isHardCopy = $('#departmentFiles-' + deptId).closest('.file-subsection').find('.hard-copy-department-filter').is(':checked');
            $('#departmentFiles-' + deptId + ' .file-item').each(function() {
                $(this).toggle($(this).data('hard-copy') || !isHardCopy);
            });
        }

        function filterFiles() {
            const searchTerm = $('#fileSearch').val().toLowerCase();
            $('#fileDisplay .file-item').each(function() {
                const fileName = $(this).find('p').text().toLowerCase();
                $(this).toggle(fileName.includes(searchTerm));
            });
        }

        function filterFilesByType() {
            const typeFilter = $('#documentTypeFilter').val().toLowerCase();
            $('#fileDisplay .file-item').each(function() {
                const docType = $(this).data('document-type').toLowerCase();
                $(this).toggle(!typeFilter || docType === typeFilter);
            });
        }

        function switchView(viewType) {
            const $display = $('#fileDisplay');
            $display.removeClass('thumbnail-view list-view').addClass(viewType + '-view');
            $('#thumbnailViewButton').toggleClass('active', viewType === 'thumbnail');
            $('#listViewButton').toggleClass('active', viewType === 'list');
        }
    </script> -->