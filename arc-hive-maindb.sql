-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Sep 01, 2025 at 02:58 PM
-- Server version: 10.4.32-MariaDB
-- PHP Version: 8.2.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `arc-hive-maindb`
--

-- --------------------------------------------------------

--
-- Table structure for table `departments`
--

CREATE TABLE `departments` (
  `department_id` int(11) NOT NULL,
  `department_name` varchar(255) NOT NULL COMMENT 'Name of the department',
  `department_type` enum('college','office','sub_department') NOT NULL COMMENT 'Type (e.g., college, office, sub_department)',
  `name_type` enum('Academic','Administrative','Program') NOT NULL COMMENT 'Category (e.g., Academic, Administrative, Program)',
  `parent_department_id` int(11) DEFAULT NULL COMMENT 'Recursive reference to parent department',
  `folder_path` varchar(1024) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `departments`
--

INSERT INTO `departments` (`department_id`, `department_name`, `department_type`, `name_type`, `parent_department_id`, `folder_path`) VALUES
(1, 'College of Education', 'college', 'Academic', NULL, 'Uploads/College of Education'),
(2, 'College of Arts and Sciences', 'college', 'Academic', NULL, 'Uploads/College of Arts and Sciences'),
(3, 'College of Engineering and Technology', 'college', 'Academic', NULL, 'Uploads/College of Engineering and Technology'),
(4, 'College of Business and Management', 'college', 'Academic', NULL, 'Uploads/College of Business and Management'),
(5, 'College of Agriculture and Forestry', 'college', 'Academic', NULL, 'Uploads/College of Agriculture and Forestry'),
(6, 'College of Veterinary Medicine', 'college', 'Academic', NULL, 'Uploads/College of Veterinary Medicine'),
(7, 'Bachelor of Elementary Education', 'sub_department', 'Program', 1, 'Uploads/College of Education/Bachelor of Elementary Education'),
(8, 'Early Childhood Education', 'sub_department', 'Program', 1, 'Uploads/College of Education/Early Childhood Education'),
(9, 'Secondary Education', 'sub_department', 'Program', 1, 'Uploads/College of Education/Secondary Education'),
(10, 'Technology and Livelihood Education', 'sub_department', 'Program', 1, 'Uploads/College of Education/Technology and Livelihood Education'),
(11, 'BS Development Communication', 'sub_department', 'Program', 2, 'Uploads/College of Arts and Sciences/BS Development Communication'),
(12, 'BS Psychology', 'sub_department', 'Program', 2, 'Uploads/College of Arts and Sciences/BS Psychology'),
(13, 'AB Economics', 'sub_department', 'Program', 2, 'Uploads/College of Arts and Sciences/AB Economics'),
(14, 'BS Geodetic Engineering', 'sub_department', 'Program', 3, 'Uploads/College of Engineering and Technology/BS Geodetic Engineering'),
(15, 'BS Agricultural and Biosystems Engineering', 'sub_department', 'Program', 3, 'Uploads/College of Engineering and Technology/BS Agricultural and Biosystems Engineering'),
(16, 'BS Information Technology', 'sub_department', 'Program', 3, 'Uploads/College of Engineering and Technology/BS Information Technology'),
(17, 'BS Business Administration', 'sub_department', 'Program', 4, 'Uploads/College of Business and Management/BS Business Administration'),
(18, 'BS Tourism Management', 'sub_department', 'Program', 4, 'Uploads/College of Business and Management/BS Tourism Management'),
(19, 'BS Entrepreneurship', 'sub_department', 'Program', 4, 'Uploads/College of Business and Management/BS Entrepreneurship'),
(20, 'BS Agribusiness', 'sub_department', 'Program', 4, 'Uploads/College of Business and Management/BS Agribusiness'),
(21, 'BS Agriculture', 'sub_department', 'Program', 5, 'Uploads/College of Agriculture and Forestry/BS Agriculture'),
(22, 'BS Forestry', 'sub_department', 'Program', 5, 'Uploads/College of Agriculture and Forestry/BS Forestry'),
(23, 'BS Animal Science', 'sub_department', 'Program', 5, 'Uploads/College of Agriculture and Forestry/BS Animal Science'),
(24, 'BS Food Technology', 'sub_department', 'Program', 5, 'Uploads/College of Agriculture and Forestry/BS Food Technology'),
(25, 'Doctor of Veterinary Medicine', 'sub_department', 'Program', 6, 'Uploads/College of Veterinary Medicine/Doctor of Veterinary Medicine'),
(26, 'Admission and Registration Services', 'office', 'Administrative', NULL, 'Uploads/Admission and Registration Services'),
(27, 'Audit Offices', 'office', 'Administrative', NULL, 'Uploads/Audit Offices'),
(28, 'External Linkages and International Affairs', 'office', 'Administrative', NULL, 'Uploads/External Linkages and International Affairs'),
(29, 'Management Information Systems', 'office', 'Administrative', NULL, 'Uploads/Management Information Systems'),
(30, 'Office of the President', 'office', 'Administrative', NULL, 'Uploads/Office of the President');

-- --------------------------------------------------------

--
-- Table structure for table `document_types`
--

CREATE TABLE `document_types` (
  `document_type_id` int(11) NOT NULL,
  `type_name` varchar(50) NOT NULL COMMENT 'Name of the document type (e.g., Memorandum)',
  `fields` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL CHECK (json_valid(`fields`)),
  `is_active` tinyint(1) NOT NULL DEFAULT 1 COMMENT 'Flag to enable/disable document type (1 = active, 0 = inactive)'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `document_types`
--

INSERT INTO `document_types` (`document_type_id`, `type_name`, `fields`, `is_active`) VALUES
(1, 'Academic Records', '[{\"name\": \"record_id\", \"label\": \"Record ID\", \"type\": \"text\"}, {\"name\": \"date_released\", \"label\": \"Date Released\", \"type\": \"date\"}, {\"name\": \"date_received\", \"label\": \"Date Received\", \"type\": \"date\"}]', 1),
(2, 'Transcript of Records', '[{\"name\": \"tor_id\", \"label\": \"TOR ID\", \"type\": \"text\"}, {\"name\": \"date_released\", \"label\": \"Date Released\", \"type\": \"date\"}, {\"name\": \"date_received\", \"label\": \"Date Received\", \"type\": \"date\"}]', 1),
(3, 'Diploma', '[{\"name\": \"diploma_id\", \"label\": \"Diploma ID\", \"type\": \"text\"}, {\"name\": \"date_released\", \"label\": \"Date Released\", \"type\": \"date\"}, {\"name\": \"date_received\", \"label\": \"Date Received\", \"type\": \"date\"}]', 1),
(4, 'Memorandum', '[{\"name\": \"memorandum_id\", \"label\": \"Memorandum Number\", \"type\": \"text\"}, {\"name\": \"date_released\", \"label\": \"Date Released\", \"type\": \"date\"}, {\"name\": \"date_received\", \"label\": \"Date Received\", \"type\": \"date\"}]', 1),
(5, 'Invoice', '[{\"name\": \"invoice_number\", \"label\": \"Invoice Number\", \"type\": \"text\"}, {\"name\": \"date_released\", \"label\": \"Date Released\", \"type\": \"date\"}, {\"name\": \"date_received\", \"label\": \"Date Received\", \"type\": \"date\"}]', 1),
(6, 'Purchase Order', '[{\"name\": \"po_number\", \"label\": \"Purchase Order Number\", \"type\": \"text\"}, {\"name\": \"date_released\", \"label\": \"Date Released\", \"type\": \"date\"}, {\"name\": \"date_received\", \"label\": \"Date Received\", \"type\": \"date\"}]', 1),
(7, 'Meeting', '[{\"name\": \"meeting_id\", \"label\": \"Meeting ID\", \"type\": \"text\"}, {\"name\": \"date_released\", \"label\": \"Date Released\", \"type\": \"date\"}, {\"name\": \"date_received\", \"label\": \"Date Received\", \"type\": \"date\"}]', 1);

--
-- Triggers `document_types`
--
DELIMITER $$
CREATE TRIGGER `tr_document_types_json` BEFORE INSERT ON `document_types` FOR EACH ROW BEGIN
    IF NEW.fields IS NOT NULL AND NEW.fields != '' AND NOT JSON_VALID(NEW.fields) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid JSON in fields column';
    END IF;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `tr_document_types_json_update` BEFORE UPDATE ON `document_types` FOR EACH ROW BEGIN
    IF NEW.fields IS NOT NULL AND NEW.fields != '' AND NOT JSON_VALID(NEW.fields) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid JSON in fields column during UPDATE';
    END IF;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Table structure for table `files`
--

CREATE TABLE `files` (
  `file_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `department_id` int(11) DEFAULT NULL,
  `sub_department_id` int(11) DEFAULT NULL,
  `document_type_id` int(11) DEFAULT NULL,
  `doc_type_fields` longtext DEFAULT NULL CHECK (json_valid(`doc_type_fields`)),
  `file_name` varchar(255) NOT NULL,
  `file_path` varchar(1024) DEFAULT NULL,
  `copy_type` enum('hard_copy','soft_copy') NOT NULL,
  `folder_capacity` int(11) DEFAULT NULL,
  `upload_date` datetime NOT NULL DEFAULT current_timestamp(),
  `date_updated` datetime NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `parent_file_id` int(11) DEFAULT NULL,
  `storage_location_id` int(11) DEFAULT NULL,
  `access_level` enum('personal','sub_department','college') NOT NULL DEFAULT 'personal',
  `qr_path` varchar(512) DEFAULT NULL COMMENT 'Path to static QR code image',
  `file_status` enum('pending_ocr','ocr_failed','completed','ocr_complete','other') DEFAULT 'pending_ocr' COMMENT 'File processing status',
  `file_type` varchar(50) DEFAULT NULL COMMENT 'Type of file (e.g., PDF, DOC)',
  `file_size` bigint(20) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `files`
--

INSERT INTO `files` (`file_id`, `user_id`, `department_id`, `sub_department_id`, `document_type_id`, `doc_type_fields`, `file_name`, `file_path`, `copy_type`, `folder_capacity`, `upload_date`, `date_updated`, `parent_file_id`, `storage_location_id`, `access_level`, `qr_path`, `file_status`, `file_type`, `file_size`) VALUES
(230, 28, NULL, NULL, 1, '{\"dynamic_fields\":{\"doc_type_fields\":\"{\\\"record_id\\\":\\\"55676\\\",\\\"date_released\\\":\\\"2025-08-29\\\",\\\"date_received\\\":\\\"2025-08-29\\\"}\"}}', 'Untitled00.png', 'C:\\xampp\\htdocs\\Arc_Hive-DEVELOPMENT\\uploads\\Uploads\\Users\\rivz_rivera\\User_1\\Untitled00.png', 'soft_copy', NULL, '2025-08-29 08:43:33', '2025-08-29 08:43:33', NULL, 100, 'personal', NULL, 'completed', 'image/png', 233399),
(231, 28, NULL, NULL, 1, '{\"dynamic_fields\":{\"doc_type_fields\":\"{\\\"record_id\\\":\\\"856985\\\",\\\"date_released\\\":\\\"2025-08-29\\\",\\\"date_received\\\":\\\"2025-08-29\\\"}\"}}', 'websystem-OCR-test.pdf', 'C:\\xampp\\htdocs\\Arc_Hive-DEVELOPMENT\\uploads\\Uploads\\Users\\rivz_rivera\\User_1\\websystem-OCR-test.pdf', 'soft_copy', NULL, '2025-08-29 08:50:58', '2025-08-29 08:50:58', NULL, 100, 'personal', NULL, 'completed', 'application/pdf', 65351),
(232, 28, NULL, NULL, 1, '{\"dynamic_fields\":{\"doc_type_fields\":\"{\\\"record_id\\\":\\\"89865\\\",\\\"date_released\\\":\\\"2025-08-29\\\",\\\"date_received\\\":\\\"2025-08-29\\\"}\"}}', 'BASIC LINUX COMMANDS.pdf', 'C:\\xampp\\htdocs\\Arc_Hive-DEVELOPMENT\\uploads\\Uploads\\Users\\rivz_rivera\\User_1\\BASIC LINUX COMMANDS.pdf', 'soft_copy', NULL, '2025-08-29 09:11:31', '2025-08-29 09:11:31', NULL, 100, 'personal', NULL, 'completed', 'application/pdf', 41145),
(245, 28, NULL, NULL, 1, '{\"dynamic_fields\":{\"doc_type_fields\":\"{\\\"record_id\\\":\\\"554565\\\",\\\"date_released\\\":\\\"2025-08-29\\\",\\\"date_received\\\":\\\"2025-08-29\\\"}\"}}', 'LAST TEST.pdf', 'C:\\xampp\\htdocs\\Arc_Hive-DEVELOPMENT\\uploads\\Uploads\\Users\\rivz_rivera\\User_1\\LAST TEST.pdf', 'soft_copy', NULL, '2025-08-29 11:24:23', '2025-08-29 11:24:23', NULL, 100, 'personal', NULL, 'completed', 'application/pdf', 757576),
(246, 28, NULL, NULL, 1, '{\"dynamic_fields\":{\"doc_type_fields\":\"{\\\"record_id\\\":\\\"78787878\\\",\\\"date_released\\\":\\\"2025-08-29\\\",\\\"date_received\\\":\\\"2025-08-29\\\"}\"}}', 'LAST-OCR-TEST.pdf', 'C:\\xampp\\htdocs\\Arc_Hive-DEVELOPMENT\\uploads\\Uploads\\Users\\rivz_rivera\\User_1\\LAST-OCR-TEST.pdf', 'soft_copy', NULL, '2025-08-29 11:28:14', '2025-08-29 11:28:14', NULL, 100, 'personal', NULL, 'completed', 'application/pdf', 757576),
(248, 28, NULL, NULL, 5, '{\"dynamic_fields\":{\"doc_type_fields\":\"{\\\"invoice_number\\\":\\\"12343\\\",\\\"date_released\\\":\\\"2025-08-29\\\",\\\"date_received\\\":\\\"2025-08-29\\\"}\"}}', 'OCR-DATA-ETHICS-Presentation - Copy.pdf', 'C:\\xampp\\htdocs\\Arc_Hive-DEVELOPMENT\\uploads\\Uploads\\Users\\rivz_rivera\\User_1\\OCR-DATA-ETHICS-Presentation - Copy.pdf', 'soft_copy', NULL, '2025-08-29 12:03:50', '2025-08-29 12:03:50', NULL, 100, 'personal', NULL, 'completed', 'application/pdf', 1503236),
(249, 28, NULL, NULL, 1, '{\"dynamic_fields\":{\"doc_type_fields\":\"{\\\"record_id\\\":\\\"12312321\\\",\\\"date_released\\\":\\\"2025-08-29\\\",\\\"date_received\\\":\\\"2025-08-29\\\"}\"}}', 'REVIEWER-1Introduction-to-SIA (1).pdf', 'C:\\xampp\\htdocs\\Arc_Hive-DEVELOPMENT\\uploads\\Uploads\\Users\\rivz_rivera\\User_1\\REVIEWER-1Introduction-to-SIA (1).pdf', 'soft_copy', NULL, '2025-08-29 12:06:06', '2025-08-29 12:06:06', NULL, 100, 'personal', NULL, 'completed', 'application/pdf', 128742),
(250, 28, NULL, NULL, 3, '{\"dynamic_fields\":{\"doc_type_fields\":\"{\\\"diploma_id\\\":\\\"12121212\\\",\\\"date_released\\\":\\\"2025-08-29\\\",\\\"date_received\\\":\\\"2025-08-29\\\"}\"}}', 'REVIEWER-1Introduction-to-SIA.pdf', 'C:\\xampp\\htdocs\\Arc_Hive-DEVELOPMENT\\uploads\\Uploads\\Users\\rivz_rivera\\User_1\\REVIEWER-1Introduction-to-SIA.pdf', 'soft_copy', NULL, '2025-08-29 12:08:20', '2025-08-29 12:08:20', NULL, 100, 'personal', NULL, 'completed', 'application/pdf', 128742),
(251, 28, NULL, NULL, 3, '{\"dynamic_fields\":{\"doc_type_fields\":\"{\\\"diploma_id\\\":\\\"777\\\",\\\"date_released\\\":\\\"2025-08-29\\\",\\\"date_received\\\":\\\"2025-08-29\\\"}\"}}', 'CHECK-TEST.pdf', 'C:\\xampp\\htdocs\\Arc_Hive-DEVELOPMENT\\uploads\\Uploads\\Users\\rivz_rivera\\User_1\\CHECK-TEST.pdf', 'soft_copy', NULL, '2025-08-29 12:09:31', '2025-08-29 12:09:31', NULL, 100, 'personal', NULL, 'completed', 'application/pdf', 2710569),
(252, 28, NULL, NULL, 1, '{\"dynamic_fields\":{\"doc_type_fields\":\"{\\\"record_id\\\":\\\"12345\\\",\\\"date_released\\\":\\\"2025-08-29\\\",\\\"date_received\\\":\\\"2025-08-29\\\"}\"}}', 'Re-CHECK-TEST.pdf', 'C:\\xampp\\htdocs\\Arc_Hive-DEVELOPMENT\\uploads\\Uploads\\Users\\rivz_rivera\\User_1\\Re-CHECK-TEST.pdf', 'soft_copy', NULL, '2025-08-29 12:59:20', '2025-08-29 12:59:20', NULL, 100, 'personal', NULL, 'completed', 'application/pdf', 2710569),
(253, 28, NULL, NULL, 3, '{\"dynamic_fields\":{\"doc_type_fields\":\"{\\\"diploma_id\\\":\\\"787\\\",\\\"date_released\\\":\\\"2025-08-29\\\",\\\"date_received\\\":\\\"2025-08-29\\\"}\"}}', 'Re-CHECK-TEST-again.pdf', 'C:\\xampp\\htdocs\\Arc_Hive-DEVELOPMENT\\uploads\\Uploads\\Users\\rivz_rivera\\User_1\\Re-CHECK-TEST-again.pdf', 'soft_copy', NULL, '2025-08-29 13:31:14', '2025-08-29 13:31:14', NULL, 100, 'personal', NULL, 'completed', 'application/pdf', 2710569),
(254, 28, NULL, NULL, 7, '{\"dynamic_fields\":{\"doc_type_fields\":\"{\\\"meeting_id\\\":\\\"1232\\\",\\\"date_released\\\":\\\"2025-08-29\\\",\\\"date_received\\\":\\\"2025-08-29\\\"}\"}}', 'Re-CHECK-TEST-again and again.pdf', 'C:\\xampp\\htdocs\\Arc_Hive-DEVELOPMENT\\uploads\\Uploads\\Users\\rivz_rivera\\User_1\\Re-CHECK-TEST-again and again.pdf', 'soft_copy', NULL, '2025-08-29 13:36:18', '2025-08-29 13:36:18', NULL, 100, 'personal', NULL, 'completed', 'application/pdf', 2710569),
(255, 28, NULL, NULL, 5, '{\"dynamic_fields\":{\"doc_type_fields\":\"{\\\"invoice_number\\\":\\\"4343\\\",\\\"date_released\\\":\\\"2025-08-29\\\",\\\"date_received\\\":\\\"2025-08-29\\\"}\"}}', 'Re-CHECK-TESTER-again and again.pdf', 'C:\\xampp\\htdocs\\Arc_Hive-DEVELOPMENT\\uploads\\Uploads\\Users\\rivz_rivera\\User_1\\Re-CHECK-TESTER-again and again.pdf', 'soft_copy', NULL, '2025-08-29 13:48:59', '2025-08-29 13:48:59', NULL, 100, 'personal', NULL, 'completed', 'application/pdf', 2710569),
(256, 28, NULL, NULL, 3, '{\"dynamic_fields\":{\"doc_type_fields\":\"{\\\"diploma_id\\\":\\\"8787\\\",\\\"date_released\\\":\\\"2025-08-29\\\",\\\"date_received\\\":\\\"2025-08-29\\\"}\"}}', 'HHH.pdf', 'C:\\xampp\\htdocs\\Arc_Hive-DEVELOPMENT\\uploads\\Uploads\\Users\\rivz_rivera\\User_1\\HHH.pdf', 'soft_copy', NULL, '2025-08-29 15:32:13', '2025-08-29 15:32:13', NULL, 100, 'personal', NULL, 'completed', 'application/pdf', 2710569),
(257, 28, NULL, NULL, 3, '{\"dynamic_fields\":{\"doc_type_fields\":\"{\\\"diploma_id\\\":\\\"2132\\\",\\\"date_released\\\":\\\"2025-08-29\\\",\\\"date_received\\\":\\\"2025-08-29\\\"}\"}}', 'RETEST.pdf', 'C:\\xampp\\htdocs\\Arc_Hive-DEVELOPMENT\\uploads\\Uploads\\Users\\rivz_rivera\\RETEST.pdf', 'soft_copy', NULL, '2025-08-29 16:30:58', '2025-08-29 16:30:58', NULL, NULL, 'personal', NULL, 'completed', 'application/pdf', 2710569),
(258, 28, NULL, NULL, 3, '{\"dynamic_fields\":{\"doc_type_fields\":\"{\\\"diploma_id\\\":\\\"123456\\\",\\\"date_released\\\":\\\"2025-08-29\\\",\\\"date_received\\\":\\\"2025-08-29\\\"}\"}}', 'RETEST-9898.pdf', 'C:\\xampp\\htdocs\\Arc_Hive-DEVELOPMENT\\uploads\\Uploads\\Users\\rivz_rivera\\User_1\\RETEST-9898.pdf', 'soft_copy', NULL, '2025-08-29 16:31:28', '2025-08-29 16:31:28', NULL, 100, 'personal', NULL, 'completed', 'application/pdf', 2710569);

--
-- Triggers `files`
--
DELIMITER $$
CREATE TRIGGER `tr_files_access_level` BEFORE INSERT ON `files` FOR EACH ROW BEGIN
    IF NEW.access_level = 'college' AND NEW.department_id IS NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'department_id cannot be NULL when access_level is college';
    ELSEIF NEW.access_level = 'sub_department' AND NEW.sub_department_id IS NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'sub_department_id cannot be NULL when access_level is sub_department';
    ELSEIF NEW.access_level = 'sub_department' AND NEW.sub_department_id IS NOT NULL AND NEW.department_id IS NOT NULL THEN
        -- Ensure sub_department_id belongs to the specified department_id
        IF NOT EXISTS (
            SELECT 1 FROM departments 
            WHERE department_id = NEW.sub_department_id 
            AND parent_department_id = NEW.department_id
        ) THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'sub_department_id does not belong to the specified department_id';
        END IF;
    END IF;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `tr_files_doc_type_fields_json` BEFORE INSERT ON `files` FOR EACH ROW BEGIN
    IF NEW.doc_type_fields IS NOT NULL AND NEW.doc_type_fields != '' AND NOT JSON_VALID(NEW.doc_type_fields) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid JSON in doc_type_fields column';
    END IF;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `tr_files_doc_type_fields_json_update` BEFORE UPDATE ON `files` FOR EACH ROW BEGIN
    IF NEW.doc_type_fields IS NOT NULL AND NEW.doc_type_fields != '' AND NOT JSON_VALID(NEW.doc_type_fields) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid JSON in doc_type_fields column during UPDATE';
    END IF;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `tr_files_sync_path` BEFORE INSERT ON `files` FOR EACH ROW BEGIN
    DECLARE complete_path VARCHAR(1024);
    DECLARE dept_path VARCHAR(1024);
    DECLARE sub_dept_path VARCHAR(1024);
    DECLARE storage_path VARCHAR(512);
    
    -- Get department and storage information
    SELECT 
        d.folder_path, 
        sd.folder_path, 
        vsp.full_path
    INTO 
        dept_path, 
        sub_dept_path, 
        storage_path
    FROM departments d
    LEFT JOIN departments sd ON sd.department_id = NEW.sub_department_id
    LEFT JOIN v_storage_paths vsp ON vsp.storage_location_id = NEW.storage_location_id
    WHERE d.department_id = NEW.department_id
    LIMIT 1;
    
    -- Construct the complete path
    IF storage_path IS NOT NULL THEN
        IF NEW.sub_department_id IS NOT NULL AND sub_dept_path IS NOT NULL THEN
            SET complete_path = CONCAT(sub_dept_path, '/', storage_path, '/', COALESCE(NEW.file_name, ''));
        ELSEIF NEW.department_id IS NOT NULL AND dept_path IS NOT NULL THEN
            SET complete_path = CONCAT(dept_path, '/', storage_path, '/', COALESCE(NEW.file_name, ''));
        ELSE
            SET complete_path = CONCAT(storage_path, '/', COALESCE(NEW.file_name, ''));
        END IF;
    ELSEIF NEW.sub_department_id IS NOT NULL AND sub_dept_path IS NOT NULL THEN
        SET complete_path = CONCAT(sub_dept_path, '/', COALESCE(NEW.file_name, ''));
    ELSEIF NEW.department_id IS NOT NULL AND dept_path IS NOT NULL THEN
        SET complete_path = CONCAT(dept_path, '/', COALESCE(NEW.file_name, ''));
    ELSE
        SET complete_path = COALESCE(NEW.file_path, NEW.file_name, 'No path available');
    END IF;
    
    -- Validate path length
    IF LENGTH(complete_path) > 1024 THEN
        SIGNAL SQLSTATE '22001'
        SET MESSAGE_TEXT = 'Generated file path exceeds maximum length of 1024 characters';
    END IF;
    
    SET NEW.file_path = complete_path;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `tr_files_sync_path_update` BEFORE UPDATE ON `files` FOR EACH ROW BEGIN
    DECLARE complete_path VARCHAR(1024);
    DECLARE dept_path VARCHAR(1024);
    DECLARE sub_dept_path VARCHAR(1024);
    DECLARE storage_path VARCHAR(512);
    
    -- Only recompute path if relevant fields have changed
    IF NEW.department_id != OLD.department_id OR 
       NEW.sub_department_id != OLD.sub_department_id OR 
       NEW.storage_location_id != OLD.storage_location_id OR 
       NEW.file_name != OLD.file_name THEN
        -- Get department and storage information
        SELECT 
            d.folder_path, 
            sd.folder_path, 
            vsp.full_path
        INTO 
            dept_path, 
            sub_dept_path, 
            storage_path
        FROM departments d
        LEFT JOIN departments sd ON sd.department_id = NEW.sub_department_id
        LEFT JOIN v_storage_paths vsp ON vsp.storage_location_id = NEW.storage_location_id
        WHERE d.department_id = NEW.department_id
        LIMIT 1;
        
        -- Construct the complete path
        IF storage_path IS NOT NULL THEN
            IF NEW.sub_department_id IS NOT NULL AND sub_dept_path IS NOT NULL THEN
                SET complete_path = CONCAT(sub_dept_path, '/', storage_path, '/', COALESCE(NEW.file_name, ''));
            ELSEIF NEW.department_id IS NOT NULL AND dept_path IS NOT NULL THEN
                SET complete_path = CONCAT(dept_path, '/', storage_path, '/', COALESCE(NEW.file_name, ''));
            ELSE
                SET complete_path = CONCAT(storage_path, '/', COALESCE(NEW.file_name, ''));
            END IF;
        ELSEIF NEW.sub_department_id IS NOT NULL AND sub_dept_path IS NOT NULL THEN
            SET complete_path = CONCAT(sub_dept_path, '/', COALESCE(NEW.file_name, ''));
        ELSEIF NEW.department_id IS NOT NULL AND dept_path IS NOT NULL THEN
            SET complete_path = CONCAT(dept_path, '/', COALESCE(NEW.file_name, ''));
        ELSE
            SET complete_path = COALESCE(NEW.file_path, NEW.file_name, 'No path available');
        END IF;
        
        -- Validate path length
        IF LENGTH(complete_path) > 1024 THEN
            SIGNAL SQLSTATE '22001'
            SET MESSAGE_TEXT = 'Generated file path exceeds maximum length of 1024 characters';
        END IF;
        
        SET NEW.file_path = complete_path;
    END IF;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `tr_files_validate_status` BEFORE INSERT ON `files` FOR EACH ROW BEGIN
    IF NEW.file_status IN ('pending_ocr', 'ocr_failed') AND 
       NEW.file_type NOT IN ('pdf', 'jpeg', 'png', 'doc', 'docx') THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'file_status can only be pending_ocr or ocr_failed for file_type pdf, jpeg, png, doc, or docx';
    END IF;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `tr_files_validate_status_update` BEFORE UPDATE ON `files` FOR EACH ROW BEGIN
    IF NEW.file_status IN ('pending_ocr', 'ocr_failed') AND 
       NEW.file_type NOT IN ('pdf', 'jpeg', 'png', 'doc', 'docx') THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'file_status can only be pending_ocr or ocr_failed for file_type pdf, jpeg, png, doc, or docx';
    END IF;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Table structure for table `file_audit`
--

CREATE TABLE `file_audit` (
  `audit_id` int(11) NOT NULL,
  `file_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `action` varchar(50) DEFAULT NULL,
  `details` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL CHECK (json_valid(`details`)),
  `timestamp` datetime DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Table structure for table `file_pages`
--

CREATE TABLE `file_pages` (
  `page_id` int(11) NOT NULL,
  `file_id` int(11) NOT NULL,
  `page_number` int(11) NOT NULL,
  `extracted_text` longtext DEFAULT NULL,
  `ocr_attempts` int(11) DEFAULT 0,
  `page_status` enum('pending','completed','failed') DEFAULT 'pending' COMMENT 'Page processing status',
  `extraction_date` datetime DEFAULT current_timestamp() ON UPDATE current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `file_pages`
--

INSERT INTO `file_pages` (`page_id`, `file_id`, `page_number`, `extracted_text`, `ocr_attempts`, `page_status`, `extraction_date`) VALUES
(13, 230, 1, 'REPUBLIC OF THE PHILIPPINES\n\nDEPARTMENT OF TRANSPORTATION\nLAND TRANSPORTATION OFFICE\n\n‘STUDENT-DRIVER\'S PERMIT\n\nava aa NEY BLO\nsara) tee easement at\nPe « ooawre be a7\n\n{AT RIZAL ST, POBLACION SUR, MAYANTOC,\n\nema mente Ay Cae\nC3ERsazou0 aonajou/or C30\n\"  BIAGK’ WiLL NOT DONATE ANY ORGAN\n\nName: UNEYUANO ADRUANNE FUVERA\n[Adavens POO. SUR. MAYANTOC, TARLAC\net no ones2e3e2a3\n\n', 0, 'completed', '2025-08-29 08:49:58'),
(14, 231, 1, 'Unit I: Introduction to Web Systems \nHistory and Evolution of the Web \n• 1960s: Establishment of ARPANET, the foundation of the internet. \n• 1989: Tim Berners-Lee develops HTML and proposes the World Wide Web. \n• Early 1990s: Development of the first web browsers (like Mosaic) and servers. \n• Late 1990s - Early 2000s: The dot-com boom, rise of e-commerce. \n• 2010s: The mobile revolution and growth of social media. \nInternet Protocols and Web Architecture \n• TCP/IP: Fundamental protocols for communication on the internet. \n• HTTP: Protocol for transferring web pages and other data. \n• DNS: Translates domain names into IP addresses. \n• FTP: Protocol for file transfer. \nWeb Architecture \n• Client-server model: Browsers (clients) request content from servers. \n• Web server software like Apache handles requests and sends responses. \n \nWeb Browsers and Web Servers \nWeb Browsers \n• Applications used to access and display web content (e.g., Google Chrome, Mozilla \nFirefox, Safari). \nWeb Servers \n• Systems that host websites and provide content to clients (users) through the internet. \n \nRoles and Responsibilities of Web Developers \n• Front-end Developers: Focus on the design and layout using HTML, CSS, JavaScript. \n• Back-end Developers: Work on server-side operations using PHP, Python, Ruby, or \nJava. \n• Full-stack Developers: Handle both front-end and back-end development. \n• UI/UX Designers: Create user-friendly and visually appealing interfaces. \n  ', 0, 'completed', '2025-08-29 08:51:48'),
(15, 231, 2, 'Web Development Technologies \n• HTML: Defines the structure and content of web pages. \n• CSS: Styles HTML elements, controlling layout and design. \n• JavaScript: Adds interactivity and dynamic features to web pages. \n• Bootstrap: Framework for building responsive websites with pre-designed components. \n \nHTTP Methods and Status Codes \n• GET: Retrieve data from the server. \n• POST: Send data to the server. \n• PUT: Update existing data. \n• DELETE: Remove data from the server. \nCommon Status Codes \n• 200 OK: Request was successful. \n• 404 Not Found: Requested resource was not found. \n• 500 Internal Server Error: The server encountered an error. \n• 403 Forbidden: The server refuses to authorize the request. \n \nWeb Development Life Cycle (WDLC) \n1. Project Planning and Requirements Gathering \no Define project goals, identify the audience, determine scope and timeline. \n2. Web Design and User Experience \no Create wireframes and mockups, design visual elements, ensure responsiveness. \n3. Web Development Process \no Implement features, test for functionality, optimize performance. \n  ', 0, 'completed', '2025-08-29 08:51:48'),
(16, 232, 1, 'BASIC LINUX COMMANDS \n \n1. pwd - Print Working Directory \n- Description: Displays the current directory \npath. \n \n2. cd - Change Directory \n- Description: Moves to a specified directory. \n- Usage: `cd [directory_name]` \n \n3. ls - List Directory Contents \n- Description: Lists files and directories in the \ncurrent directory. \n     - Options: \n       - `-l`: Long listing format \n       - `-a`: Include hidden files \n       - `-h`: Human-readable file sizes \n \n4. mkdir - Make Directory \n- Description: Creates a new directory. \n- Usage: `mkdir [directory_name]` \n  \n5. rmdir- Remove Directory \n- Description: Deletes an empty directory. \n- Usage: `rmdir [directory_name]` \n  \n6. touch - Create Empty File \n- Description: Creates a new empty file. \n- Usage: `touch [file_name]` \n  \n7. cp- Copy \n- Description: Copies files or directories. \n- Usage: `cp [source] [destination]` \n- Options: \n       - `-r`: Recursive (for directories) \n \n8. mv - Move \n   - Description: Moves or renames files or \ndirectories. \n     - Usage: `mv [source] [destination]` \n  \n9. rm - Remove \n   - Description: Deletes files or directories. \n     - Usage: `rm [file_or_directory]` \n     - Options: \n       - `-r`: Recursive (for directories) \n       - `-f`: Force (no prompt) \n \n10. cat - Concatenate and Display File \n- Description: Displays content of a file or \nconcatenates multiple files. \n- Usage: `cat [file_name]` \n  \n \n \n \n \n  ', 0, 'completed', '2025-08-29 09:12:44'),
(17, 232, 2, ' \n11. head - Display First Lines of a File \n    - Description: Displays the first few lines of a \nfile. \n      - Usage: `head [file_name]` \n  \n12. tail - Display Last Lines of a File \n    - Description: Displays the last few lines of a \nfile. \n- Usage: `tail [file_name]` \n- Options: \n- `-f`: Follow (updates as file changes) \n \n13. grep - Search Text \n- Description: Searches for a pattern in files. \n- Usage: `grep [pattern] [file_name]` \n- Options: \n        - `-i`: Ignore case \n        - `-r`: Recursive search \n \n14. chmod - Change File Permissions \n- Description: Changes the permissions of a file \nor directory. \n- Usage: `chmod [permissions] \n[file_or_directory]` \n- Example: `chmod +x script.sh` (adds execute \npermission) \n \n \n \n \n15. chown - Change Ownership \n- Description: Changes the owner of a file or \ndirectory. \n- Usage: `chown [new_owner] \n[file_or_directory]` \n  \n16. tar - Tape Archive \n- Description: Creates or extracts tar archives. \n- Usage: `tar -cvf archive.tar [files]` (create) \n- Usage: `tar -xvf archive.tar` (extract) \n17. wget - Download Files from the Web \n- Description: Downloads files from a specified \nURL. \n- Usage: `wget [URL]` \n \n18. man - Manual Pages \n- Description: Displays the manual pages for \ncommands. \n- Usage: `man [command_name]`  ', 0, 'completed', '2025-08-29 09:12:44'),
(48, 246, 1, 'Introduction to the Web \nDevelopment Life Cycle ', 0, 'completed', '2025-08-29 11:31:07'),
(49, 246, 2, 'Topic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process ', 0, 'completed', '2025-08-29 11:31:07'),
(50, 246, 3, '•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering. ', 0, 'completed', '2025-08-29 11:31:07'),
(51, 246, 4, '•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline. ', 0, 'completed', '2025-08-29 11:31:07'),
(52, 246, 5, '•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines. ', 0, 'completed', '2025-08-29 11:31:07'),
(53, 246, 6, '•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs. ', 0, 'completed', '2025-08-29 11:31:07'),
(54, 246, 7, '•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups. ', 0, 'completed', '2025-08-29 11:31:07'),
(55, 246, 8, '•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate. ', 0, 'completed', '2025-08-29 11:31:07'),
(56, 246, 9, '1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite ', 0, 'completed', '2025-08-29 11:31:07'),
(57, 246, 10, '•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas. ', 0, 'completed', '2025-08-29 11:31:07'),
(58, 246, 11, 'wireframe ', 0, 'completed', '2025-08-29 11:31:07'),
(59, 246, 12, '•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look. ', 0, 'completed', '2025-08-29 11:31:07'),
(60, 246, 14, '2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices. ', 0, 'completed', '2025-08-29 11:31:07'),
(61, 246, 15, '•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements. ', 0, 'completed', '2025-08-29 11:31:07'),
(62, 246, 16, '•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience ', 0, 'completed', '2025-08-29 11:31:07'),
(63, 249, 1, 'Reviewer 1: (INTRODUCTION TO SIA) \n \nSystem Overview: \nDefinition:  \nA system is a set of interconnected components working together to achieve a common goal. \nImportance:  \nCrucial for understanding integration and architecture in IT systems. \n \nSystem Characteristics:( I. D. P. O) \n• Interconnected Components: Components depend on each other. \n• Defined Boundaries: Clear separation from the environment. \n• Purpose: Specific goal or objective. \n• Inputs & Outputs: Systems take inputs, process them, and generate outputs. \n \nTypes of Systems:(P. A. O. C) \n• Physical Systems: Hardware, networking infrastructure. \n• Abstract Systems: Software applications, data models. \n• Open Systems: Interacts with external environments (e.g., web services). \n• Closed Systems: Isolated from external influences (e.g., standalone applications). \n \nIT Systems:(C. I. E) \n• Computer Systems: Hardware, software, and networks. \n• Information Systems: Manages and processes data. \n• Embedded Systems: Systems within other devices (e.g., IoT). \n \nTypes of Integration:(V. H. S. C) \n1. Vertical Integration: Connects different levels of IT architecture within an organization. \nExample: Automotive industry (from raw material to retail). \n2. Horizontal Integration: Links systems operating at the same level. \nExample: ERP system integration across different departments. \n3. Star Integration: Uses a central hub to integrate systems. \nExample: CRM as a central hub for multiple systems. \n4. Common Data Format (CDF): Standardizes data exchange between systems. \nExample: Healthcare systems using HL7 standards. \n \nBenefits of System Integration: (E. I. R.) \n• Enhances efficiency. \n• Improves communication and data sharing. \n• Reduces redundancy. \nChallenges:(C. L. S. C. H. M.) \n• Compatibility issues. \n•  Lack of Standardization \n• Security risks. \n• Cultural and Organizational Differences \n• High Costs and Resource Allocation \n•  Maintenance and Scalability Issues  ', 0, 'completed', '2025-08-29 12:06:47'),
(64, 249, 2, ' \nMultiple Choice: \n \n1. Which of the following best defines a system? \na. A collection of hardware components \nb.  A set of interconnected components working to achieve a goal \nc. A group of isolated processes \nd. An independent unit that functions alone \n2. What is the main purpose of system integration?  \na. To create isolated systems \nb. To improve communication and efficiency between different systems \nc. To decrease the number of components \nd. To increase redundancy in data processing \n3. What type of system interacts with external environments?  \na. Closed system \nb. Abstract system \nc. Open system \nd. Physical system \n4. Which type of integration uses a central hub to connect systems? \na. Vertical integration \nb. Horizontal integration \nc. Star integration \nd. Common Data Format (CDF) integration \n5. Which IT system primarily manages and processes data?  \na. Computer system \nb. Information system \nc. Embedded system \nd. Data network \n \nIdentification: \n1. A system that does not interact with external environments is called a ____________. \n2. The type of system integration that consolidates systems at the same level of IT architecture is called \n____________. \n3. ____________ refers to the communication pathways that connect system components. \n4. The method of standardizing data exchange between systems using universal data formats is called \n____________. \n5. A ____________ system is embedded within other devices and specializes in specific functions. \n \nModified True or False: \n1. True or False: Vertical integration links systems operating at the same level of the IT architecture. \n• If false, modify: Vertical integration links systems at different levels of IT architecture. \n2. True or False: A physical system includes software applications and data models. \n• If false, modify: A physical system includes hardware and networking infrastructure. \n3. True or False: Common Data Format (CDF) integration helps in improving data consistency across systems. \n• If false, modify: CDF integration standardizes data for interoperability and data consistency. \n4. True or False: Embedded systems are designed to manage and process large amounts of data.  ', 0, 'completed', '2025-08-29 12:06:47'),
(65, 249, 3, '• If false, modify: Embedded systems are specialized systems within devices. \n5. True or False: Open systems are isolated from external influences. \n• If false, modify: Closed systems are isolated from external influences. \n \n \nEnumeration: \n \n1. Enumerate the characteristics of a system (4 items): \n• Interconnected Components \n• Defined Boundaries \n• Purpose (Objective) \n• Inputs and Outputs \n \n2. List the types of IT systems (3 items): \n• Computer Systems \n• Information Systems \n• Embedded Systems \n \n3. Enumerate the challenges in system integration (6 items): \n• Compatibility issues \n• Lack of standardization \n• Security risks \n• Cultural and organizational differences \n• High costs and resource allocation \n• Maintenance and scalability issues \n \n4. List the benefits of system integration (3 items): \n• Enhanced operational efficiency \n• Improved communication and data sharing \n• Reduced redundancy and increased performance \n \n5. Enumerate the components of an IT system (4 items): \n• Hardware \n• Software \n• Data \n• Network \n \n  ', 0, 'completed', '2025-08-29 12:06:47'),
(66, 250, 1, 'Reviewer 1: (INTRODUCTION TO SIA) \n \nSystem Overview: \nDefinition:  \nA system is a set of interconnected components working together to achieve a common goal. \nImportance:  \nCrucial for understanding integration and architecture in IT systems. \n \nSystem Characteristics:( I. D. P. O) \n• Interconnected Components: Components depend on each other. \n• Defined Boundaries: Clear separation from the environment. \n• Purpose: Specific goal or objective. \n• Inputs & Outputs: Systems take inputs, process them, and generate outputs. \n \nTypes of Systems:(P. A. O. C) \n• Physical Systems: Hardware, networking infrastructure. \n• Abstract Systems: Software applications, data models. \n• Open Systems: Interacts with external environments (e.g., web services). \n• Closed Systems: Isolated from external influences (e.g., standalone applications). \n \nIT Systems:(C. I. E) \n• Computer Systems: Hardware, software, and networks. \n• Information Systems: Manages and processes data. \n• Embedded Systems: Systems within other devices (e.g., IoT). \n \nTypes of Integration:(V. H. S. C) \n1. Vertical Integration: Connects different levels of IT architecture within an organization. \nExample: Automotive industry (from raw material to retail). \n2. Horizontal Integration: Links systems operating at the same level. \nExample: ERP system integration across different departments. \n3. Star Integration: Uses a central hub to integrate systems. \nExample: CRM as a central hub for multiple systems. \n4. Common Data Format (CDF): Standardizes data exchange between systems. \nExample: Healthcare systems using HL7 standards. \n \nBenefits of System Integration: (E. I. R.) \n• Enhances efficiency. \n• Improves communication and data sharing. \n• Reduces redundancy. \nChallenges:(C. L. S. C. H. M.) \n• Compatibility issues. \n•  Lack of Standardization \n• Security risks. \n• Cultural and Organizational Differences \n• High Costs and Resource Allocation \n•  Maintenance and Scalability Issues  ', 0, 'completed', '2025-08-29 12:08:21'),
(67, 250, 2, ' \nMultiple Choice: \n \n1. Which of the following best defines a system? \na. A collection of hardware components \nb.  A set of interconnected components working to achieve a goal \nc. A group of isolated processes \nd. An independent unit that functions alone \n2. What is the main purpose of system integration?  \na. To create isolated systems \nb. To improve communication and efficiency between different systems \nc. To decrease the number of components \nd. To increase redundancy in data processing \n3. What type of system interacts with external environments?  \na. Closed system \nb. Abstract system \nc. Open system \nd. Physical system \n4. Which type of integration uses a central hub to connect systems? \na. Vertical integration \nb. Horizontal integration \nc. Star integration \nd. Common Data Format (CDF) integration \n5. Which IT system primarily manages and processes data?  \na. Computer system \nb. Information system \nc. Embedded system \nd. Data network \n \nIdentification: \n1. A system that does not interact with external environments is called a ____________. \n2. The type of system integration that consolidates systems at the same level of IT architecture is called \n____________. \n3. ____________ refers to the communication pathways that connect system components. \n4. The method of standardizing data exchange between systems using universal data formats is called \n____________. \n5. A ____________ system is embedded within other devices and specializes in specific functions. \n \nModified True or False: \n1. True or False: Vertical integration links systems operating at the same level of the IT architecture. \n• If false, modify: Vertical integration links systems at different levels of IT architecture. \n2. True or False: A physical system includes software applications and data models. \n• If false, modify: A physical system includes hardware and networking infrastructure. \n3. True or False: Common Data Format (CDF) integration helps in improving data consistency across systems. \n• If false, modify: CDF integration standardizes data for interoperability and data consistency. \n4. True or False: Embedded systems are designed to manage and process large amounts of data.  ', 0, 'completed', '2025-08-29 12:08:21'),
(68, 250, 3, '• If false, modify: Embedded systems are specialized systems within devices. \n5. True or False: Open systems are isolated from external influences. \n• If false, modify: Closed systems are isolated from external influences. \n \n \nEnumeration: \n \n1. Enumerate the characteristics of a system (4 items): \n• Interconnected Components \n• Defined Boundaries \n• Purpose (Objective) \n• Inputs and Outputs \n \n2. List the types of IT systems (3 items): \n• Computer Systems \n• Information Systems \n• Embedded Systems \n \n3. Enumerate the challenges in system integration (6 items): \n• Compatibility issues \n• Lack of standardization \n• Security risks \n• Cultural and organizational differences \n• High costs and resource allocation \n• Maintenance and scalability issues \n \n4. List the benefits of system integration (3 items): \n• Enhanced operational efficiency \n• Improved communication and data sharing \n• Reduced redundancy and increased performance \n \n5. Enumerate the components of an IT system (4 items): \n• Hardware \n• Software \n• Data \n• Network \n \n  ', 0, 'completed', '2025-08-29 12:08:21'),
(69, 251, 1, 'Unit I\nIntroduction to Web Systems ', 0, 'completed', '2025-08-29 12:09:33'),
(70, 251, 2, 'Topic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers  ', 0, 'completed', '2025-08-29 12:09:33'),
(71, 251, 3, '•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web ', 0, 'completed', '2025-08-29 12:09:33'),
(72, 251, 4, '1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web ', 0, 'completed', '2025-08-29 12:09:33'),
(73, 251, 5, 'Early\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP). ', 0, 'completed', '2025-08-29 12:09:33'),
(74, 251, 6, 'Late 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web. ', 0, 'completed', '2025-08-29 12:09:33'),
(75, 251, 7, 'Internet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork. ', 0, 'completed', '2025-08-29 12:09:33'),
(76, 251, 8, 'This is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols ', 0, 'completed', '2025-08-29 12:09:33'),
(77, 251, 9, 'A system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols ', 0, 'completed', '2025-08-29 12:09:33'),
(78, 251, 10, 'Web architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client. ', 0, 'completed', '2025-08-29 12:09:33'),
(79, 251, 11, 'Web Browsers and \nWeb Servers ', 0, 'completed', '2025-08-29 12:09:33'),
(80, 251, 12, 'Web browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge ', 0, 'completed', '2025-08-29 12:09:33'),
(81, 251, 13, 'Web servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache ', 0, 'completed', '2025-08-29 12:09:33'),
(82, 251, 14, 'Key components of \na web server ', 0, 'completed', '2025-08-29 12:09:33'),
(83, 251, 15, 'Web server software\nThe software that handles \nincoming requests and sends out \nresponses ', 0, 'completed', '2025-08-29 12:09:33'),
(84, 251, 16, 'Web content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages. ', 0, 'completed', '2025-08-29 12:09:33'),
(85, 251, 17, 'Database (optional)\nA database may be used to store \nand retrieve dynamic content. ', 0, 'completed', '2025-08-29 12:09:33'),
(86, 251, 18, 'Activity\nWeb History Timeline ', 0, 'completed', '2025-08-29 12:09:33'),
(87, 251, 19, 'Assign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s). ', 0, 'completed', '2025-08-29 12:09:33'),
(88, 251, 20, 'Research\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included. ', 0, 'completed', '2025-08-29 12:09:33'),
(89, 251, 21, 'Web \nDevelopment ', 0, 'completed', '2025-08-29 12:09:33'),
(90, 251, 22, 'Topic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies ', 0, 'completed', '2025-08-29 12:09:33'),
(91, 251, 23, '•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers ', 0, 'completed', '2025-08-29 12:09:33'),
(92, 251, 24, '•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript ', 0, 'completed', '2025-08-29 12:09:33'),
(93, 251, 25, '•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java. ', 0, 'completed', '2025-08-29 12:09:33'),
(94, 251, 26, 'Full-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite. ', 0, 'completed', '2025-08-29 12:09:33'),
(95, 251, 27, 'UI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs. ', 0, 'completed', '2025-08-29 12:09:33'),
(96, 251, 28, 'UX designer\nuser experience  ', 0, 'completed', '2025-08-29 12:09:33'),
(97, 251, 29, 'Creates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography. ', 0, 'completed', '2025-08-29 12:09:33'),
(98, 251, 30, '•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.  ', 0, 'completed', '2025-08-29 12:09:33'),
(99, 251, 31, '•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service ', 0, 'completed', '2025-08-29 12:09:33'),
(100, 251, 32, 'Web development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies ', 0, 'completed', '2025-08-29 12:09:33'),
(101, 251, 33, '•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page. ', 0, 'completed', '2025-08-29 12:09:33'),
(102, 251, 34, 'Used to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting. ', 0, 'completed', '2025-08-29 12:09:33'),
(103, 251, 35, 'A programming language that adds \ninteractivity and dynamic features to \nweb pages. ', 0, 'completed', '2025-08-29 12:09:33'),
(104, 251, 36, 'A popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites. ', 0, 'completed', '2025-08-29 12:09:33'),
(105, 251, 37, 'Activity\nWebsite/Web \nApplication Critique ', 0, 'completed', '2025-08-29 12:09:33'),
(106, 251, 38, 'Instructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website. ', 0, 'completed', '2025-08-29 12:09:33'),
(107, 251, 39, '2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience? ', 0, 'completed', '2025-08-29 12:09:33'),
(108, 251, 40, '4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens? ', 0, 'completed', '2025-08-29 12:09:33'),
(109, 251, 41, 'Step 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website. ', 0, 'completed', '2025-08-29 12:09:33'),
(110, 251, 42, 'Introduction to the Web \nDevelopment Life Cycle ', 0, 'completed', '2025-08-29 12:09:33'),
(111, 251, 43, 'Topic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process ', 0, 'completed', '2025-08-29 12:09:33'),
(112, 251, 44, '•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering. ', 0, 'completed', '2025-08-29 12:09:33'),
(113, 251, 45, '•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline. ', 0, 'completed', '2025-08-29 12:09:33'),
(114, 251, 46, '•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines. ', 0, 'completed', '2025-08-29 12:09:33'),
(115, 251, 47, '•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs. ', 0, 'completed', '2025-08-29 12:09:33'),
(116, 251, 48, '•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups. ', 0, 'completed', '2025-08-29 12:09:33'),
(117, 251, 49, '•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate. ', 0, 'completed', '2025-08-29 12:09:33'),
(118, 251, 50, '1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite ', 0, 'completed', '2025-08-29 12:09:33'),
(119, 251, 51, '•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas. ', 0, 'completed', '2025-08-29 12:09:33'),
(120, 251, 52, 'wireframe ', 0, 'completed', '2025-08-29 12:09:33'),
(121, 251, 53, '•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look. ', 0, 'completed', '2025-08-29 12:09:33'),
(122, 251, 55, '2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices. ', 0, 'completed', '2025-08-29 12:09:33'),
(123, 251, 56, '•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements. ', 0, 'completed', '2025-08-29 12:09:33'),
(124, 251, 57, '•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience ', 0, 'completed', '2025-08-29 12:09:33'),
(125, 251, 58, 'COMMON \nMETHODS INCLUDE ', 0, 'completed', '2025-08-29 12:09:33'),
(126, 251, 59, 'COMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE ', 0, 'completed', '2025-08-29 12:09:33'),
(127, 251, 60, 'GET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput ', 0, 'completed', '2025-08-29 12:09:33'),
(128, 251, 61, 'POST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput ', 0, 'completed', '2025-08-29 12:09:33'),
(129, 251, 62, 'PUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation ', 0, 'completed', '2025-08-29 12:09:33'),
(130, 251, 63, 'DELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account ', 0, 'completed', '2025-08-29 12:09:33'),
(131, 251, 64, 'STATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST ', 0, 'completed', '2025-08-29 12:09:33'),
(132, 251, 65, 'EXAMPLE STATUS OF CODE ', 0, 'completed', '2025-08-29 12:09:33'),
(133, 251, 66, '200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully ', 0, 'completed', '2025-08-29 12:09:33'),
(134, 251, 67, '404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource ', 0, 'completed', '2025-08-29 12:09:33'),
(135, 251, 68, '400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data ', 0, 'completed', '2025-08-29 12:09:33'),
(136, 251, 69, '401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in ', 0, 'completed', '2025-08-29 12:09:33'),
(137, 251, 70, '403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view ', 0, 'completed', '2025-08-29 12:09:33'),
(138, 251, 71, '500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request ', 0, 'completed', '2025-08-29 12:09:33'),
(139, 251, 72, '503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable ', 0, 'completed', '2025-08-29 12:09:33'),
(140, 251, 73, '302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL ', 0, 'completed', '2025-08-29 12:09:33'),
(141, 251, 74, '301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent ', 0, 'completed', '2025-08-29 12:09:33'),
(142, 251, 75, '204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update ', 0, 'completed', '2025-08-29 12:09:33'),
(143, 252, 1, 'Unit I\nIntroduction to Web Systems ', 0, 'completed', '2025-08-29 12:59:22'),
(144, 252, 2, 'Topic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers  ', 0, 'completed', '2025-08-29 12:59:22'),
(145, 252, 3, '•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web ', 0, 'completed', '2025-08-29 12:59:22'),
(146, 252, 4, '1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web ', 0, 'completed', '2025-08-29 12:59:22'),
(147, 252, 5, 'Early\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP). ', 0, 'completed', '2025-08-29 12:59:22'),
(148, 252, 6, 'Late 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web. ', 0, 'completed', '2025-08-29 12:59:22'),
(149, 252, 7, 'Internet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork. ', 0, 'completed', '2025-08-29 12:59:22'),
(150, 252, 8, 'This is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols ', 0, 'completed', '2025-08-29 12:59:22'),
(151, 252, 9, 'A system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols ', 0, 'completed', '2025-08-29 12:59:22'),
(152, 252, 10, 'Web architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client. ', 0, 'completed', '2025-08-29 12:59:22'),
(153, 252, 11, 'Web Browsers and \nWeb Servers ', 0, 'completed', '2025-08-29 12:59:22'),
(154, 252, 12, 'Web browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge ', 0, 'completed', '2025-08-29 12:59:22'),
(155, 252, 13, 'Web servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache ', 0, 'completed', '2025-08-29 12:59:22'),
(156, 252, 14, 'Key components of \na web server ', 0, 'completed', '2025-08-29 12:59:22'),
(157, 252, 15, 'Web server software\nThe software that handles \nincoming requests and sends out \nresponses ', 0, 'completed', '2025-08-29 12:59:22'),
(158, 252, 16, 'Web content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages. ', 0, 'completed', '2025-08-29 12:59:22'),
(159, 252, 17, 'Database (optional)\nA database may be used to store \nand retrieve dynamic content. ', 0, 'completed', '2025-08-29 12:59:22'),
(160, 252, 18, 'Activity\nWeb History Timeline ', 0, 'completed', '2025-08-29 12:59:22'),
(161, 252, 19, 'Assign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s). ', 0, 'completed', '2025-08-29 12:59:22'),
(162, 252, 20, 'Research\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included. ', 0, 'completed', '2025-08-29 12:59:22'),
(163, 252, 21, 'Web \nDevelopment ', 0, 'completed', '2025-08-29 12:59:22'),
(164, 252, 22, 'Topic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies ', 0, 'completed', '2025-08-29 12:59:22'),
(165, 252, 23, '•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers ', 0, 'completed', '2025-08-29 12:59:22'),
(166, 252, 24, '•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript ', 0, 'completed', '2025-08-29 12:59:22'),
(167, 252, 25, '•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java. ', 0, 'completed', '2025-08-29 12:59:22'),
(168, 252, 26, 'Full-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite. ', 0, 'completed', '2025-08-29 12:59:22'),
(169, 252, 27, 'UI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs. ', 0, 'completed', '2025-08-29 12:59:22'),
(170, 252, 28, 'UX designer\nuser experience  ', 0, 'completed', '2025-08-29 12:59:22'),
(171, 252, 29, 'Creates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography. ', 0, 'completed', '2025-08-29 12:59:22'),
(172, 252, 30, '•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.  ', 0, 'completed', '2025-08-29 12:59:22'),
(173, 252, 31, '•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service ', 0, 'completed', '2025-08-29 12:59:22'),
(174, 252, 32, 'Web development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies ', 0, 'completed', '2025-08-29 12:59:22'),
(175, 252, 33, '•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page. ', 0, 'completed', '2025-08-29 12:59:22'),
(176, 252, 34, 'Used to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting. ', 0, 'completed', '2025-08-29 12:59:22'),
(177, 252, 35, 'A programming language that adds \ninteractivity and dynamic features to \nweb pages. ', 0, 'completed', '2025-08-29 12:59:22'),
(178, 252, 36, 'A popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites. ', 0, 'completed', '2025-08-29 12:59:22'),
(179, 252, 37, 'Activity\nWebsite/Web \nApplication Critique ', 0, 'completed', '2025-08-29 12:59:22'),
(180, 252, 38, 'Instructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website. ', 0, 'completed', '2025-08-29 12:59:22'),
(181, 252, 39, '2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience? ', 0, 'completed', '2025-08-29 12:59:22'),
(182, 252, 40, '4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens? ', 0, 'completed', '2025-08-29 12:59:22'),
(183, 252, 41, 'Step 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website. ', 0, 'completed', '2025-08-29 12:59:22'),
(184, 252, 42, 'Introduction to the Web \nDevelopment Life Cycle ', 0, 'completed', '2025-08-29 12:59:22'),
(185, 252, 43, 'Topic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process ', 0, 'completed', '2025-08-29 12:59:22'),
(186, 252, 44, '•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering. ', 0, 'completed', '2025-08-29 12:59:22'),
(187, 252, 45, '•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline. ', 0, 'completed', '2025-08-29 12:59:22'),
(188, 252, 46, '•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines. ', 0, 'completed', '2025-08-29 12:59:22'),
(189, 252, 47, '•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs. ', 0, 'completed', '2025-08-29 12:59:22'),
(190, 252, 48, '•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups. ', 0, 'completed', '2025-08-29 12:59:22'),
(191, 252, 49, '•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate. ', 0, 'completed', '2025-08-29 12:59:22'),
(192, 252, 50, '1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite ', 0, 'completed', '2025-08-29 12:59:22'),
(193, 252, 51, '•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas. ', 0, 'completed', '2025-08-29 12:59:22'),
(194, 252, 52, 'wireframe ', 0, 'completed', '2025-08-29 12:59:22'),
(195, 252, 53, '•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look. ', 0, 'completed', '2025-08-29 12:59:22'),
(196, 252, 55, '2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices. ', 0, 'completed', '2025-08-29 12:59:22'),
(197, 252, 56, '•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements. ', 0, 'completed', '2025-08-29 12:59:22'),
(198, 252, 57, '•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience ', 0, 'completed', '2025-08-29 12:59:22'),
(199, 252, 58, 'COMMON \nMETHODS INCLUDE ', 0, 'completed', '2025-08-29 12:59:22'),
(200, 252, 59, 'COMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE ', 0, 'completed', '2025-08-29 12:59:22'),
(201, 252, 60, 'GET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput ', 0, 'completed', '2025-08-29 12:59:22'),
(202, 252, 61, 'POST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput ', 0, 'completed', '2025-08-29 12:59:22');
INSERT INTO `file_pages` (`page_id`, `file_id`, `page_number`, `extracted_text`, `ocr_attempts`, `page_status`, `extraction_date`) VALUES
(203, 252, 62, 'PUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation ', 0, 'completed', '2025-08-29 12:59:22'),
(204, 252, 63, 'DELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account ', 0, 'completed', '2025-08-29 12:59:22'),
(205, 252, 64, 'STATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST ', 0, 'completed', '2025-08-29 12:59:22'),
(206, 252, 65, 'EXAMPLE STATUS OF CODE ', 0, 'completed', '2025-08-29 12:59:22'),
(207, 252, 66, '200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully ', 0, 'completed', '2025-08-29 12:59:22'),
(208, 252, 67, '404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource ', 0, 'completed', '2025-08-29 12:59:22'),
(209, 252, 68, '400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data ', 0, 'completed', '2025-08-29 12:59:22'),
(210, 252, 69, '401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in ', 0, 'completed', '2025-08-29 12:59:22'),
(211, 252, 70, '403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view ', 0, 'completed', '2025-08-29 12:59:22'),
(212, 252, 71, '500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request ', 0, 'completed', '2025-08-29 12:59:22'),
(213, 252, 72, '503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable ', 0, 'completed', '2025-08-29 12:59:22'),
(214, 252, 73, '302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL ', 0, 'completed', '2025-08-29 12:59:22'),
(215, 252, 74, '301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent ', 0, 'completed', '2025-08-29 12:59:22'),
(216, 252, 75, '204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update ', 0, 'completed', '2025-08-29 12:59:22'),
(217, 253, 1, 'Unit I\nIntroduction to Web Systems ', 0, 'completed', '2025-08-29 13:31:16'),
(218, 253, 2, 'Topic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers  ', 0, 'completed', '2025-08-29 13:31:16'),
(219, 253, 3, '•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web ', 0, 'completed', '2025-08-29 13:31:16'),
(220, 253, 4, '1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web ', 0, 'completed', '2025-08-29 13:31:16'),
(221, 253, 5, 'Early\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP). ', 0, 'completed', '2025-08-29 13:31:16'),
(222, 253, 6, 'Late 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web. ', 0, 'completed', '2025-08-29 13:31:16'),
(223, 253, 7, 'Internet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork. ', 0, 'completed', '2025-08-29 13:31:16'),
(224, 253, 8, 'This is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols ', 0, 'completed', '2025-08-29 13:31:16'),
(225, 253, 9, 'A system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols ', 0, 'completed', '2025-08-29 13:31:16'),
(226, 253, 10, 'Web architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client. ', 0, 'completed', '2025-08-29 13:31:16'),
(227, 253, 11, 'Web Browsers and \nWeb Servers ', 0, 'completed', '2025-08-29 13:31:16'),
(228, 253, 12, 'Web browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge ', 0, 'completed', '2025-08-29 13:31:16'),
(229, 253, 13, 'Web servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache ', 0, 'completed', '2025-08-29 13:31:16'),
(230, 253, 14, 'Key components of \na web server ', 0, 'completed', '2025-08-29 13:31:16'),
(231, 253, 15, 'Web server software\nThe software that handles \nincoming requests and sends out \nresponses ', 0, 'completed', '2025-08-29 13:31:16'),
(232, 253, 16, 'Web content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages. ', 0, 'completed', '2025-08-29 13:31:16'),
(233, 253, 17, 'Database (optional)\nA database may be used to store \nand retrieve dynamic content. ', 0, 'completed', '2025-08-29 13:31:16'),
(234, 253, 18, 'Activity\nWeb History Timeline ', 0, 'completed', '2025-08-29 13:31:16'),
(235, 253, 19, 'Assign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s). ', 0, 'completed', '2025-08-29 13:31:16'),
(236, 253, 20, 'Research\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included. ', 0, 'completed', '2025-08-29 13:31:16'),
(237, 253, 21, 'Web \nDevelopment ', 0, 'completed', '2025-08-29 13:31:16'),
(238, 253, 22, 'Topic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies ', 0, 'completed', '2025-08-29 13:31:16'),
(239, 253, 23, '•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers ', 0, 'completed', '2025-08-29 13:31:16'),
(240, 253, 24, '•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript ', 0, 'completed', '2025-08-29 13:31:16'),
(241, 253, 25, '•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java. ', 0, 'completed', '2025-08-29 13:31:16'),
(242, 253, 26, 'Full-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite. ', 0, 'completed', '2025-08-29 13:31:16'),
(243, 253, 27, 'UI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs. ', 0, 'completed', '2025-08-29 13:31:16'),
(244, 253, 28, 'UX designer\nuser experience  ', 0, 'completed', '2025-08-29 13:31:16'),
(245, 253, 29, 'Creates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography. ', 0, 'completed', '2025-08-29 13:31:16'),
(246, 253, 30, '•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.  ', 0, 'completed', '2025-08-29 13:31:16'),
(247, 253, 31, '•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service ', 0, 'completed', '2025-08-29 13:31:16'),
(248, 253, 32, 'Web development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies ', 0, 'completed', '2025-08-29 13:31:16'),
(249, 253, 33, '•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page. ', 0, 'completed', '2025-08-29 13:31:16'),
(250, 253, 34, 'Used to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting. ', 0, 'completed', '2025-08-29 13:31:16'),
(251, 253, 35, 'A programming language that adds \ninteractivity and dynamic features to \nweb pages. ', 0, 'completed', '2025-08-29 13:31:16'),
(252, 253, 36, 'A popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites. ', 0, 'completed', '2025-08-29 13:31:16'),
(253, 253, 37, 'Activity\nWebsite/Web \nApplication Critique ', 0, 'completed', '2025-08-29 13:31:16'),
(254, 253, 38, 'Instructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website. ', 0, 'completed', '2025-08-29 13:31:16'),
(255, 253, 39, '2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience? ', 0, 'completed', '2025-08-29 13:31:16'),
(256, 253, 40, '4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens? ', 0, 'completed', '2025-08-29 13:31:16'),
(257, 253, 41, 'Step 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website. ', 0, 'completed', '2025-08-29 13:31:16'),
(258, 253, 42, 'Introduction to the Web \nDevelopment Life Cycle ', 0, 'completed', '2025-08-29 13:31:16'),
(259, 253, 43, 'Topic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process ', 0, 'completed', '2025-08-29 13:31:16'),
(260, 253, 44, '•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering. ', 0, 'completed', '2025-08-29 13:31:16'),
(261, 253, 45, '•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline. ', 0, 'completed', '2025-08-29 13:31:16'),
(262, 253, 46, '•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines. ', 0, 'completed', '2025-08-29 13:31:16'),
(263, 253, 47, '•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs. ', 0, 'completed', '2025-08-29 13:31:16'),
(264, 253, 48, '•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups. ', 0, 'completed', '2025-08-29 13:31:16'),
(265, 253, 49, '•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate. ', 0, 'completed', '2025-08-29 13:31:16'),
(266, 253, 50, '1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite ', 0, 'completed', '2025-08-29 13:31:16'),
(267, 253, 51, '•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas. ', 0, 'completed', '2025-08-29 13:31:16'),
(268, 253, 52, 'wireframe ', 0, 'completed', '2025-08-29 13:31:16'),
(269, 253, 53, '•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look. ', 0, 'completed', '2025-08-29 13:31:16'),
(270, 253, 55, '2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices. ', 0, 'completed', '2025-08-29 13:31:16'),
(271, 253, 56, '•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements. ', 0, 'completed', '2025-08-29 13:31:16'),
(272, 253, 57, '•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience ', 0, 'completed', '2025-08-29 13:31:16'),
(273, 253, 58, 'COMMON \nMETHODS INCLUDE ', 0, 'completed', '2025-08-29 13:31:16'),
(274, 253, 59, 'COMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE ', 0, 'completed', '2025-08-29 13:31:16'),
(275, 253, 60, 'GET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput ', 0, 'completed', '2025-08-29 13:31:16'),
(276, 253, 61, 'POST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput ', 0, 'completed', '2025-08-29 13:31:16'),
(277, 253, 62, 'PUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation ', 0, 'completed', '2025-08-29 13:31:16'),
(278, 253, 63, 'DELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account ', 0, 'completed', '2025-08-29 13:31:16'),
(279, 253, 64, 'STATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST ', 0, 'completed', '2025-08-29 13:31:16'),
(280, 253, 65, 'EXAMPLE STATUS OF CODE ', 0, 'completed', '2025-08-29 13:31:16'),
(281, 253, 66, '200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully ', 0, 'completed', '2025-08-29 13:31:16'),
(282, 253, 67, '404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource ', 0, 'completed', '2025-08-29 13:31:16'),
(283, 253, 68, '400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data ', 0, 'completed', '2025-08-29 13:31:16'),
(284, 253, 69, '401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in ', 0, 'completed', '2025-08-29 13:31:16'),
(285, 253, 70, '403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view ', 0, 'completed', '2025-08-29 13:31:16'),
(286, 253, 71, '500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request ', 0, 'completed', '2025-08-29 13:31:16'),
(287, 253, 72, '503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable ', 0, 'completed', '2025-08-29 13:31:16'),
(288, 253, 73, '302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL ', 0, 'completed', '2025-08-29 13:31:16'),
(289, 253, 74, '301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent ', 0, 'completed', '2025-08-29 13:31:16'),
(290, 253, 75, '204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update ', 0, 'completed', '2025-08-29 13:31:16'),
(291, 254, 1, 'Unit I\nIntroduction to Web Systems ', 0, 'completed', '2025-08-29 13:36:20'),
(292, 254, 2, 'Topic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers  ', 0, 'completed', '2025-08-29 13:36:20'),
(293, 254, 3, '•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web ', 0, 'completed', '2025-08-29 13:36:20'),
(294, 254, 4, '1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web ', 0, 'completed', '2025-08-29 13:36:20'),
(295, 254, 5, 'Early\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP). ', 0, 'completed', '2025-08-29 13:36:20'),
(296, 254, 6, 'Late 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web. ', 0, 'completed', '2025-08-29 13:36:20'),
(297, 254, 7, 'Internet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork. ', 0, 'completed', '2025-08-29 13:36:20'),
(298, 254, 8, 'This is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols ', 0, 'completed', '2025-08-29 13:36:20'),
(299, 254, 9, 'A system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols ', 0, 'completed', '2025-08-29 13:36:20'),
(300, 254, 10, 'Web architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client. ', 0, 'completed', '2025-08-29 13:36:20'),
(301, 254, 11, 'Web Browsers and \nWeb Servers ', 0, 'completed', '2025-08-29 13:36:20'),
(302, 254, 12, 'Web browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge ', 0, 'completed', '2025-08-29 13:36:20'),
(303, 254, 13, 'Web servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache ', 0, 'completed', '2025-08-29 13:36:20'),
(304, 254, 14, 'Key components of \na web server ', 0, 'completed', '2025-08-29 13:36:20'),
(305, 254, 15, 'Web server software\nThe software that handles \nincoming requests and sends out \nresponses ', 0, 'completed', '2025-08-29 13:36:20'),
(306, 254, 16, 'Web content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages. ', 0, 'completed', '2025-08-29 13:36:20'),
(307, 254, 17, 'Database (optional)\nA database may be used to store \nand retrieve dynamic content. ', 0, 'completed', '2025-08-29 13:36:20'),
(308, 254, 18, 'Activity\nWeb History Timeline ', 0, 'completed', '2025-08-29 13:36:20'),
(309, 254, 19, 'Assign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s). ', 0, 'completed', '2025-08-29 13:36:20'),
(310, 254, 20, 'Research\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included. ', 0, 'completed', '2025-08-29 13:36:20'),
(311, 254, 21, 'Web \nDevelopment ', 0, 'completed', '2025-08-29 13:36:20'),
(312, 254, 22, 'Topic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies ', 0, 'completed', '2025-08-29 13:36:20'),
(313, 254, 23, '•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers ', 0, 'completed', '2025-08-29 13:36:20'),
(314, 254, 24, '•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript ', 0, 'completed', '2025-08-29 13:36:20'),
(315, 254, 25, '•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java. ', 0, 'completed', '2025-08-29 13:36:20'),
(316, 254, 26, 'Full-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite. ', 0, 'completed', '2025-08-29 13:36:20'),
(317, 254, 27, 'UI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs. ', 0, 'completed', '2025-08-29 13:36:20'),
(318, 254, 28, 'UX designer\nuser experience  ', 0, 'completed', '2025-08-29 13:36:20'),
(319, 254, 29, 'Creates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography. ', 0, 'completed', '2025-08-29 13:36:20'),
(320, 254, 30, '•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.  ', 0, 'completed', '2025-08-29 13:36:20'),
(321, 254, 31, '•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service ', 0, 'completed', '2025-08-29 13:36:20'),
(322, 254, 32, 'Web development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies ', 0, 'completed', '2025-08-29 13:36:20'),
(323, 254, 33, '•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page. ', 0, 'completed', '2025-08-29 13:36:20'),
(324, 254, 34, 'Used to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting. ', 0, 'completed', '2025-08-29 13:36:20'),
(325, 254, 35, 'A programming language that adds \ninteractivity and dynamic features to \nweb pages. ', 0, 'completed', '2025-08-29 13:36:20'),
(326, 254, 36, 'A popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites. ', 0, 'completed', '2025-08-29 13:36:20'),
(327, 254, 37, 'Activity\nWebsite/Web \nApplication Critique ', 0, 'completed', '2025-08-29 13:36:20'),
(328, 254, 38, 'Instructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website. ', 0, 'completed', '2025-08-29 13:36:20'),
(329, 254, 39, '2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience? ', 0, 'completed', '2025-08-29 13:36:20'),
(330, 254, 40, '4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens? ', 0, 'completed', '2025-08-29 13:36:20'),
(331, 254, 41, 'Step 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website. ', 0, 'completed', '2025-08-29 13:36:20'),
(332, 254, 42, 'Introduction to the Web \nDevelopment Life Cycle ', 0, 'completed', '2025-08-29 13:36:20'),
(333, 254, 43, 'Topic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process ', 0, 'completed', '2025-08-29 13:36:20'),
(334, 254, 44, '•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering. ', 0, 'completed', '2025-08-29 13:36:20'),
(335, 254, 45, '•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline. ', 0, 'completed', '2025-08-29 13:36:20'),
(336, 254, 46, '•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines. ', 0, 'completed', '2025-08-29 13:36:20'),
(337, 254, 47, '•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs. ', 0, 'completed', '2025-08-29 13:36:20'),
(338, 254, 48, '•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups. ', 0, 'completed', '2025-08-29 13:36:20'),
(339, 254, 49, '•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate. ', 0, 'completed', '2025-08-29 13:36:20'),
(340, 254, 50, '1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite ', 0, 'completed', '2025-08-29 13:36:20'),
(341, 254, 51, '•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas. ', 0, 'completed', '2025-08-29 13:36:20'),
(342, 254, 52, 'wireframe ', 0, 'completed', '2025-08-29 13:36:20'),
(343, 254, 53, '•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look. ', 0, 'completed', '2025-08-29 13:36:20'),
(344, 254, 55, '2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices. ', 0, 'completed', '2025-08-29 13:36:20'),
(345, 254, 56, '•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements. ', 0, 'completed', '2025-08-29 13:36:20'),
(346, 254, 57, '•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience ', 0, 'completed', '2025-08-29 13:36:20'),
(347, 254, 58, 'COMMON \nMETHODS INCLUDE ', 0, 'completed', '2025-08-29 13:36:20'),
(348, 254, 59, 'COMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE ', 0, 'completed', '2025-08-29 13:36:20'),
(349, 254, 60, 'GET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput ', 0, 'completed', '2025-08-29 13:36:20'),
(350, 254, 61, 'POST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput ', 0, 'completed', '2025-08-29 13:36:20'),
(351, 254, 62, 'PUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation ', 0, 'completed', '2025-08-29 13:36:20'),
(352, 254, 63, 'DELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account ', 0, 'completed', '2025-08-29 13:36:20'),
(353, 254, 64, 'STATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST ', 0, 'completed', '2025-08-29 13:36:20'),
(354, 254, 65, 'EXAMPLE STATUS OF CODE ', 0, 'completed', '2025-08-29 13:36:20'),
(355, 254, 66, '200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully ', 0, 'completed', '2025-08-29 13:36:20'),
(356, 254, 67, '404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource ', 0, 'completed', '2025-08-29 13:36:20'),
(357, 254, 68, '400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data ', 0, 'completed', '2025-08-29 13:36:20'),
(358, 254, 69, '401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in ', 0, 'completed', '2025-08-29 13:36:20'),
(359, 254, 70, '403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view ', 0, 'completed', '2025-08-29 13:36:20'),
(360, 254, 71, '500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request ', 0, 'completed', '2025-08-29 13:36:20'),
(361, 254, 72, '503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable ', 0, 'completed', '2025-08-29 13:36:20'),
(362, 254, 73, '302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL ', 0, 'completed', '2025-08-29 13:36:20'),
(363, 254, 74, '301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent ', 0, 'completed', '2025-08-29 13:36:20'),
(364, 254, 75, '204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update ', 0, 'completed', '2025-08-29 13:36:20'),
(365, 255, 1, 'Unit I\nIntroduction to Web Systems ', 0, 'completed', '2025-08-29 13:49:00'),
(366, 255, 2, 'Topic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers  ', 0, 'completed', '2025-08-29 13:49:00'),
(367, 255, 3, '•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web ', 0, 'completed', '2025-08-29 13:49:00'),
(368, 255, 4, '1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web ', 0, 'completed', '2025-08-29 13:49:00'),
(369, 255, 5, 'Early\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP). ', 0, 'completed', '2025-08-29 13:49:00'),
(370, 255, 6, 'Late 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web. ', 0, 'completed', '2025-08-29 13:49:00'),
(371, 255, 7, 'Internet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork. ', 0, 'completed', '2025-08-29 13:49:00'),
(372, 255, 8, 'This is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols ', 0, 'completed', '2025-08-29 13:49:00'),
(373, 255, 9, 'A system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols ', 0, 'completed', '2025-08-29 13:49:00'),
(374, 255, 10, 'Web architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client. ', 0, 'completed', '2025-08-29 13:49:00'),
(375, 255, 11, 'Web Browsers and \nWeb Servers ', 0, 'completed', '2025-08-29 13:49:00'),
(376, 255, 12, 'Web browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge ', 0, 'completed', '2025-08-29 13:49:00'),
(377, 255, 13, 'Web servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache ', 0, 'completed', '2025-08-29 13:49:00'),
(378, 255, 14, 'Key components of \na web server ', 0, 'completed', '2025-08-29 13:49:00'),
(379, 255, 15, 'Web server software\nThe software that handles \nincoming requests and sends out \nresponses ', 0, 'completed', '2025-08-29 13:49:00'),
(380, 255, 16, 'Web content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages. ', 0, 'completed', '2025-08-29 13:49:00'),
(381, 255, 17, 'Database (optional)\nA database may be used to store \nand retrieve dynamic content. ', 0, 'completed', '2025-08-29 13:49:00'),
(382, 255, 18, 'Activity\nWeb History Timeline ', 0, 'completed', '2025-08-29 13:49:00'),
(383, 255, 19, 'Assign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s). ', 0, 'completed', '2025-08-29 13:49:00'),
(384, 255, 20, 'Research\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included. ', 0, 'completed', '2025-08-29 13:49:00'),
(385, 255, 21, 'Web \nDevelopment ', 0, 'completed', '2025-08-29 13:49:00'),
(386, 255, 22, 'Topic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies ', 0, 'completed', '2025-08-29 13:49:00'),
(387, 255, 23, '•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers ', 0, 'completed', '2025-08-29 13:49:00'),
(388, 255, 24, '•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript ', 0, 'completed', '2025-08-29 13:49:00'),
(389, 255, 25, '•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java. ', 0, 'completed', '2025-08-29 13:49:00'),
(390, 255, 26, 'Full-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite. ', 0, 'completed', '2025-08-29 13:49:00'),
(391, 255, 27, 'UI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs. ', 0, 'completed', '2025-08-29 13:49:00'),
(392, 255, 28, 'UX designer\nuser experience  ', 0, 'completed', '2025-08-29 13:49:00'),
(393, 255, 29, 'Creates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography. ', 0, 'completed', '2025-08-29 13:49:00'),
(394, 255, 30, '•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.  ', 0, 'completed', '2025-08-29 13:49:00'),
(395, 255, 31, '•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service ', 0, 'completed', '2025-08-29 13:49:00'),
(396, 255, 32, 'Web development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies ', 0, 'completed', '2025-08-29 13:49:00'),
(397, 255, 33, '•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page. ', 0, 'completed', '2025-08-29 13:49:00'),
(398, 255, 34, 'Used to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting. ', 0, 'completed', '2025-08-29 13:49:00'),
(399, 255, 35, 'A programming language that adds \ninteractivity and dynamic features to \nweb pages. ', 0, 'completed', '2025-08-29 13:49:00'),
(400, 255, 36, 'A popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites. ', 0, 'completed', '2025-08-29 13:49:00'),
(401, 255, 37, 'Activity\nWebsite/Web \nApplication Critique ', 0, 'completed', '2025-08-29 13:49:00'),
(402, 255, 38, 'Instructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website. ', 0, 'completed', '2025-08-29 13:49:00'),
(403, 255, 39, '2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience? ', 0, 'completed', '2025-08-29 13:49:00'),
(404, 255, 40, '4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens? ', 0, 'completed', '2025-08-29 13:49:00'),
(405, 255, 41, 'Step 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website. ', 0, 'completed', '2025-08-29 13:49:00'),
(406, 255, 42, 'Introduction to the Web \nDevelopment Life Cycle ', 0, 'completed', '2025-08-29 13:49:00'),
(407, 255, 43, 'Topic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process ', 0, 'completed', '2025-08-29 13:49:00'),
(408, 255, 44, '•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering. ', 0, 'completed', '2025-08-29 13:49:00'),
(409, 255, 45, '•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline. ', 0, 'completed', '2025-08-29 13:49:00'),
(410, 255, 46, '•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines. ', 0, 'completed', '2025-08-29 13:49:00'),
(411, 255, 47, '•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs. ', 0, 'completed', '2025-08-29 13:49:00'),
(412, 255, 48, '•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups. ', 0, 'completed', '2025-08-29 13:49:00'),
(413, 255, 49, '•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate. ', 0, 'completed', '2025-08-29 13:49:00'),
(414, 255, 50, '1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite ', 0, 'completed', '2025-08-29 13:49:00'),
(415, 255, 51, '•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas. ', 0, 'completed', '2025-08-29 13:49:00'),
(416, 255, 52, 'wireframe ', 0, 'completed', '2025-08-29 13:49:00'),
(417, 255, 53, '•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look. ', 0, 'completed', '2025-08-29 13:49:00'),
(418, 255, 55, '2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices. ', 0, 'completed', '2025-08-29 13:49:00'),
(419, 255, 56, '•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements. ', 0, 'completed', '2025-08-29 13:49:00'),
(420, 255, 57, '•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience ', 0, 'completed', '2025-08-29 13:49:00'),
(421, 255, 58, 'COMMON \nMETHODS INCLUDE ', 0, 'completed', '2025-08-29 13:49:00'),
(422, 255, 59, 'COMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE ', 0, 'completed', '2025-08-29 13:49:00'),
(423, 255, 60, 'GET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput ', 0, 'completed', '2025-08-29 13:49:00'),
(424, 255, 61, 'POST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput ', 0, 'completed', '2025-08-29 13:49:00'),
(425, 255, 62, 'PUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation ', 0, 'completed', '2025-08-29 13:49:00'),
(426, 255, 63, 'DELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account ', 0, 'completed', '2025-08-29 13:49:00'),
(427, 255, 64, 'STATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST ', 0, 'completed', '2025-08-29 13:49:00'),
(428, 255, 65, 'EXAMPLE STATUS OF CODE ', 0, 'completed', '2025-08-29 13:49:00');
INSERT INTO `file_pages` (`page_id`, `file_id`, `page_number`, `extracted_text`, `ocr_attempts`, `page_status`, `extraction_date`) VALUES
(429, 255, 66, '200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully ', 0, 'completed', '2025-08-29 13:49:00'),
(430, 255, 67, '404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource ', 0, 'completed', '2025-08-29 13:49:00'),
(431, 255, 68, '400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data ', 0, 'completed', '2025-08-29 13:49:00'),
(432, 255, 69, '401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in ', 0, 'completed', '2025-08-29 13:49:00'),
(433, 255, 70, '403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view ', 0, 'completed', '2025-08-29 13:49:00'),
(434, 255, 71, '500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request ', 0, 'completed', '2025-08-29 13:49:00'),
(435, 255, 72, '503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable ', 0, 'completed', '2025-08-29 13:49:00'),
(436, 255, 73, '302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL ', 0, 'completed', '2025-08-29 13:49:00'),
(437, 255, 74, '301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent ', 0, 'completed', '2025-08-29 13:49:00'),
(438, 255, 75, '204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update ', 0, 'completed', '2025-08-29 13:49:00'),
(439, 256, 1, 'Unit I\nIntroduction to Web Systems ', 0, 'completed', '2025-08-29 15:32:14'),
(440, 256, 2, 'Topic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers  ', 0, 'completed', '2025-08-29 15:32:14'),
(441, 256, 3, '•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web ', 0, 'completed', '2025-08-29 15:32:14'),
(442, 256, 4, '1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web ', 0, 'completed', '2025-08-29 15:32:14'),
(443, 256, 5, 'Early\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP). ', 0, 'completed', '2025-08-29 15:32:14'),
(444, 256, 6, 'Late 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web. ', 0, 'completed', '2025-08-29 15:32:14'),
(445, 256, 7, 'Internet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork. ', 0, 'completed', '2025-08-29 15:32:14'),
(446, 256, 8, 'This is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols ', 0, 'completed', '2025-08-29 15:32:14'),
(447, 256, 9, 'A system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols ', 0, 'completed', '2025-08-29 15:32:14'),
(448, 256, 10, 'Web architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client. ', 0, 'completed', '2025-08-29 15:32:14'),
(449, 256, 11, 'Web Browsers and \nWeb Servers ', 0, 'completed', '2025-08-29 15:32:14'),
(450, 256, 12, 'Web browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge ', 0, 'completed', '2025-08-29 15:32:14'),
(451, 256, 13, 'Web servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache ', 0, 'completed', '2025-08-29 15:32:14'),
(452, 256, 14, 'Key components of \na web server ', 0, 'completed', '2025-08-29 15:32:14'),
(453, 256, 15, 'Web server software\nThe software that handles \nincoming requests and sends out \nresponses ', 0, 'completed', '2025-08-29 15:32:14'),
(454, 256, 16, 'Web content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages. ', 0, 'completed', '2025-08-29 15:32:14'),
(455, 256, 17, 'Database (optional)\nA database may be used to store \nand retrieve dynamic content. ', 0, 'completed', '2025-08-29 15:32:14'),
(456, 256, 18, 'Activity\nWeb History Timeline ', 0, 'completed', '2025-08-29 15:32:14'),
(457, 256, 19, 'Assign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s). ', 0, 'completed', '2025-08-29 15:32:14'),
(458, 256, 20, 'Research\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included. ', 0, 'completed', '2025-08-29 15:32:14'),
(459, 256, 21, 'Web \nDevelopment ', 0, 'completed', '2025-08-29 15:32:14'),
(460, 256, 22, 'Topic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies ', 0, 'completed', '2025-08-29 15:32:14'),
(461, 256, 23, '•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers ', 0, 'completed', '2025-08-29 15:32:14'),
(462, 256, 24, '•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript ', 0, 'completed', '2025-08-29 15:32:14'),
(463, 256, 25, '•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java. ', 0, 'completed', '2025-08-29 15:32:14'),
(464, 256, 26, 'Full-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite. ', 0, 'completed', '2025-08-29 15:32:14'),
(465, 256, 27, 'UI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs. ', 0, 'completed', '2025-08-29 15:32:14'),
(466, 256, 28, 'UX designer\nuser experience  ', 0, 'completed', '2025-08-29 15:32:14'),
(467, 256, 29, 'Creates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography. ', 0, 'completed', '2025-08-29 15:32:14'),
(468, 256, 30, '•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.  ', 0, 'completed', '2025-08-29 15:32:14'),
(469, 256, 31, '•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service ', 0, 'completed', '2025-08-29 15:32:14'),
(470, 256, 32, 'Web development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies ', 0, 'completed', '2025-08-29 15:32:14'),
(471, 256, 33, '•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page. ', 0, 'completed', '2025-08-29 15:32:14'),
(472, 256, 34, 'Used to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting. ', 0, 'completed', '2025-08-29 15:32:14'),
(473, 256, 35, 'A programming language that adds \ninteractivity and dynamic features to \nweb pages. ', 0, 'completed', '2025-08-29 15:32:14'),
(474, 256, 36, 'A popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites. ', 0, 'completed', '2025-08-29 15:32:14'),
(475, 256, 37, 'Activity\nWebsite/Web \nApplication Critique ', 0, 'completed', '2025-08-29 15:32:14'),
(476, 256, 38, 'Instructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website. ', 0, 'completed', '2025-08-29 15:32:14'),
(477, 256, 39, '2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience? ', 0, 'completed', '2025-08-29 15:32:14'),
(478, 256, 40, '4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens? ', 0, 'completed', '2025-08-29 15:32:14'),
(479, 256, 41, 'Step 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website. ', 0, 'completed', '2025-08-29 15:32:14'),
(480, 256, 42, 'Introduction to the Web \nDevelopment Life Cycle ', 0, 'completed', '2025-08-29 15:32:14'),
(481, 256, 43, 'Topic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process ', 0, 'completed', '2025-08-29 15:32:14'),
(482, 256, 44, '•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering. ', 0, 'completed', '2025-08-29 15:32:14'),
(483, 256, 45, '•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline. ', 0, 'completed', '2025-08-29 15:32:14'),
(484, 256, 46, '•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines. ', 0, 'completed', '2025-08-29 15:32:14'),
(485, 256, 47, '•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs. ', 0, 'completed', '2025-08-29 15:32:14'),
(486, 256, 48, '•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups. ', 0, 'completed', '2025-08-29 15:32:14'),
(487, 256, 49, '•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate. ', 0, 'completed', '2025-08-29 15:32:14'),
(488, 256, 50, '1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite ', 0, 'completed', '2025-08-29 15:32:14'),
(489, 256, 51, '•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas. ', 0, 'completed', '2025-08-29 15:32:14'),
(490, 256, 52, 'wireframe ', 0, 'completed', '2025-08-29 15:32:14'),
(491, 256, 53, '•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look. ', 0, 'completed', '2025-08-29 15:32:14'),
(492, 256, 55, '2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices. ', 0, 'completed', '2025-08-29 15:32:14'),
(493, 256, 56, '•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements. ', 0, 'completed', '2025-08-29 15:32:14'),
(494, 256, 57, '•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience ', 0, 'completed', '2025-08-29 15:32:14'),
(495, 256, 58, 'COMMON \nMETHODS INCLUDE ', 0, 'completed', '2025-08-29 15:32:14'),
(496, 256, 59, 'COMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE ', 0, 'completed', '2025-08-29 15:32:14'),
(497, 256, 60, 'GET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput ', 0, 'completed', '2025-08-29 15:32:14'),
(498, 256, 61, 'POST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput ', 0, 'completed', '2025-08-29 15:32:14'),
(499, 256, 62, 'PUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation ', 0, 'completed', '2025-08-29 15:32:14'),
(500, 256, 63, 'DELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account ', 0, 'completed', '2025-08-29 15:32:14'),
(501, 256, 64, 'STATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST ', 0, 'completed', '2025-08-29 15:32:14'),
(502, 256, 65, 'EXAMPLE STATUS OF CODE ', 0, 'completed', '2025-08-29 15:32:14'),
(503, 256, 66, '200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully ', 0, 'completed', '2025-08-29 15:32:14'),
(504, 256, 67, '404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource ', 0, 'completed', '2025-08-29 15:32:14'),
(505, 256, 68, '400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data ', 0, 'completed', '2025-08-29 15:32:14'),
(506, 256, 69, '401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in ', 0, 'completed', '2025-08-29 15:32:14'),
(507, 256, 70, '403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view ', 0, 'completed', '2025-08-29 15:32:14'),
(508, 256, 71, '500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request ', 0, 'completed', '2025-08-29 15:32:14'),
(509, 256, 72, '503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable ', 0, 'completed', '2025-08-29 15:32:14'),
(510, 256, 73, '302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL ', 0, 'completed', '2025-08-29 15:32:14'),
(511, 256, 74, '301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent ', 0, 'completed', '2025-08-29 15:32:14'),
(512, 256, 75, '204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update ', 0, 'completed', '2025-08-29 15:32:14'),
(513, 257, 1, 'Unit I\nIntroduction to Web Systems ', 0, 'completed', '2025-08-29 16:30:59'),
(514, 257, 2, 'Topic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers  ', 0, 'completed', '2025-08-29 16:30:59'),
(515, 257, 3, '•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web ', 0, 'completed', '2025-08-29 16:30:59'),
(516, 257, 4, '1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web ', 0, 'completed', '2025-08-29 16:30:59'),
(517, 257, 5, 'Early\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP). ', 0, 'completed', '2025-08-29 16:30:59'),
(518, 257, 6, 'Late 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web. ', 0, 'completed', '2025-08-29 16:30:59'),
(519, 257, 7, 'Internet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork. ', 0, 'completed', '2025-08-29 16:30:59'),
(520, 257, 8, 'This is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols ', 0, 'completed', '2025-08-29 16:30:59'),
(521, 257, 9, 'A system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols ', 0, 'completed', '2025-08-29 16:30:59'),
(522, 257, 10, 'Web architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client. ', 0, 'completed', '2025-08-29 16:30:59'),
(523, 257, 11, 'Web Browsers and \nWeb Servers ', 0, 'completed', '2025-08-29 16:30:59'),
(524, 257, 12, 'Web browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge ', 0, 'completed', '2025-08-29 16:30:59'),
(525, 257, 13, 'Web servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache ', 0, 'completed', '2025-08-29 16:30:59'),
(526, 257, 14, 'Key components of \na web server ', 0, 'completed', '2025-08-29 16:30:59'),
(527, 257, 15, 'Web server software\nThe software that handles \nincoming requests and sends out \nresponses ', 0, 'completed', '2025-08-29 16:30:59'),
(528, 257, 16, 'Web content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages. ', 0, 'completed', '2025-08-29 16:30:59'),
(529, 257, 17, 'Database (optional)\nA database may be used to store \nand retrieve dynamic content. ', 0, 'completed', '2025-08-29 16:30:59'),
(530, 257, 18, 'Activity\nWeb History Timeline ', 0, 'completed', '2025-08-29 16:30:59'),
(531, 257, 19, 'Assign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s). ', 0, 'completed', '2025-08-29 16:30:59'),
(532, 257, 20, 'Research\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included. ', 0, 'completed', '2025-08-29 16:30:59'),
(533, 257, 21, 'Web \nDevelopment ', 0, 'completed', '2025-08-29 16:30:59'),
(534, 257, 22, 'Topic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies ', 0, 'completed', '2025-08-29 16:30:59'),
(535, 257, 23, '•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers ', 0, 'completed', '2025-08-29 16:30:59'),
(536, 257, 24, '•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript ', 0, 'completed', '2025-08-29 16:30:59'),
(537, 257, 25, '•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java. ', 0, 'completed', '2025-08-29 16:30:59'),
(538, 257, 26, 'Full-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite. ', 0, 'completed', '2025-08-29 16:30:59'),
(539, 257, 27, 'UI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs. ', 0, 'completed', '2025-08-29 16:30:59'),
(540, 257, 28, 'UX designer\nuser experience  ', 0, 'completed', '2025-08-29 16:30:59'),
(541, 257, 29, 'Creates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography. ', 0, 'completed', '2025-08-29 16:30:59'),
(542, 257, 30, '•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.  ', 0, 'completed', '2025-08-29 16:30:59'),
(543, 257, 31, '•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service ', 0, 'completed', '2025-08-29 16:30:59'),
(544, 257, 32, 'Web development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies ', 0, 'completed', '2025-08-29 16:30:59'),
(545, 257, 33, '•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page. ', 0, 'completed', '2025-08-29 16:30:59'),
(546, 257, 34, 'Used to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting. ', 0, 'completed', '2025-08-29 16:30:59'),
(547, 257, 35, 'A programming language that adds \ninteractivity and dynamic features to \nweb pages. ', 0, 'completed', '2025-08-29 16:30:59'),
(548, 257, 36, 'A popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites. ', 0, 'completed', '2025-08-29 16:30:59'),
(549, 257, 37, 'Activity\nWebsite/Web \nApplication Critique ', 0, 'completed', '2025-08-29 16:30:59'),
(550, 257, 38, 'Instructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website. ', 0, 'completed', '2025-08-29 16:30:59'),
(551, 257, 39, '2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience? ', 0, 'completed', '2025-08-29 16:30:59'),
(552, 257, 40, '4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens? ', 0, 'completed', '2025-08-29 16:30:59'),
(553, 257, 41, 'Step 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website. ', 0, 'completed', '2025-08-29 16:30:59'),
(554, 257, 42, 'Introduction to the Web \nDevelopment Life Cycle ', 0, 'completed', '2025-08-29 16:30:59'),
(555, 257, 43, 'Topic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process ', 0, 'completed', '2025-08-29 16:30:59'),
(556, 257, 44, '•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering. ', 0, 'completed', '2025-08-29 16:30:59'),
(557, 257, 45, '•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline. ', 0, 'completed', '2025-08-29 16:30:59'),
(558, 257, 46, '•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines. ', 0, 'completed', '2025-08-29 16:30:59'),
(559, 257, 47, '•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs. ', 0, 'completed', '2025-08-29 16:30:59'),
(560, 257, 48, '•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups. ', 0, 'completed', '2025-08-29 16:30:59'),
(561, 257, 49, '•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate. ', 0, 'completed', '2025-08-29 16:30:59'),
(562, 257, 50, '1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite ', 0, 'completed', '2025-08-29 16:30:59'),
(563, 257, 51, '•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas. ', 0, 'completed', '2025-08-29 16:30:59'),
(564, 257, 52, 'wireframe ', 0, 'completed', '2025-08-29 16:30:59'),
(565, 257, 53, '•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look. ', 0, 'completed', '2025-08-29 16:30:59'),
(566, 257, 55, '2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices. ', 0, 'completed', '2025-08-29 16:30:59'),
(567, 257, 56, '•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements. ', 0, 'completed', '2025-08-29 16:30:59'),
(568, 257, 57, '•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience ', 0, 'completed', '2025-08-29 16:30:59'),
(569, 257, 58, 'COMMON \nMETHODS INCLUDE ', 0, 'completed', '2025-08-29 16:30:59'),
(570, 257, 59, 'COMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE ', 0, 'completed', '2025-08-29 16:30:59'),
(571, 257, 60, 'GET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput ', 0, 'completed', '2025-08-29 16:30:59'),
(572, 257, 61, 'POST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput ', 0, 'completed', '2025-08-29 16:30:59'),
(573, 257, 62, 'PUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation ', 0, 'completed', '2025-08-29 16:30:59'),
(574, 257, 63, 'DELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account ', 0, 'completed', '2025-08-29 16:30:59'),
(575, 257, 64, 'STATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST ', 0, 'completed', '2025-08-29 16:30:59'),
(576, 257, 65, 'EXAMPLE STATUS OF CODE ', 0, 'completed', '2025-08-29 16:30:59'),
(577, 257, 66, '200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully ', 0, 'completed', '2025-08-29 16:30:59'),
(578, 257, 67, '404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource ', 0, 'completed', '2025-08-29 16:30:59'),
(579, 257, 68, '400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data ', 0, 'completed', '2025-08-29 16:30:59'),
(580, 257, 69, '401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in ', 0, 'completed', '2025-08-29 16:30:59'),
(581, 257, 70, '403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view ', 0, 'completed', '2025-08-29 16:30:59'),
(582, 257, 71, '500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request ', 0, 'completed', '2025-08-29 16:30:59'),
(583, 257, 72, '503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable ', 0, 'completed', '2025-08-29 16:30:59'),
(584, 257, 73, '302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL ', 0, 'completed', '2025-08-29 16:30:59'),
(585, 257, 74, '301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent ', 0, 'completed', '2025-08-29 16:30:59'),
(586, 257, 75, '204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update ', 0, 'completed', '2025-08-29 16:30:59'),
(587, 258, 1, 'Unit I\nIntroduction to Web Systems ', 0, 'completed', '2025-08-29 16:31:30'),
(588, 258, 2, 'Topic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers  ', 0, 'completed', '2025-08-29 16:31:30'),
(589, 258, 3, '•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web ', 0, 'completed', '2025-08-29 16:31:30'),
(590, 258, 4, '1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web ', 0, 'completed', '2025-08-29 16:31:30'),
(591, 258, 5, 'Early\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP). ', 0, 'completed', '2025-08-29 16:31:30'),
(592, 258, 6, 'Late 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web. ', 0, 'completed', '2025-08-29 16:31:30'),
(593, 258, 7, 'Internet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork. ', 0, 'completed', '2025-08-29 16:31:30'),
(594, 258, 8, 'This is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols ', 0, 'completed', '2025-08-29 16:31:30'),
(595, 258, 9, 'A system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols ', 0, 'completed', '2025-08-29 16:31:30'),
(596, 258, 10, 'Web architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client. ', 0, 'completed', '2025-08-29 16:31:30'),
(597, 258, 11, 'Web Browsers and \nWeb Servers ', 0, 'completed', '2025-08-29 16:31:30'),
(598, 258, 12, 'Web browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge ', 0, 'completed', '2025-08-29 16:31:30'),
(599, 258, 13, 'Web servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache ', 0, 'completed', '2025-08-29 16:31:30'),
(600, 258, 14, 'Key components of \na web server ', 0, 'completed', '2025-08-29 16:31:30'),
(601, 258, 15, 'Web server software\nThe software that handles \nincoming requests and sends out \nresponses ', 0, 'completed', '2025-08-29 16:31:30'),
(602, 258, 16, 'Web content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages. ', 0, 'completed', '2025-08-29 16:31:30'),
(603, 258, 17, 'Database (optional)\nA database may be used to store \nand retrieve dynamic content. ', 0, 'completed', '2025-08-29 16:31:30'),
(604, 258, 18, 'Activity\nWeb History Timeline ', 0, 'completed', '2025-08-29 16:31:30'),
(605, 258, 19, 'Assign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s). ', 0, 'completed', '2025-08-29 16:31:30'),
(606, 258, 20, 'Research\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included. ', 0, 'completed', '2025-08-29 16:31:30'),
(607, 258, 21, 'Web \nDevelopment ', 0, 'completed', '2025-08-29 16:31:30'),
(608, 258, 22, 'Topic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies ', 0, 'completed', '2025-08-29 16:31:30'),
(609, 258, 23, '•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers ', 0, 'completed', '2025-08-29 16:31:30'),
(610, 258, 24, '•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript ', 0, 'completed', '2025-08-29 16:31:30'),
(611, 258, 25, '•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java. ', 0, 'completed', '2025-08-29 16:31:30'),
(612, 258, 26, 'Full-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite. ', 0, 'completed', '2025-08-29 16:31:30'),
(613, 258, 27, 'UI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs. ', 0, 'completed', '2025-08-29 16:31:30'),
(614, 258, 28, 'UX designer\nuser experience  ', 0, 'completed', '2025-08-29 16:31:30'),
(615, 258, 29, 'Creates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography. ', 0, 'completed', '2025-08-29 16:31:30'),
(616, 258, 30, '•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.  ', 0, 'completed', '2025-08-29 16:31:30'),
(617, 258, 31, '•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service ', 0, 'completed', '2025-08-29 16:31:30'),
(618, 258, 32, 'Web development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies ', 0, 'completed', '2025-08-29 16:31:30'),
(619, 258, 33, '•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page. ', 0, 'completed', '2025-08-29 16:31:30'),
(620, 258, 34, 'Used to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting. ', 0, 'completed', '2025-08-29 16:31:30'),
(621, 258, 35, 'A programming language that adds \ninteractivity and dynamic features to \nweb pages. ', 0, 'completed', '2025-08-29 16:31:30'),
(622, 258, 36, 'A popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites. ', 0, 'completed', '2025-08-29 16:31:30'),
(623, 258, 37, 'Activity\nWebsite/Web \nApplication Critique ', 0, 'completed', '2025-08-29 16:31:30'),
(624, 258, 38, 'Instructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website. ', 0, 'completed', '2025-08-29 16:31:30'),
(625, 258, 39, '2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience? ', 0, 'completed', '2025-08-29 16:31:30'),
(626, 258, 40, '4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens? ', 0, 'completed', '2025-08-29 16:31:30'),
(627, 258, 41, 'Step 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website. ', 0, 'completed', '2025-08-29 16:31:30'),
(628, 258, 42, 'Introduction to the Web \nDevelopment Life Cycle ', 0, 'completed', '2025-08-29 16:31:30'),
(629, 258, 43, 'Topic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process ', 0, 'completed', '2025-08-29 16:31:30'),
(630, 258, 44, '•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering. ', 0, 'completed', '2025-08-29 16:31:30'),
(631, 258, 45, '•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline. ', 0, 'completed', '2025-08-29 16:31:30'),
(632, 258, 46, '•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines. ', 0, 'completed', '2025-08-29 16:31:30'),
(633, 258, 47, '•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs. ', 0, 'completed', '2025-08-29 16:31:30'),
(634, 258, 48, '•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups. ', 0, 'completed', '2025-08-29 16:31:30'),
(635, 258, 49, '•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate. ', 0, 'completed', '2025-08-29 16:31:30'),
(636, 258, 50, '1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite ', 0, 'completed', '2025-08-29 16:31:30'),
(637, 258, 51, '•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas. ', 0, 'completed', '2025-08-29 16:31:30'),
(638, 258, 52, 'wireframe ', 0, 'completed', '2025-08-29 16:31:30'),
(639, 258, 53, '•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look. ', 0, 'completed', '2025-08-29 16:31:30'),
(640, 258, 55, '2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices. ', 0, 'completed', '2025-08-29 16:31:30'),
(641, 258, 56, '•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements. ', 0, 'completed', '2025-08-29 16:31:30'),
(642, 258, 57, '•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience ', 0, 'completed', '2025-08-29 16:31:30'),
(643, 258, 58, 'COMMON \nMETHODS INCLUDE ', 0, 'completed', '2025-08-29 16:31:30'),
(644, 258, 59, 'COMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE ', 0, 'completed', '2025-08-29 16:31:30'),
(645, 258, 60, 'GET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput ', 0, 'completed', '2025-08-29 16:31:30'),
(646, 258, 61, 'POST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput ', 0, 'completed', '2025-08-29 16:31:30'),
(647, 258, 62, 'PUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation ', 0, 'completed', '2025-08-29 16:31:30'),
(648, 258, 63, 'DELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account ', 0, 'completed', '2025-08-29 16:31:30'),
(649, 258, 64, 'STATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST ', 0, 'completed', '2025-08-29 16:31:30'),
(650, 258, 65, 'EXAMPLE STATUS OF CODE ', 0, 'completed', '2025-08-29 16:31:30'),
(651, 258, 66, '200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully ', 0, 'completed', '2025-08-29 16:31:30'),
(652, 258, 67, '404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource ', 0, 'completed', '2025-08-29 16:31:30');
INSERT INTO `file_pages` (`page_id`, `file_id`, `page_number`, `extracted_text`, `ocr_attempts`, `page_status`, `extraction_date`) VALUES
(653, 258, 68, '400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data ', 0, 'completed', '2025-08-29 16:31:30'),
(654, 258, 69, '401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in ', 0, 'completed', '2025-08-29 16:31:30'),
(655, 258, 70, '403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view ', 0, 'completed', '2025-08-29 16:31:30'),
(656, 258, 71, '500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request ', 0, 'completed', '2025-08-29 16:31:30'),
(657, 258, 72, '503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable ', 0, 'completed', '2025-08-29 16:31:30'),
(658, 258, 73, '302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL ', 0, 'completed', '2025-08-29 16:31:30'),
(659, 258, 74, '301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent ', 0, 'completed', '2025-08-29 16:31:30'),
(660, 258, 75, '204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update ', 0, 'completed', '2025-08-29 16:31:30');

--
-- Triggers `file_pages`
--
DELIMITER $$
CREATE TRIGGER `tr_update_file_status_after_page_insert` AFTER INSERT ON `file_pages` FOR EACH ROW BEGIN
    UPDATE files
    SET file_status = 'pending_ocr',
        date_updated = CURRENT_TIMESTAMP
    WHERE file_id = NEW.file_id
      AND file_status NOT IN ('completed','ocr_failed');
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `tr_update_file_status_after_page_update` AFTER UPDATE ON `file_pages` FOR EACH ROW BEGIN
    DECLARE total_pages INT;
    DECLARE failed_pages INT;
    DECLARE pending_pages INT;

    SELECT COUNT(*),
           SUM(page_status = 'failed'),
           SUM(page_status = 'pending')
    INTO total_pages, failed_pages, pending_pages
    FROM file_pages
    WHERE file_id = NEW.file_id;

    IF failed_pages = total_pages THEN
        UPDATE files
        SET file_status = 'ocr_failed',
            date_updated = CURRENT_TIMESTAMP
        WHERE file_id = NEW.file_id;
    ELSEIF pending_pages > 0 THEN
        UPDATE files
        SET file_status = 'pending_ocr',
            date_updated = CURRENT_TIMESTAMP
        WHERE file_id = NEW.file_id;
    ELSE
        UPDATE files
        SET file_status = 'completed',
            date_updated = CURRENT_TIMESTAMP
        WHERE file_id = NEW.file_id;
    END IF;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Table structure for table `schema_change_log`
--

CREATE TABLE `schema_change_log` (
  `log_id` int(11) NOT NULL,
  `change_description` varchar(255) NOT NULL,
  `change_time` datetime DEFAULT current_timestamp(),
  `executed_by` varchar(100) DEFAULT 'root@localhost'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `schema_change_log`
--

INSERT INTO `schema_change_log` (`log_id`, `change_description`, `change_time`, `executed_by`) VALUES
(1, 'Starting schema update for personal folders and department paths', '2025-08-27 05:26:27', 'root@localhost'),
(2, 'Added 0 personal folders to storage_locations', '2025-08-27 05:26:27', 'root@localhost'),
(3, 'Standardized folder_path for 0 departments', '2025-08-27 05:26:27', 'root@localhost'),
(4, 'Added unique_folder_path constraint to departments', '2025-08-27 05:26:27', 'root@localhost'),
(5, 'Created index idx_storage_locations_full_path on storage_locations', '2025-08-27 05:26:28', 'root@localhost'),
(6, 'Created index idx_departments_folder_path on departments', '2025-08-27 05:26:28', 'root@localhost'),
(7, 'Skipped index idx_files_user_id: already exists', '2025-08-27 05:26:28', 'root@localhost'),
(8, 'Created index idx_files_department_id on files', '2025-08-27 05:26:28', 'root@localhost'),
(9, 'Created index idx_files_sub_department_id on files', '2025-08-27 05:26:28', 'root@localhost'),
(10, 'Completed schema update for personal folders and get_file_path function', '2025-08-27 05:26:28', 'root@localhost'),
(11, 'Modified database schema for OCR processing', '2025-08-29 08:22:46', 'root@localhost');

-- --------------------------------------------------------

--
-- Table structure for table `storage_locations`
--

CREATE TABLE `storage_locations` (
  `storage_location_id` int(11) NOT NULL,
  `department_id` int(11) DEFAULT NULL,
  `sub_department_id` int(11) DEFAULT NULL,
  `parent_storage_location_id` int(11) DEFAULT NULL,
  `unit_name` varchar(100) NOT NULL,
  `unit_type` enum('room','cabinet','layer','box','folder') NOT NULL,
  `folder_capacity` int(11) NOT NULL,
  `full_path` varchar(512) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `storage_locations`
--

INSERT INTO `storage_locations` (`storage_location_id`, `department_id`, `sub_department_id`, `parent_storage_location_id`, `unit_name`, `unit_type`, `folder_capacity`, `full_path`) VALUES
(1, 16, NULL, NULL, 'Room 101', 'room', 100, 'Room 101'),
(2, 16, NULL, 1, 'Cabinet A', 'cabinet', 50, 'Room 101/Cabinet A'),
(3, 16, NULL, 2, 'Layer 1', 'layer', 20, 'Room 101/Cabinet A/Layer 1'),
(4, 3, 16, NULL, 'Lab 1', 'room', 200, 'Lab 1'),
(5, 3, 16, 4, 'Cabinet A', 'cabinet', 100, 'Lab 1/Cabinet A'),
(6, 3, 16, 5, 'Layer 1', 'layer', 50, 'Lab 1/Cabinet A/Layer 1'),
(7, 3, 16, 6, 'Box 1', 'box', 25, 'Lab 1/Cabinet A/Layer 1/Box 1'),
(8, 3, 16, 7, 'Folder 1', 'folder', 10, 'Lab 1/Cabinet A/Layer 1/Box 1/Folder 1'),
(9, 3, 16, 7, 'Folder 2', 'folder', 10, 'Lab 1/Cabinet A/Layer 1/Box 1/Folder 2'),
(10, 3, 16, 6, 'Box 2', 'box', 25, 'Lab 1/Cabinet A/Layer 1/Box 2'),
(11, 3, 16, 10, 'Folder 1', 'folder', 10, 'Lab 1/Cabinet A/Layer 1/Box 2/Folder 1'),
(12, 3, 16, 10, 'Folder 2', 'folder', 10, 'Lab 1/Cabinet A/Layer 1/Box 2/Folder 2'),
(13, 3, 16, 5, 'Layer 2', 'layer', 50, 'Lab 1/Cabinet A/Layer 2'),
(14, 3, 16, 13, 'Box 1', 'box', 25, 'Lab 1/Cabinet A/Layer 2/Box 1'),
(15, 3, 16, 14, 'Folder 1', 'folder', 10, 'Lab 1/Cabinet A/Layer 2/Box 1/Folder 1'),
(16, 3, 16, 14, 'Folder 2', 'folder', 10, 'Lab 1/Cabinet A/Layer 2/Box 1/Folder 2'),
(17, 3, 16, 13, 'Box 2', 'box', 25, 'Lab 1/Cabinet A/Layer 2/Box 2'),
(18, 3, 16, 17, 'Folder 1', 'folder', 10, 'Lab 1/Cabinet A/Layer 2/Box 2/Folder 1'),
(19, 3, 16, 17, 'Folder 2', 'folder', 10, 'Lab 1/Cabinet A/Layer 2/Box 2/Folder 2'),
(20, 3, 16, 4, 'Cabinet B', 'cabinet', 100, 'Lab 1/Cabinet B'),
(21, 3, 16, 20, 'Layer 1', 'layer', 50, 'Lab 1/Cabinet B/Layer 1'),
(22, 3, 16, 21, 'Box 1', 'box', 25, 'Lab 1/Cabinet B/Layer 1/Box 1'),
(23, 3, 16, 22, 'Folder 1', 'folder', 10, 'Lab 1/Cabinet B/Layer 1/Box 1/Folder 1'),
(24, 3, 16, 22, 'Folder 2', 'folder', 10, 'Lab 1/Cabinet B/Layer 1/Box 1/Folder 2'),
(25, 3, 16, 21, 'Box 2', 'box', 25, 'Lab 1/Cabinet B/Layer 1/Box 2'),
(26, 3, 16, 25, 'Folder 1', 'folder', 10, 'Lab 1/Cabinet B/Layer 1/Box 2/Folder 1'),
(27, 3, 16, 25, 'Folder 2', 'folder', 10, 'Lab 1/Cabinet B/Layer 1/Box 2/Folder 2'),
(28, 3, 16, NULL, 'Lab 2', 'room', 200, 'Lab 2'),
(29, 3, 16, 28, 'Cabinet A', 'cabinet', 100, 'Lab 2/Cabinet A'),
(30, 3, 16, 29, 'Layer 1', 'layer', 50, 'Lab 2/Cabinet A/Layer 1'),
(31, 3, 16, 30, 'Box 1', 'box', 25, 'Lab 2/Cabinet A/Layer 1/Box 1'),
(32, 3, 16, 31, 'Folder 1', 'folder', 10, 'Lab 2/Cabinet A/Layer 1/Box 1/Folder 1'),
(33, 3, 16, 31, 'Folder 2', 'folder', 10, 'Lab 2/Cabinet A/Layer 1/Box 1/Folder 2'),
(34, 3, 16, 30, 'Box 2', 'box', 25, 'Lab 2/Cabinet A/Layer 1/Box 2'),
(35, 3, 16, 34, 'Folder 1', 'folder', 10, 'Lab 2/Cabinet A/Layer 1/Box 2/Folder 1'),
(36, 3, 16, 34, 'Folder 2', 'folder', 10, 'Lab 2/Cabinet A/Layer 1/Box 2/Folder 2'),
(37, 3, 16, 29, 'Layer 2', 'layer', 50, 'Lab 2/Cabinet A/Layer 2'),
(38, 3, 16, 37, 'Box 1', 'box', 25, 'Lab 2/Cabinet A/Layer 2/Box 1'),
(39, 3, 16, 38, 'Folder 1', 'folder', 10, 'Lab 2/Cabinet A/Layer 2/Box 1/Folder 1'),
(40, 3, 16, 38, 'Folder 2', 'folder', 10, 'Lab 2/Cabinet A/Layer 2/Box 1/Folder 2'),
(41, 3, 16, 37, 'Box 2', 'box', 25, 'Lab 2/Cabinet A/Layer 2/Box 2'),
(42, 3, 16, 41, 'Folder 1', 'folder', 10, 'Lab 2/Cabinet A/Layer 2/Box 2/Folder 1'),
(43, 3, 16, 41, 'Folder 2', 'folder', 10, 'Lab 2/Cabinet A/Layer 2/Box 2/Folder 2'),
(44, 3, 16, 28, 'Cabinet B', 'cabinet', 100, 'Lab 2/Cabinet B'),
(45, 3, 16, 44, 'Layer 1', 'layer', 50, 'Lab 2/Cabinet B/Layer 1'),
(46, 3, 16, 45, 'Box 1', 'box', 25, 'Lab 2/Cabinet B/Layer 1/Box 1'),
(47, 3, 16, 46, 'Folder 1', 'folder', 10, 'Lab 2/Cabinet B/Layer 1/Box 1/Folder 1'),
(48, 3, 16, 46, 'Folder 2', 'folder', 10, 'Lab 2/Cabinet B/Layer 1/Box 1/Folder 2'),
(49, 3, 16, 45, 'Box 2', 'box', 25, 'Lab 2/Cabinet B/Layer 1/Box 2'),
(50, 3, 16, 49, 'Folder 1', 'folder', 10, 'Lab 2/Cabinet B/Layer 1/Box 2/Folder 1'),
(51, 3, 16, 49, 'Folder 2', 'folder', 10, 'Lab 2/Cabinet B/Layer 1/Box 2/Folder 2'),
(52, 3, 16, NULL, 'Lab 3', 'room', 200, 'Lab 3'),
(53, 3, 16, 52, 'Cabinet A', 'cabinet', 100, 'Lab 3/Cabinet A'),
(54, 3, 16, 53, 'Layer 1', 'layer', 50, 'Lab 3/Cabinet A/Layer 1'),
(55, 3, 16, 54, 'Box 1', 'box', 25, 'Lab 3/Cabinet A/Layer 1/Box 1'),
(56, 3, 16, 55, 'Folder 1', 'folder', 10, 'Lab 3/Cabinet A/Layer 1/Box 1/Folder 1'),
(57, 3, 16, 55, 'Folder 2', 'folder', 10, 'Lab 3/Cabinet A/Layer 1/Box 1/Folder 2'),
(58, 3, 16, 54, 'Box 2', 'box', 25, 'Lab 3/Cabinet A/Layer 1/Box 2'),
(59, 3, 16, 58, 'Folder 1', 'folder', 10, 'Lab 3/Cabinet A/Layer 1/Box 2/Folder 1'),
(60, 3, 16, 58, 'Folder 2', 'folder', 10, 'Lab 3/Cabinet A/Layer 1/Box 2/Folder 2'),
(61, 3, 16, 53, 'Layer 2', 'layer', 50, 'Lab 3/Cabinet A/Layer 2'),
(62, 3, 16, 61, 'Box 1', 'box', 25, 'Lab 3/Cabinet A/Layer 2/Box 1'),
(63, 3, 16, 62, 'Folder 1', 'folder', 10, 'Lab 3/Cabinet A/Layer 2/Box 1/Folder 1'),
(64, 3, 16, 62, 'Folder 2', 'folder', 10, 'Lab 3/Cabinet A/Layer 2/Box 1/Folder 2'),
(65, 3, 16, 61, 'Box 2', 'box', 25, 'Lab 3/Cabinet A/Layer 2/Box 2'),
(66, 3, 16, 65, 'Folder 1', 'folder', 10, 'Lab 3/Cabinet A/Layer 2/Box 2/Folder 1'),
(67, 3, 16, 65, 'Folder 2', 'folder', 10, 'Lab 3/Cabinet A/Layer 2/Box 2/Folder 2'),
(68, 3, 16, 52, 'Cabinet B', 'cabinet', 100, 'Lab 3/Cabinet B'),
(69, 3, 16, 68, 'Layer 1', 'layer', 50, 'Lab 3/Cabinet B/Layer 1'),
(70, 3, 16, 69, 'Box 1', 'box', 25, 'Lab 3/Cabinet B/Layer 1/Box 1'),
(71, 3, 16, 70, 'Folder 1', 'folder', 10, 'Lab 3/Cabinet B/Layer 1/Box 1/Folder 1'),
(72, 3, 16, 70, 'Folder 2', 'folder', 10, 'Lab 3/Cabinet B/Layer 1/Box 1/Folder 2'),
(73, 3, 16, 69, 'Box 2', 'box', 25, 'Lab 3/Cabinet B/Layer 1/Box 2'),
(74, 3, 16, 73, 'Folder 1', 'folder', 10, 'Lab 3/Cabinet B/Layer 1/Box 2/Folder 1'),
(75, 3, 16, 73, 'Folder 2', 'folder', 10, 'Lab 3/Cabinet B/Layer 1/Box 2/Folder 2'),
(76, 3, 16, NULL, 'Lab 4', 'room', 200, 'Lab 4'),
(77, 3, 16, 76, 'Cabinet A', 'cabinet', 100, 'Lab 4/Cabinet A'),
(78, 3, 16, 77, 'Layer 1', 'layer', 50, 'Lab 4/Cabinet A/Layer 1'),
(79, 3, 16, 78, 'Box 1', 'box', 25, 'Lab 4/Cabinet A/Layer 1/Box 1'),
(80, 3, 16, 79, 'Folder 1', 'folder', 10, 'Lab 4/Cabinet A/Layer 1/Box 1/Folder 1'),
(81, 3, 16, 79, 'Folder 2', 'folder', 10, 'Lab 4/Cabinet A/Layer 1/Box 1/Folder 2'),
(82, 3, 16, 78, 'Box 2', 'box', 25, 'Lab 4/Cabinet A/Layer 1/Box 2'),
(83, 3, 16, 82, 'Folder 1', 'folder', 10, 'Lab 4/Cabinet A/Layer 1/Box 2/Folder 1'),
(84, 3, 16, 82, 'Folder 2', 'folder', 10, 'Lab 4/Cabinet A/Layer 1/Box 2/Folder 2'),
(85, 3, 16, 77, 'Layer 2', 'layer', 50, 'Lab 4/Cabinet A/Layer 2'),
(86, 3, 16, 85, 'Box 1', 'box', 25, 'Lab 4/Cabinet A/Layer 2/Box 1'),
(87, 3, 16, 86, 'Folder 1', 'folder', 10, 'Lab 4/Cabinet A/Layer 2/Box 1/Folder 1'),
(88, 3, 16, 86, 'Folder 2', 'folder', 10, 'Lab 4/Cabinet A/Layer 2/Box 1/Folder 2'),
(89, 3, 16, 85, 'Box 2', 'box', 25, 'Lab 4/Cabinet A/Layer 2/Box 2'),
(90, 3, 16, 89, 'Folder 1', 'folder', 10, 'Lab 4/Cabinet A/Layer 2/Box 2/Folder 1'),
(91, 3, 16, 89, 'Folder 2', 'folder', 10, 'Lab 4/Cabinet A/Layer 2/Box 2/Folder 2'),
(92, 3, 16, 76, 'Cabinet B', 'cabinet', 100, 'Lab 4/Cabinet B'),
(93, 3, 16, 92, 'Layer 1', 'layer', 50, 'Lab 4/Cabinet B/Layer 1'),
(94, 3, 16, 93, 'Box 1', 'box', 25, 'Lab 4/Cabinet B/Layer 1/Box 1'),
(95, 3, 16, 94, 'Folder 1', 'folder', 10, 'Lab 4/Cabinet B/Layer 1/Box 1/Folder 1'),
(96, 3, 16, 94, 'Folder 2', 'folder', 10, 'Lab 4/Cabinet B/Layer 1/Box 1/Folder 2'),
(97, 3, 16, 93, 'Box 2', 'box', 25, 'Lab 4/Cabinet B/Layer 1/Box 2'),
(98, 3, 16, 97, 'Folder 1', 'folder', 10, 'Lab 4/Cabinet B/Layer 1/Box 2/Folder 1'),
(99, 3, 16, 97, 'Folder 2', 'folder', 10, 'Lab 4/Cabinet B/Layer 1/Box 2/Folder 2'),
(100, NULL, NULL, NULL, 'User_1', 'folder', 1000, 'User_1'),
(101, NULL, NULL, NULL, 'User_12', 'folder', 1000, 'User_12'),
(102, NULL, NULL, NULL, 'User_14', 'folder', 1000, 'User_14'),
(103, NULL, NULL, NULL, 'User_15', 'folder', 1000, 'User_15'),
(104, NULL, NULL, NULL, 'User_20', 'folder', 1000, 'User_20'),
(105, NULL, NULL, NULL, 'User_23', 'folder', 1000, 'User_23'),
(106, NULL, NULL, NULL, 'User_25', 'folder', 1000, 'User_25'),
(107, NULL, NULL, NULL, 'User_27', 'folder', 1000, 'User_27'),
(108, NULL, NULL, NULL, 'User_28', 'folder', 1000, 'User_28'),
(109, NULL, NULL, NULL, 'User_10', 'folder', 1000, 'User_10'),
(110, NULL, NULL, NULL, 'User_13', 'folder', 1000, 'User_13'),
(111, NULL, NULL, NULL, 'User_21', 'folder', 1000, 'User_21'),
(112, NULL, NULL, NULL, 'User_22', 'folder', 1000, 'User_22'),
(113, NULL, NULL, NULL, 'User_24', 'folder', 1000, 'User_24'),
(115, 3, NULL, NULL, 'R001', 'room', 0, 'R001'),
(116, 3, NULL, 115, 'C001', 'cabinet', 0, 'R001/C001'),
(117, 3, NULL, 116, 'L001', 'layer', 0, 'R001/C001/L001'),
(118, 3, NULL, 117, 'B001', 'box', 0, 'R001/C001/L001/B001'),
(119, 3, NULL, 118, 'F001', 'folder', 100, 'R001/C001/L001/B001/F001');

--
-- Triggers `storage_locations`
--
DELIMITER $$
CREATE TRIGGER `tr_update_full_path` BEFORE INSERT ON `storage_locations` FOR EACH ROW BEGIN
    DECLARE parent_path VARCHAR(512);
    
    -- Sanitize unit_name to prevent invalid characters
    IF NEW.unit_name REGEXP '[/]' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'unit_name cannot contain slashes';
    END IF;
    
    IF NEW.parent_storage_location_id IS NOT NULL THEN
        SELECT full_path INTO parent_path 
        FROM storage_locations 
        WHERE storage_location_id = NEW.parent_storage_location_id
        LIMIT 1;
        SET NEW.full_path = CONCAT(COALESCE(parent_path, ''), '/', NEW.unit_name);
    ELSE
        SET NEW.full_path = NEW.unit_name;
    END IF;
    
    -- Validate path length
    IF LENGTH(NEW.full_path) > 512 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Generated full_path exceeds maximum length of 512 characters';
    END IF;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Table structure for table `text_repository`
--

CREATE TABLE `text_repository` (
  `content_id` int(11) NOT NULL,
  `file_id` int(11) NOT NULL,
  `extracted_text` longtext DEFAULT NULL,
  `page_texts` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'JSON array of text per page',
  `page_count` int(11) DEFAULT 0,
  `ocr_attempts` int(11) DEFAULT 0,
  `ocr_status` enum('pending','processing','completed','failed') DEFAULT 'pending',
  `error_message` text DEFAULT NULL,
  `ocr_engine` varchar(50) DEFAULT 'tesseract',
  `extraction_date` datetime DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `last_processed` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `text_repository`
--

INSERT INTO `text_repository` (`content_id`, `file_id`, `extracted_text`, `page_texts`, `page_count`, `ocr_attempts`, `ocr_status`, `error_message`, `ocr_engine`, `extraction_date`, `last_processed`) VALUES
(35, 230, 'REPUBLIC OF THE PHILIPPINES\n\nDEPARTMENT OF TRANSPORTATION\nLAND TRANSPORTATION OFFICE\n\n‘STUDENT-DRIVER\'S PERMIT\n\nava aa NEY BLO\nsara) tee easement at\nPe « ooawre be a7\n\n{AT RIZAL ST, POBLACION SUR, MAYANTOC,\n\nema mente Ay Cae\nC3ERsazou0 aonajou/or C30\n\"  BIAGK’ WiLL NOT DONATE ANY ORGAN\n\nName: UNEYUANO ADRUANNE FUVERA\n[Adavens POO. SUR. MAYANTOC, TARLAC\net no ones2e3e2a3\n\n', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 08:49:58', '2025-08-29 08:49:58'),
(37, 230, 'REPUBLIC OF THE PHILIPPINES\n\nDEPARTMENT OF TRANSPORTATION\nLAND TRANSPORTATION OFFICE\n\n‘STUDENT-DRIVER\'S PERMIT\n\nava aa NEY BLO\nsara) tee easement at\nPe « ooawre be a7\n\n{AT RIZAL ST, POBLACION SUR, MAYANTOC,\n\nema mente Ay Cae\nC3ERsazou0 aonajou/or C30\n\"  BIAGK’ WiLL NOT DONATE ANY ORGAN\n\nName: UNEYUANO ADRUANNE FUVERA\n[Adavens POO. SUR. MAYANTOC, TARLAC\net no ones2e3e2a3\n\n', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 08:49:58', '2025-08-29 08:49:58'),
(38, 231, 'Unit I: Introduction to Web Systems \nHistory and Evolution of the Web \n• 1960s: Establishment of ARPANET, the foundation of the internet. \n• 1989: Tim Berners-Lee develops HTML and proposes the World Wide Web. \n• Early 1990s: Development of the first web browsers (like Mosaic) and servers. \n• Late 1990s - Early 2000s: The dot-com boom, rise of e-commerce. \n• 2010s: The mobile revolution and growth of social media. \nInternet Protocols and Web Architecture \n• TCP/IP: Fundamental protocols for communication on the internet. \n• HTTP: Protocol for transferring web pages and other data. \n• DNS: Translates domain names into IP addresses. \n• FTP: Protocol for file transfer. \nWeb Architecture \n• Client-server model: Browsers (clients) request content from servers. \n• Web server software like Apache handles requests and sends responses. \n \nWeb Browsers and Web Servers \nWeb Browsers \n• Applications used to access and display web content (e.g., Google Chrome, Mozilla \nFirefox, Safari). \nWeb Servers \n• Systems that host websites and provide content to clients (users) through the internet. \n \nRoles and Responsibilities of Web Developers \n• Front-end Developers: Focus on the design and layout using HTML, CSS, JavaScript. \n• Back-end Developers: Work on server-side operations using PHP, Python, Ruby, or \nJava. \n• Full-stack Developers: Handle both front-end and back-end development. \n• UI/UX Designers: Create user-friendly and visually appealing interfaces.\n\nWeb Development Technologies \n• HTML: Defines the structure and content of web pages. \n• CSS: Styles HTML elements, controlling layout and design. \n• JavaScript: Adds interactivity and dynamic features to web pages. \n• Bootstrap: Framework for building responsive websites with pre-designed components. \n \nHTTP Methods and Status Codes \n• GET: Retrieve data from the server. \n• POST: Send data to the server. \n• PUT: Update existing data. \n• DELETE: Remove data from the server. \nCommon Status Codes \n• 200 OK: Request was successful. \n• 404 Not Found: Requested resource was not found. \n• 500 Internal Server Error: The server encountered an error. \n• 403 Forbidden: The server refuses to authorize the request. \n \nWeb Development Life Cycle (WDLC) \n1. Project Planning and Requirements Gathering \no Define project goals, identify the audience, determine scope and timeline. \n2. Web Design and User Experience \no Create wireframes and mockups, design visual elements, ensure responsiveness. \n3. Web Development Process \no Implement features, test for functionality, optimize performance.', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 08:51:48', '2025-08-29 08:51:48'),
(39, 231, 'Unit I: Introduction to Web Systems \nHistory and Evolution of the Web \n• 1960s: Establishment of ARPANET, the foundation of the internet. \n• 1989: Tim Berners-Lee develops HTML and proposes the World Wide Web. \n• Early 1990s: Development of the first web browsers (like Mosaic) and servers. \n• Late 1990s - Early 2000s: The dot-com boom, rise of e-commerce. \n• 2010s: The mobile revolution and growth of social media. \nInternet Protocols and Web Architecture \n• TCP/IP: Fundamental protocols for communication on the internet. \n• HTTP: Protocol for transferring web pages and other data. \n• DNS: Translates domain names into IP addresses. \n• FTP: Protocol for file transfer. \nWeb Architecture \n• Client-server model: Browsers (clients) request content from servers. \n• Web server software like Apache handles requests and sends responses. \n \nWeb Browsers and Web Servers \nWeb Browsers \n• Applications used to access and display web content (e.g., Google Chrome, Mozilla \nFirefox, Safari). \nWeb Servers \n• Systems that host websites and provide content to clients (users) through the internet. \n \nRoles and Responsibilities of Web Developers \n• Front-end Developers: Focus on the design and layout using HTML, CSS, JavaScript. \n• Back-end Developers: Work on server-side operations using PHP, Python, Ruby, or \nJava. \n• Full-stack Developers: Handle both front-end and back-end development. \n• UI/UX Designers: Create user-friendly and visually appealing interfaces.\n\nWeb Development Technologies \n• HTML: Defines the structure and content of web pages. \n• CSS: Styles HTML elements, controlling layout and design. \n• JavaScript: Adds interactivity and dynamic features to web pages. \n• Bootstrap: Framework for building responsive websites with pre-designed components. \n \nHTTP Methods and Status Codes \n• GET: Retrieve data from the server. \n• POST: Send data to the server. \n• PUT: Update existing data. \n• DELETE: Remove data from the server. \nCommon Status Codes \n• 200 OK: Request was successful. \n• 404 Not Found: Requested resource was not found. \n• 500 Internal Server Error: The server encountered an error. \n• 403 Forbidden: The server refuses to authorize the request. \n \nWeb Development Life Cycle (WDLC) \n1. Project Planning and Requirements Gathering \no Define project goals, identify the audience, determine scope and timeline. \n2. Web Design and User Experience \no Create wireframes and mockups, design visual elements, ensure responsiveness. \n3. Web Development Process \no Implement features, test for functionality, optimize performance.', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 08:51:48', '2025-08-29 08:51:48'),
(40, 232, 'BASIC LINUX COMMANDS \n \n1. pwd - Print Working Directory \n- Description: Displays the current directory \npath. \n \n2. cd - Change Directory \n- Description: Moves to a specified directory. \n- Usage: `cd [directory_name]` \n \n3. ls - List Directory Contents \n- Description: Lists files and directories in the \ncurrent directory. \n     - Options: \n       - `-l`: Long listing format \n       - `-a`: Include hidden files \n       - `-h`: Human-readable file sizes \n \n4. mkdir - Make Directory \n- Description: Creates a new directory. \n- Usage: `mkdir [directory_name]` \n  \n5. rmdir- Remove Directory \n- Description: Deletes an empty directory. \n- Usage: `rmdir [directory_name]` \n  \n6. touch - Create Empty File \n- Description: Creates a new empty file. \n- Usage: `touch [file_name]` \n  \n7. cp- Copy \n- Description: Copies files or directories. \n- Usage: `cp [source] [destination]` \n- Options: \n       - `-r`: Recursive (for directories) \n \n8. mv - Move \n   - Description: Moves or renames files or \ndirectories. \n     - Usage: `mv [source] [destination]` \n  \n9. rm - Remove \n   - Description: Deletes files or directories. \n     - Usage: `rm [file_or_directory]` \n     - Options: \n       - `-r`: Recursive (for directories) \n       - `-f`: Force (no prompt) \n \n10. cat - Concatenate and Display File \n- Description: Displays content of a file or \nconcatenates multiple files. \n- Usage: `cat [file_name]`\n\n11. head - Display First Lines of a File \n    - Description: Displays the first few lines of a \nfile. \n      - Usage: `head [file_name]` \n  \n12. tail - Display Last Lines of a File \n    - Description: Displays the last few lines of a \nfile. \n- Usage: `tail [file_name]` \n- Options: \n- `-f`: Follow (updates as file changes) \n \n13. grep - Search Text \n- Description: Searches for a pattern in files. \n- Usage: `grep [pattern] [file_name]` \n- Options: \n        - `-i`: Ignore case \n        - `-r`: Recursive search \n \n14. chmod - Change File Permissions \n- Description: Changes the permissions of a file \nor directory. \n- Usage: `chmod [permissions] \n[file_or_directory]` \n- Example: `chmod +x script.sh` (adds execute \npermission) \n \n \n \n \n15. chown - Change Ownership \n- Description: Changes the owner of a file or \ndirectory. \n- Usage: `chown [new_owner] \n[file_or_directory]` \n  \n16. tar - Tape Archive \n- Description: Creates or extracts tar archives. \n- Usage: `tar -cvf archive.tar [files]` (create) \n- Usage: `tar -xvf archive.tar` (extract) \n17. wget - Download Files from the Web \n- Description: Downloads files from a specified \nURL. \n- Usage: `wget [URL]` \n \n18. man - Manual Pages \n- Description: Displays the manual pages for \ncommands. \n- Usage: `man [command_name]`', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 09:12:44', '2025-08-29 09:12:44'),
(41, 232, 'BASIC LINUX COMMANDS \n \n1. pwd - Print Working Directory \n- Description: Displays the current directory \npath. \n \n2. cd - Change Directory \n- Description: Moves to a specified directory. \n- Usage: `cd [directory_name]` \n \n3. ls - List Directory Contents \n- Description: Lists files and directories in the \ncurrent directory. \n     - Options: \n       - `-l`: Long listing format \n       - `-a`: Include hidden files \n       - `-h`: Human-readable file sizes \n \n4. mkdir - Make Directory \n- Description: Creates a new directory. \n- Usage: `mkdir [directory_name]` \n  \n5. rmdir- Remove Directory \n- Description: Deletes an empty directory. \n- Usage: `rmdir [directory_name]` \n  \n6. touch - Create Empty File \n- Description: Creates a new empty file. \n- Usage: `touch [file_name]` \n  \n7. cp- Copy \n- Description: Copies files or directories. \n- Usage: `cp [source] [destination]` \n- Options: \n       - `-r`: Recursive (for directories) \n \n8. mv - Move \n   - Description: Moves or renames files or \ndirectories. \n     - Usage: `mv [source] [destination]` \n  \n9. rm - Remove \n   - Description: Deletes files or directories. \n     - Usage: `rm [file_or_directory]` \n     - Options: \n       - `-r`: Recursive (for directories) \n       - `-f`: Force (no prompt) \n \n10. cat - Concatenate and Display File \n- Description: Displays content of a file or \nconcatenates multiple files. \n- Usage: `cat [file_name]`\n\n11. head - Display First Lines of a File \n    - Description: Displays the first few lines of a \nfile. \n      - Usage: `head [file_name]` \n  \n12. tail - Display Last Lines of a File \n    - Description: Displays the last few lines of a \nfile. \n- Usage: `tail [file_name]` \n- Options: \n- `-f`: Follow (updates as file changes) \n \n13. grep - Search Text \n- Description: Searches for a pattern in files. \n- Usage: `grep [pattern] [file_name]` \n- Options: \n        - `-i`: Ignore case \n        - `-r`: Recursive search \n \n14. chmod - Change File Permissions \n- Description: Changes the permissions of a file \nor directory. \n- Usage: `chmod [permissions] \n[file_or_directory]` \n- Example: `chmod +x script.sh` (adds execute \npermission) \n \n \n \n \n15. chown - Change Ownership \n- Description: Changes the owner of a file or \ndirectory. \n- Usage: `chown [new_owner] \n[file_or_directory]` \n  \n16. tar - Tape Archive \n- Description: Creates or extracts tar archives. \n- Usage: `tar -cvf archive.tar [files]` (create) \n- Usage: `tar -xvf archive.tar` (extract) \n17. wget - Download Files from the Web \n- Description: Downloads files from a specified \nURL. \n- Usage: `wget [URL]` \n \n18. man - Manual Pages \n- Description: Displays the manual pages for \ncommands. \n- Usage: `man [command_name]`', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 09:12:44', '2025-08-29 09:12:44'),
(56, 245, '', NULL, 0, 0, 'pending', NULL, 'tesseract', '2025-08-29 11:24:23', NULL),
(57, 246, 'Introduction to the Web \nDevelopment Life Cycle\n\nTopic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process\n\n•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering.\n\n•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline.\n\n•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines.\n\n•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs.\n\n•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups.\n\n•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate.\n\n1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite\n\n•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas.\n\nwireframe\n\n•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look.\n\n2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices.\n\n•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements.\n\n•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 11:31:07', '2025-08-29 11:31:07'),
(58, 246, 'Introduction to the Web \nDevelopment Life Cycle\n\nTopic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process\n\n•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering.\n\n•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline.\n\n•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines.\n\n•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs.\n\n•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups.\n\n•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate.\n\n1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite\n\n•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas.\n\nwireframe\n\n•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look.\n\n2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices.\n\n•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements.\n\n•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 11:31:07', '2025-08-29 11:31:07'),
(60, 248, '', NULL, 0, 0, 'pending', NULL, 'tesseract', '2025-08-29 12:03:50', NULL),
(61, 249, 'Reviewer 1: (INTRODUCTION TO SIA) \n \nSystem Overview: \nDefinition:  \nA system is a set of interconnected components working together to achieve a common goal. \nImportance:  \nCrucial for understanding integration and architecture in IT systems. \n \nSystem Characteristics:( I. D. P. O) \n• Interconnected Components: Components depend on each other. \n• Defined Boundaries: Clear separation from the environment. \n• Purpose: Specific goal or objective. \n• Inputs & Outputs: Systems take inputs, process them, and generate outputs. \n \nTypes of Systems:(P. A. O. C) \n• Physical Systems: Hardware, networking infrastructure. \n• Abstract Systems: Software applications, data models. \n• Open Systems: Interacts with external environments (e.g., web services). \n• Closed Systems: Isolated from external influences (e.g., standalone applications). \n \nIT Systems:(C. I. E) \n• Computer Systems: Hardware, software, and networks. \n• Information Systems: Manages and processes data. \n• Embedded Systems: Systems within other devices (e.g., IoT). \n \nTypes of Integration:(V. H. S. C) \n1. Vertical Integration: Connects different levels of IT architecture within an organization. \nExample: Automotive industry (from raw material to retail). \n2. Horizontal Integration: Links systems operating at the same level. \nExample: ERP system integration across different departments. \n3. Star Integration: Uses a central hub to integrate systems. \nExample: CRM as a central hub for multiple systems. \n4. Common Data Format (CDF): Standardizes data exchange between systems. \nExample: Healthcare systems using HL7 standards. \n \nBenefits of System Integration: (E. I. R.) \n• Enhances efficiency. \n• Improves communication and data sharing. \n• Reduces redundancy. \nChallenges:(C. L. S. C. H. M.) \n• Compatibility issues. \n•  Lack of Standardization \n• Security risks. \n• Cultural and Organizational Differences \n• High Costs and Resource Allocation \n•  Maintenance and Scalability Issues\n\nMultiple Choice: \n \n1. Which of the following best defines a system? \na. A collection of hardware components \nb.  A set of interconnected components working to achieve a goal \nc. A group of isolated processes \nd. An independent unit that functions alone \n2. What is the main purpose of system integration?  \na. To create isolated systems \nb. To improve communication and efficiency between different systems \nc. To decrease the number of components \nd. To increase redundancy in data processing \n3. What type of system interacts with external environments?  \na. Closed system \nb. Abstract system \nc. Open system \nd. Physical system \n4. Which type of integration uses a central hub to connect systems? \na. Vertical integration \nb. Horizontal integration \nc. Star integration \nd. Common Data Format (CDF) integration \n5. Which IT system primarily manages and processes data?  \na. Computer system \nb. Information system \nc. Embedded system \nd. Data network \n \nIdentification: \n1. A system that does not interact with external environments is called a ____________. \n2. The type of system integration that consolidates systems at the same level of IT architecture is called \n____________. \n3. ____________ refers to the communication pathways that connect system components. \n4. The method of standardizing data exchange between systems using universal data formats is called \n____________. \n5. A ____________ system is embedded within other devices and specializes in specific functions. \n \nModified True or False: \n1. True or False: Vertical integration links systems operating at the same level of the IT architecture. \n• If false, modify: Vertical integration links systems at different levels of IT architecture. \n2. True or False: A physical system includes software applications and data models. \n• If false, modify: A physical system includes hardware and networking infrastructure. \n3. True or False: Common Data Format (CDF) integration helps in improving data consistency across systems. \n• If false, modify: CDF integration standardizes data for interoperability and data consistency. \n4. True or False: Embedded systems are designed to manage and process large amounts of data.\n\n• If false, modify: Embedded systems are specialized systems within devices. \n5. True or False: Open systems are isolated from external influences. \n• If false, modify: Closed systems are isolated from external influences. \n \n \nEnumeration: \n \n1. Enumerate the characteristics of a system (4 items): \n• Interconnected Components \n• Defined Boundaries \n• Purpose (Objective) \n• Inputs and Outputs \n \n2. List the types of IT systems (3 items): \n• Computer Systems \n• Information Systems \n• Embedded Systems \n \n3. Enumerate the challenges in system integration (6 items): \n• Compatibility issues \n• Lack of standardization \n• Security risks \n• Cultural and organizational differences \n• High costs and resource allocation \n• Maintenance and scalability issues \n \n4. List the benefits of system integration (3 items): \n• Enhanced operational efficiency \n• Improved communication and data sharing \n• Reduced redundancy and increased performance \n \n5. Enumerate the components of an IT system (4 items): \n• Hardware \n• Software \n• Data \n• Network', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 12:06:47', '2025-08-29 12:06:47'),
(62, 249, 'Reviewer 1: (INTRODUCTION TO SIA) \n \nSystem Overview: \nDefinition:  \nA system is a set of interconnected components working together to achieve a common goal. \nImportance:  \nCrucial for understanding integration and architecture in IT systems. \n \nSystem Characteristics:( I. D. P. O) \n• Interconnected Components: Components depend on each other. \n• Defined Boundaries: Clear separation from the environment. \n• Purpose: Specific goal or objective. \n• Inputs & Outputs: Systems take inputs, process them, and generate outputs. \n \nTypes of Systems:(P. A. O. C) \n• Physical Systems: Hardware, networking infrastructure. \n• Abstract Systems: Software applications, data models. \n• Open Systems: Interacts with external environments (e.g., web services). \n• Closed Systems: Isolated from external influences (e.g., standalone applications). \n \nIT Systems:(C. I. E) \n• Computer Systems: Hardware, software, and networks. \n• Information Systems: Manages and processes data. \n• Embedded Systems: Systems within other devices (e.g., IoT). \n \nTypes of Integration:(V. H. S. C) \n1. Vertical Integration: Connects different levels of IT architecture within an organization. \nExample: Automotive industry (from raw material to retail). \n2. Horizontal Integration: Links systems operating at the same level. \nExample: ERP system integration across different departments. \n3. Star Integration: Uses a central hub to integrate systems. \nExample: CRM as a central hub for multiple systems. \n4. Common Data Format (CDF): Standardizes data exchange between systems. \nExample: Healthcare systems using HL7 standards. \n \nBenefits of System Integration: (E. I. R.) \n• Enhances efficiency. \n• Improves communication and data sharing. \n• Reduces redundancy. \nChallenges:(C. L. S. C. H. M.) \n• Compatibility issues. \n•  Lack of Standardization \n• Security risks. \n• Cultural and Organizational Differences \n• High Costs and Resource Allocation \n•  Maintenance and Scalability Issues\n\nMultiple Choice: \n \n1. Which of the following best defines a system? \na. A collection of hardware components \nb.  A set of interconnected components working to achieve a goal \nc. A group of isolated processes \nd. An independent unit that functions alone \n2. What is the main purpose of system integration?  \na. To create isolated systems \nb. To improve communication and efficiency between different systems \nc. To decrease the number of components \nd. To increase redundancy in data processing \n3. What type of system interacts with external environments?  \na. Closed system \nb. Abstract system \nc. Open system \nd. Physical system \n4. Which type of integration uses a central hub to connect systems? \na. Vertical integration \nb. Horizontal integration \nc. Star integration \nd. Common Data Format (CDF) integration \n5. Which IT system primarily manages and processes data?  \na. Computer system \nb. Information system \nc. Embedded system \nd. Data network \n \nIdentification: \n1. A system that does not interact with external environments is called a ____________. \n2. The type of system integration that consolidates systems at the same level of IT architecture is called \n____________. \n3. ____________ refers to the communication pathways that connect system components. \n4. The method of standardizing data exchange between systems using universal data formats is called \n____________. \n5. A ____________ system is embedded within other devices and specializes in specific functions. \n \nModified True or False: \n1. True or False: Vertical integration links systems operating at the same level of the IT architecture. \n• If false, modify: Vertical integration links systems at different levels of IT architecture. \n2. True or False: A physical system includes software applications and data models. \n• If false, modify: A physical system includes hardware and networking infrastructure. \n3. True or False: Common Data Format (CDF) integration helps in improving data consistency across systems. \n• If false, modify: CDF integration standardizes data for interoperability and data consistency. \n4. True or False: Embedded systems are designed to manage and process large amounts of data.\n\n• If false, modify: Embedded systems are specialized systems within devices. \n5. True or False: Open systems are isolated from external influences. \n• If false, modify: Closed systems are isolated from external influences. \n \n \nEnumeration: \n \n1. Enumerate the characteristics of a system (4 items): \n• Interconnected Components \n• Defined Boundaries \n• Purpose (Objective) \n• Inputs and Outputs \n \n2. List the types of IT systems (3 items): \n• Computer Systems \n• Information Systems \n• Embedded Systems \n \n3. Enumerate the challenges in system integration (6 items): \n• Compatibility issues \n• Lack of standardization \n• Security risks \n• Cultural and organizational differences \n• High costs and resource allocation \n• Maintenance and scalability issues \n \n4. List the benefits of system integration (3 items): \n• Enhanced operational efficiency \n• Improved communication and data sharing \n• Reduced redundancy and increased performance \n \n5. Enumerate the components of an IT system (4 items): \n• Hardware \n• Software \n• Data \n• Network', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 12:06:47', '2025-08-29 12:06:47'),
(63, 250, 'Reviewer 1: (INTRODUCTION TO SIA) \n \nSystem Overview: \nDefinition:  \nA system is a set of interconnected components working together to achieve a common goal. \nImportance:  \nCrucial for understanding integration and architecture in IT systems. \n \nSystem Characteristics:( I. D. P. O) \n• Interconnected Components: Components depend on each other. \n• Defined Boundaries: Clear separation from the environment. \n• Purpose: Specific goal or objective. \n• Inputs & Outputs: Systems take inputs, process them, and generate outputs. \n \nTypes of Systems:(P. A. O. C) \n• Physical Systems: Hardware, networking infrastructure. \n• Abstract Systems: Software applications, data models. \n• Open Systems: Interacts with external environments (e.g., web services). \n• Closed Systems: Isolated from external influences (e.g., standalone applications). \n \nIT Systems:(C. I. E) \n• Computer Systems: Hardware, software, and networks. \n• Information Systems: Manages and processes data. \n• Embedded Systems: Systems within other devices (e.g., IoT). \n \nTypes of Integration:(V. H. S. C) \n1. Vertical Integration: Connects different levels of IT architecture within an organization. \nExample: Automotive industry (from raw material to retail). \n2. Horizontal Integration: Links systems operating at the same level. \nExample: ERP system integration across different departments. \n3. Star Integration: Uses a central hub to integrate systems. \nExample: CRM as a central hub for multiple systems. \n4. Common Data Format (CDF): Standardizes data exchange between systems. \nExample: Healthcare systems using HL7 standards. \n \nBenefits of System Integration: (E. I. R.) \n• Enhances efficiency. \n• Improves communication and data sharing. \n• Reduces redundancy. \nChallenges:(C. L. S. C. H. M.) \n• Compatibility issues. \n•  Lack of Standardization \n• Security risks. \n• Cultural and Organizational Differences \n• High Costs and Resource Allocation \n•  Maintenance and Scalability Issues\n\nMultiple Choice: \n \n1. Which of the following best defines a system? \na. A collection of hardware components \nb.  A set of interconnected components working to achieve a goal \nc. A group of isolated processes \nd. An independent unit that functions alone \n2. What is the main purpose of system integration?  \na. To create isolated systems \nb. To improve communication and efficiency between different systems \nc. To decrease the number of components \nd. To increase redundancy in data processing \n3. What type of system interacts with external environments?  \na. Closed system \nb. Abstract system \nc. Open system \nd. Physical system \n4. Which type of integration uses a central hub to connect systems? \na. Vertical integration \nb. Horizontal integration \nc. Star integration \nd. Common Data Format (CDF) integration \n5. Which IT system primarily manages and processes data?  \na. Computer system \nb. Information system \nc. Embedded system \nd. Data network \n \nIdentification: \n1. A system that does not interact with external environments is called a ____________. \n2. The type of system integration that consolidates systems at the same level of IT architecture is called \n____________. \n3. ____________ refers to the communication pathways that connect system components. \n4. The method of standardizing data exchange between systems using universal data formats is called \n____________. \n5. A ____________ system is embedded within other devices and specializes in specific functions. \n \nModified True or False: \n1. True or False: Vertical integration links systems operating at the same level of the IT architecture. \n• If false, modify: Vertical integration links systems at different levels of IT architecture. \n2. True or False: A physical system includes software applications and data models. \n• If false, modify: A physical system includes hardware and networking infrastructure. \n3. True or False: Common Data Format (CDF) integration helps in improving data consistency across systems. \n• If false, modify: CDF integration standardizes data for interoperability and data consistency. \n4. True or False: Embedded systems are designed to manage and process large amounts of data.\n\n• If false, modify: Embedded systems are specialized systems within devices. \n5. True or False: Open systems are isolated from external influences. \n• If false, modify: Closed systems are isolated from external influences. \n \n \nEnumeration: \n \n1. Enumerate the characteristics of a system (4 items): \n• Interconnected Components \n• Defined Boundaries \n• Purpose (Objective) \n• Inputs and Outputs \n \n2. List the types of IT systems (3 items): \n• Computer Systems \n• Information Systems \n• Embedded Systems \n \n3. Enumerate the challenges in system integration (6 items): \n• Compatibility issues \n• Lack of standardization \n• Security risks \n• Cultural and organizational differences \n• High costs and resource allocation \n• Maintenance and scalability issues \n \n4. List the benefits of system integration (3 items): \n• Enhanced operational efficiency \n• Improved communication and data sharing \n• Reduced redundancy and increased performance \n \n5. Enumerate the components of an IT system (4 items): \n• Hardware \n• Software \n• Data \n• Network', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 12:08:21', '2025-08-29 12:08:21'),
(64, 250, 'Reviewer 1: (INTRODUCTION TO SIA) \n \nSystem Overview: \nDefinition:  \nA system is a set of interconnected components working together to achieve a common goal. \nImportance:  \nCrucial for understanding integration and architecture in IT systems. \n \nSystem Characteristics:( I. D. P. O) \n• Interconnected Components: Components depend on each other. \n• Defined Boundaries: Clear separation from the environment. \n• Purpose: Specific goal or objective. \n• Inputs & Outputs: Systems take inputs, process them, and generate outputs. \n \nTypes of Systems:(P. A. O. C) \n• Physical Systems: Hardware, networking infrastructure. \n• Abstract Systems: Software applications, data models. \n• Open Systems: Interacts with external environments (e.g., web services). \n• Closed Systems: Isolated from external influences (e.g., standalone applications). \n \nIT Systems:(C. I. E) \n• Computer Systems: Hardware, software, and networks. \n• Information Systems: Manages and processes data. \n• Embedded Systems: Systems within other devices (e.g., IoT). \n \nTypes of Integration:(V. H. S. C) \n1. Vertical Integration: Connects different levels of IT architecture within an organization. \nExample: Automotive industry (from raw material to retail). \n2. Horizontal Integration: Links systems operating at the same level. \nExample: ERP system integration across different departments. \n3. Star Integration: Uses a central hub to integrate systems. \nExample: CRM as a central hub for multiple systems. \n4. Common Data Format (CDF): Standardizes data exchange between systems. \nExample: Healthcare systems using HL7 standards. \n \nBenefits of System Integration: (E. I. R.) \n• Enhances efficiency. \n• Improves communication and data sharing. \n• Reduces redundancy. \nChallenges:(C. L. S. C. H. M.) \n• Compatibility issues. \n•  Lack of Standardization \n• Security risks. \n• Cultural and Organizational Differences \n• High Costs and Resource Allocation \n•  Maintenance and Scalability Issues\n\nMultiple Choice: \n \n1. Which of the following best defines a system? \na. A collection of hardware components \nb.  A set of interconnected components working to achieve a goal \nc. A group of isolated processes \nd. An independent unit that functions alone \n2. What is the main purpose of system integration?  \na. To create isolated systems \nb. To improve communication and efficiency between different systems \nc. To decrease the number of components \nd. To increase redundancy in data processing \n3. What type of system interacts with external environments?  \na. Closed system \nb. Abstract system \nc. Open system \nd. Physical system \n4. Which type of integration uses a central hub to connect systems? \na. Vertical integration \nb. Horizontal integration \nc. Star integration \nd. Common Data Format (CDF) integration \n5. Which IT system primarily manages and processes data?  \na. Computer system \nb. Information system \nc. Embedded system \nd. Data network \n \nIdentification: \n1. A system that does not interact with external environments is called a ____________. \n2. The type of system integration that consolidates systems at the same level of IT architecture is called \n____________. \n3. ____________ refers to the communication pathways that connect system components. \n4. The method of standardizing data exchange between systems using universal data formats is called \n____________. \n5. A ____________ system is embedded within other devices and specializes in specific functions. \n \nModified True or False: \n1. True or False: Vertical integration links systems operating at the same level of the IT architecture. \n• If false, modify: Vertical integration links systems at different levels of IT architecture. \n2. True or False: A physical system includes software applications and data models. \n• If false, modify: A physical system includes hardware and networking infrastructure. \n3. True or False: Common Data Format (CDF) integration helps in improving data consistency across systems. \n• If false, modify: CDF integration standardizes data for interoperability and data consistency. \n4. True or False: Embedded systems are designed to manage and process large amounts of data.\n\n• If false, modify: Embedded systems are specialized systems within devices. \n5. True or False: Open systems are isolated from external influences. \n• If false, modify: Closed systems are isolated from external influences. \n \n \nEnumeration: \n \n1. Enumerate the characteristics of a system (4 items): \n• Interconnected Components \n• Defined Boundaries \n• Purpose (Objective) \n• Inputs and Outputs \n \n2. List the types of IT systems (3 items): \n• Computer Systems \n• Information Systems \n• Embedded Systems \n \n3. Enumerate the challenges in system integration (6 items): \n• Compatibility issues \n• Lack of standardization \n• Security risks \n• Cultural and organizational differences \n• High costs and resource allocation \n• Maintenance and scalability issues \n \n4. List the benefits of system integration (3 items): \n• Enhanced operational efficiency \n• Improved communication and data sharing \n• Reduced redundancy and increased performance \n \n5. Enumerate the components of an IT system (4 items): \n• Hardware \n• Software \n• Data \n• Network', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 12:08:21', '2025-08-29 12:08:21');
INSERT INTO `text_repository` (`content_id`, `file_id`, `extracted_text`, `page_texts`, `page_count`, `ocr_attempts`, `ocr_status`, `error_message`, `ocr_engine`, `extraction_date`, `last_processed`) VALUES
(65, 251, 'Unit I\nIntroduction to Web Systems\n\nTopic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers\n\n•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web\n\n1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web\n\nEarly\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP).\n\nLate 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web.\n\nInternet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork.\n\nThis is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols\n\nA system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols\n\nWeb architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client.\n\nWeb Browsers and \nWeb Servers\n\nWeb browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge\n\nWeb servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache\n\nKey components of \na web server\n\nWeb server software\nThe software that handles \nincoming requests and sends out \nresponses\n\nWeb content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages.\n\nDatabase (optional)\nA database may be used to store \nand retrieve dynamic content.\n\nActivity\nWeb History Timeline\n\nAssign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s).\n\nResearch\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included.\n\nWeb \nDevelopment\n\nTopic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies\n\n•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers\n\n•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript\n\n•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java.\n\nFull-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite.\n\nUI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs.\n\nUX designer\nuser experience\n\nCreates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography.\n\n•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.\n\n•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service\n\nWeb development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies\n\n•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page.\n\nUsed to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting.\n\nA programming language that adds \ninteractivity and dynamic features to \nweb pages.\n\nA popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites.\n\nActivity\nWebsite/Web \nApplication Critique\n\nInstructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website.\n\n2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience?\n\n4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens?\n\nStep 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website.\n\nIntroduction to the Web \nDevelopment Life Cycle\n\nTopic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process\n\n•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering.\n\n•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline.\n\n•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines.\n\n•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs.\n\n•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups.\n\n•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate.\n\n1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite\n\n•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas.\n\nwireframe\n\n•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look.\n\n2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices.\n\n•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements.\n\n•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience\n\nCOMMON \nMETHODS INCLUDE\n\nCOMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE\n\nGET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPOST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation\n\nDELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account\n\nSTATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST\n\nEXAMPLE STATUS OF CODE\n\n200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully\n\n404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource\n\n400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data\n\n401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in\n\n403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view\n\n500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request\n\n503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable\n\n302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL\n\n301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent\n\n204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 12:09:33', '2025-08-29 12:09:33'),
(66, 251, 'Unit I\nIntroduction to Web Systems\n\nTopic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers\n\n•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web\n\n1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web\n\nEarly\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP).\n\nLate 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web.\n\nInternet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork.\n\nThis is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols\n\nA system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols\n\nWeb architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client.\n\nWeb Browsers and \nWeb Servers\n\nWeb browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge\n\nWeb servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache\n\nKey components of \na web server\n\nWeb server software\nThe software that handles \nincoming requests and sends out \nresponses\n\nWeb content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages.\n\nDatabase (optional)\nA database may be used to store \nand retrieve dynamic content.\n\nActivity\nWeb History Timeline\n\nAssign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s).\n\nResearch\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included.\n\nWeb \nDevelopment\n\nTopic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies\n\n•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers\n\n•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript\n\n•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java.\n\nFull-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite.\n\nUI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs.\n\nUX designer\nuser experience\n\nCreates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography.\n\n•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.\n\n•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service\n\nWeb development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies\n\n•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page.\n\nUsed to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting.\n\nA programming language that adds \ninteractivity and dynamic features to \nweb pages.\n\nA popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites.\n\nActivity\nWebsite/Web \nApplication Critique\n\nInstructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website.\n\n2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience?\n\n4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens?\n\nStep 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website.\n\nIntroduction to the Web \nDevelopment Life Cycle\n\nTopic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process\n\n•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering.\n\n•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline.\n\n•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines.\n\n•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs.\n\n•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups.\n\n•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate.\n\n1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite\n\n•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas.\n\nwireframe\n\n•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look.\n\n2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices.\n\n•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements.\n\n•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience\n\nCOMMON \nMETHODS INCLUDE\n\nCOMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE\n\nGET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPOST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation\n\nDELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account\n\nSTATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST\n\nEXAMPLE STATUS OF CODE\n\n200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully\n\n404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource\n\n400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data\n\n401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in\n\n403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view\n\n500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request\n\n503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable\n\n302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL\n\n301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent\n\n204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 12:09:33', '2025-08-29 12:09:33'),
(67, 252, 'Unit I\nIntroduction to Web Systems\n\nTopic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers\n\n•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web\n\n1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web\n\nEarly\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP).\n\nLate 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web.\n\nInternet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork.\n\nThis is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols\n\nA system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols\n\nWeb architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client.\n\nWeb Browsers and \nWeb Servers\n\nWeb browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge\n\nWeb servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache\n\nKey components of \na web server\n\nWeb server software\nThe software that handles \nincoming requests and sends out \nresponses\n\nWeb content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages.\n\nDatabase (optional)\nA database may be used to store \nand retrieve dynamic content.\n\nActivity\nWeb History Timeline\n\nAssign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s).\n\nResearch\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included.\n\nWeb \nDevelopment\n\nTopic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies\n\n•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers\n\n•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript\n\n•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java.\n\nFull-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite.\n\nUI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs.\n\nUX designer\nuser experience\n\nCreates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography.\n\n•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.\n\n•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service\n\nWeb development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies\n\n•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page.\n\nUsed to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting.\n\nA programming language that adds \ninteractivity and dynamic features to \nweb pages.\n\nA popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites.\n\nActivity\nWebsite/Web \nApplication Critique\n\nInstructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website.\n\n2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience?\n\n4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens?\n\nStep 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website.\n\nIntroduction to the Web \nDevelopment Life Cycle\n\nTopic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process\n\n•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering.\n\n•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline.\n\n•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines.\n\n•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs.\n\n•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups.\n\n•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate.\n\n1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite\n\n•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas.\n\nwireframe\n\n•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look.\n\n2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices.\n\n•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements.\n\n•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience\n\nCOMMON \nMETHODS INCLUDE\n\nCOMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE\n\nGET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPOST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation\n\nDELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account\n\nSTATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST\n\nEXAMPLE STATUS OF CODE\n\n200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully\n\n404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource\n\n400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data\n\n401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in\n\n403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view\n\n500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request\n\n503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable\n\n302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL\n\n301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent\n\n204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 12:59:22', '2025-08-29 12:59:22');
INSERT INTO `text_repository` (`content_id`, `file_id`, `extracted_text`, `page_texts`, `page_count`, `ocr_attempts`, `ocr_status`, `error_message`, `ocr_engine`, `extraction_date`, `last_processed`) VALUES
(68, 252, 'Unit I\nIntroduction to Web Systems\n\nTopic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers\n\n•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web\n\n1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web\n\nEarly\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP).\n\nLate 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web.\n\nInternet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork.\n\nThis is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols\n\nA system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols\n\nWeb architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client.\n\nWeb Browsers and \nWeb Servers\n\nWeb browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge\n\nWeb servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache\n\nKey components of \na web server\n\nWeb server software\nThe software that handles \nincoming requests and sends out \nresponses\n\nWeb content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages.\n\nDatabase (optional)\nA database may be used to store \nand retrieve dynamic content.\n\nActivity\nWeb History Timeline\n\nAssign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s).\n\nResearch\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included.\n\nWeb \nDevelopment\n\nTopic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies\n\n•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers\n\n•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript\n\n•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java.\n\nFull-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite.\n\nUI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs.\n\nUX designer\nuser experience\n\nCreates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography.\n\n•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.\n\n•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service\n\nWeb development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies\n\n•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page.\n\nUsed to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting.\n\nA programming language that adds \ninteractivity and dynamic features to \nweb pages.\n\nA popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites.\n\nActivity\nWebsite/Web \nApplication Critique\n\nInstructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website.\n\n2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience?\n\n4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens?\n\nStep 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website.\n\nIntroduction to the Web \nDevelopment Life Cycle\n\nTopic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process\n\n•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering.\n\n•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline.\n\n•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines.\n\n•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs.\n\n•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups.\n\n•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate.\n\n1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite\n\n•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas.\n\nwireframe\n\n•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look.\n\n2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices.\n\n•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements.\n\n•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience\n\nCOMMON \nMETHODS INCLUDE\n\nCOMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE\n\nGET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPOST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation\n\nDELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account\n\nSTATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST\n\nEXAMPLE STATUS OF CODE\n\n200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully\n\n404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource\n\n400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data\n\n401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in\n\n403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view\n\n500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request\n\n503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable\n\n302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL\n\n301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent\n\n204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 12:59:22', '2025-08-29 12:59:22'),
(69, 253, 'Unit I\nIntroduction to Web Systems\n\nTopic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers\n\n•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web\n\n1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web\n\nEarly\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP).\n\nLate 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web.\n\nInternet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork.\n\nThis is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols\n\nA system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols\n\nWeb architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client.\n\nWeb Browsers and \nWeb Servers\n\nWeb browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge\n\nWeb servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache\n\nKey components of \na web server\n\nWeb server software\nThe software that handles \nincoming requests and sends out \nresponses\n\nWeb content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages.\n\nDatabase (optional)\nA database may be used to store \nand retrieve dynamic content.\n\nActivity\nWeb History Timeline\n\nAssign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s).\n\nResearch\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included.\n\nWeb \nDevelopment\n\nTopic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies\n\n•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers\n\n•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript\n\n•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java.\n\nFull-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite.\n\nUI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs.\n\nUX designer\nuser experience\n\nCreates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography.\n\n•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.\n\n•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service\n\nWeb development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies\n\n•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page.\n\nUsed to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting.\n\nA programming language that adds \ninteractivity and dynamic features to \nweb pages.\n\nA popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites.\n\nActivity\nWebsite/Web \nApplication Critique\n\nInstructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website.\n\n2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience?\n\n4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens?\n\nStep 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website.\n\nIntroduction to the Web \nDevelopment Life Cycle\n\nTopic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process\n\n•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering.\n\n•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline.\n\n•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines.\n\n•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs.\n\n•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups.\n\n•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate.\n\n1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite\n\n•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas.\n\nwireframe\n\n•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look.\n\n2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices.\n\n•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements.\n\n•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience\n\nCOMMON \nMETHODS INCLUDE\n\nCOMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE\n\nGET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPOST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation\n\nDELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account\n\nSTATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST\n\nEXAMPLE STATUS OF CODE\n\n200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully\n\n404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource\n\n400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data\n\n401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in\n\n403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view\n\n500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request\n\n503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable\n\n302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL\n\n301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent\n\n204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 13:31:16', '2025-08-29 13:31:16'),
(70, 253, 'Unit I\nIntroduction to Web Systems\n\nTopic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers\n\n•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web\n\n1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web\n\nEarly\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP).\n\nLate 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web.\n\nInternet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork.\n\nThis is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols\n\nA system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols\n\nWeb architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client.\n\nWeb Browsers and \nWeb Servers\n\nWeb browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge\n\nWeb servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache\n\nKey components of \na web server\n\nWeb server software\nThe software that handles \nincoming requests and sends out \nresponses\n\nWeb content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages.\n\nDatabase (optional)\nA database may be used to store \nand retrieve dynamic content.\n\nActivity\nWeb History Timeline\n\nAssign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s).\n\nResearch\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included.\n\nWeb \nDevelopment\n\nTopic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies\n\n•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers\n\n•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript\n\n•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java.\n\nFull-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite.\n\nUI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs.\n\nUX designer\nuser experience\n\nCreates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography.\n\n•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.\n\n•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service\n\nWeb development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies\n\n•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page.\n\nUsed to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting.\n\nA programming language that adds \ninteractivity and dynamic features to \nweb pages.\n\nA popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites.\n\nActivity\nWebsite/Web \nApplication Critique\n\nInstructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website.\n\n2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience?\n\n4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens?\n\nStep 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website.\n\nIntroduction to the Web \nDevelopment Life Cycle\n\nTopic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process\n\n•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering.\n\n•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline.\n\n•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines.\n\n•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs.\n\n•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups.\n\n•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate.\n\n1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite\n\n•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas.\n\nwireframe\n\n•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look.\n\n2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices.\n\n•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements.\n\n•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience\n\nCOMMON \nMETHODS INCLUDE\n\nCOMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE\n\nGET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPOST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation\n\nDELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account\n\nSTATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST\n\nEXAMPLE STATUS OF CODE\n\n200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully\n\n404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource\n\n400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data\n\n401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in\n\n403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view\n\n500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request\n\n503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable\n\n302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL\n\n301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent\n\n204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 13:31:16', '2025-08-29 13:31:16');
INSERT INTO `text_repository` (`content_id`, `file_id`, `extracted_text`, `page_texts`, `page_count`, `ocr_attempts`, `ocr_status`, `error_message`, `ocr_engine`, `extraction_date`, `last_processed`) VALUES
(71, 254, 'Unit I\nIntroduction to Web Systems\n\nTopic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers\n\n•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web\n\n1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web\n\nEarly\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP).\n\nLate 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web.\n\nInternet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork.\n\nThis is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols\n\nA system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols\n\nWeb architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client.\n\nWeb Browsers and \nWeb Servers\n\nWeb browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge\n\nWeb servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache\n\nKey components of \na web server\n\nWeb server software\nThe software that handles \nincoming requests and sends out \nresponses\n\nWeb content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages.\n\nDatabase (optional)\nA database may be used to store \nand retrieve dynamic content.\n\nActivity\nWeb History Timeline\n\nAssign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s).\n\nResearch\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included.\n\nWeb \nDevelopment\n\nTopic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies\n\n•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers\n\n•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript\n\n•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java.\n\nFull-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite.\n\nUI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs.\n\nUX designer\nuser experience\n\nCreates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography.\n\n•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.\n\n•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service\n\nWeb development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies\n\n•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page.\n\nUsed to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting.\n\nA programming language that adds \ninteractivity and dynamic features to \nweb pages.\n\nA popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites.\n\nActivity\nWebsite/Web \nApplication Critique\n\nInstructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website.\n\n2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience?\n\n4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens?\n\nStep 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website.\n\nIntroduction to the Web \nDevelopment Life Cycle\n\nTopic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process\n\n•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering.\n\n•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline.\n\n•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines.\n\n•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs.\n\n•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups.\n\n•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate.\n\n1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite\n\n•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas.\n\nwireframe\n\n•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look.\n\n2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices.\n\n•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements.\n\n•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience\n\nCOMMON \nMETHODS INCLUDE\n\nCOMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE\n\nGET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPOST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation\n\nDELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account\n\nSTATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST\n\nEXAMPLE STATUS OF CODE\n\n200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully\n\n404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource\n\n400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data\n\n401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in\n\n403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view\n\n500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request\n\n503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable\n\n302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL\n\n301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent\n\n204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 13:36:20', '2025-08-29 13:36:20'),
(72, 254, 'Unit I\nIntroduction to Web Systems\n\nTopic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers\n\n•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web\n\n1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web\n\nEarly\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP).\n\nLate 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web.\n\nInternet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork.\n\nThis is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols\n\nA system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols\n\nWeb architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client.\n\nWeb Browsers and \nWeb Servers\n\nWeb browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge\n\nWeb servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache\n\nKey components of \na web server\n\nWeb server software\nThe software that handles \nincoming requests and sends out \nresponses\n\nWeb content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages.\n\nDatabase (optional)\nA database may be used to store \nand retrieve dynamic content.\n\nActivity\nWeb History Timeline\n\nAssign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s).\n\nResearch\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included.\n\nWeb \nDevelopment\n\nTopic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies\n\n•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers\n\n•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript\n\n•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java.\n\nFull-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite.\n\nUI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs.\n\nUX designer\nuser experience\n\nCreates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography.\n\n•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.\n\n•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service\n\nWeb development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies\n\n•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page.\n\nUsed to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting.\n\nA programming language that adds \ninteractivity and dynamic features to \nweb pages.\n\nA popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites.\n\nActivity\nWebsite/Web \nApplication Critique\n\nInstructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website.\n\n2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience?\n\n4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens?\n\nStep 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website.\n\nIntroduction to the Web \nDevelopment Life Cycle\n\nTopic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process\n\n•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering.\n\n•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline.\n\n•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines.\n\n•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs.\n\n•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups.\n\n•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate.\n\n1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite\n\n•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas.\n\nwireframe\n\n•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look.\n\n2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices.\n\n•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements.\n\n•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience\n\nCOMMON \nMETHODS INCLUDE\n\nCOMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE\n\nGET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPOST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation\n\nDELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account\n\nSTATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST\n\nEXAMPLE STATUS OF CODE\n\n200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully\n\n404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource\n\n400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data\n\n401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in\n\n403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view\n\n500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request\n\n503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable\n\n302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL\n\n301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent\n\n204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 13:36:20', '2025-08-29 13:36:20'),
(73, 255, 'Unit I\nIntroduction to Web Systems\n\nTopic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers\n\n•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web\n\n1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web\n\nEarly\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP).\n\nLate 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web.\n\nInternet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork.\n\nThis is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols\n\nA system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols\n\nWeb architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client.\n\nWeb Browsers and \nWeb Servers\n\nWeb browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge\n\nWeb servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache\n\nKey components of \na web server\n\nWeb server software\nThe software that handles \nincoming requests and sends out \nresponses\n\nWeb content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages.\n\nDatabase (optional)\nA database may be used to store \nand retrieve dynamic content.\n\nActivity\nWeb History Timeline\n\nAssign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s).\n\nResearch\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included.\n\nWeb \nDevelopment\n\nTopic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies\n\n•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers\n\n•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript\n\n•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java.\n\nFull-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite.\n\nUI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs.\n\nUX designer\nuser experience\n\nCreates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography.\n\n•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.\n\n•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service\n\nWeb development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies\n\n•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page.\n\nUsed to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting.\n\nA programming language that adds \ninteractivity and dynamic features to \nweb pages.\n\nA popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites.\n\nActivity\nWebsite/Web \nApplication Critique\n\nInstructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website.\n\n2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience?\n\n4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens?\n\nStep 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website.\n\nIntroduction to the Web \nDevelopment Life Cycle\n\nTopic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process\n\n•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering.\n\n•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline.\n\n•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines.\n\n•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs.\n\n•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups.\n\n•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate.\n\n1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite\n\n•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas.\n\nwireframe\n\n•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look.\n\n2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices.\n\n•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements.\n\n•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience\n\nCOMMON \nMETHODS INCLUDE\n\nCOMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE\n\nGET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPOST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation\n\nDELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account\n\nSTATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST\n\nEXAMPLE STATUS OF CODE\n\n200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully\n\n404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource\n\n400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data\n\n401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in\n\n403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view\n\n500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request\n\n503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable\n\n302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL\n\n301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent\n\n204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 13:49:00', '2025-08-29 13:49:00');
INSERT INTO `text_repository` (`content_id`, `file_id`, `extracted_text`, `page_texts`, `page_count`, `ocr_attempts`, `ocr_status`, `error_message`, `ocr_engine`, `extraction_date`, `last_processed`) VALUES
(74, 255, 'Unit I\nIntroduction to Web Systems\n\nTopic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers\n\n•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web\n\n1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web\n\nEarly\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP).\n\nLate 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web.\n\nInternet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork.\n\nThis is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols\n\nA system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols\n\nWeb architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client.\n\nWeb Browsers and \nWeb Servers\n\nWeb browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge\n\nWeb servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache\n\nKey components of \na web server\n\nWeb server software\nThe software that handles \nincoming requests and sends out \nresponses\n\nWeb content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages.\n\nDatabase (optional)\nA database may be used to store \nand retrieve dynamic content.\n\nActivity\nWeb History Timeline\n\nAssign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s).\n\nResearch\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included.\n\nWeb \nDevelopment\n\nTopic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies\n\n•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers\n\n•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript\n\n•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java.\n\nFull-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite.\n\nUI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs.\n\nUX designer\nuser experience\n\nCreates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography.\n\n•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.\n\n•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service\n\nWeb development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies\n\n•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page.\n\nUsed to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting.\n\nA programming language that adds \ninteractivity and dynamic features to \nweb pages.\n\nA popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites.\n\nActivity\nWebsite/Web \nApplication Critique\n\nInstructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website.\n\n2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience?\n\n4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens?\n\nStep 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website.\n\nIntroduction to the Web \nDevelopment Life Cycle\n\nTopic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process\n\n•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering.\n\n•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline.\n\n•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines.\n\n•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs.\n\n•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups.\n\n•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate.\n\n1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite\n\n•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas.\n\nwireframe\n\n•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look.\n\n2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices.\n\n•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements.\n\n•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience\n\nCOMMON \nMETHODS INCLUDE\n\nCOMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE\n\nGET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPOST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation\n\nDELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account\n\nSTATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST\n\nEXAMPLE STATUS OF CODE\n\n200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully\n\n404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource\n\n400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data\n\n401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in\n\n403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view\n\n500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request\n\n503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable\n\n302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL\n\n301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent\n\n204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 13:49:00', '2025-08-29 13:49:00'),
(75, 256, 'Unit I\nIntroduction to Web Systems\n\nTopic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers\n\n•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web\n\n1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web\n\nEarly\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP).\n\nLate 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web.\n\nInternet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork.\n\nThis is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols\n\nA system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols\n\nWeb architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client.\n\nWeb Browsers and \nWeb Servers\n\nWeb browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge\n\nWeb servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache\n\nKey components of \na web server\n\nWeb server software\nThe software that handles \nincoming requests and sends out \nresponses\n\nWeb content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages.\n\nDatabase (optional)\nA database may be used to store \nand retrieve dynamic content.\n\nActivity\nWeb History Timeline\n\nAssign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s).\n\nResearch\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included.\n\nWeb \nDevelopment\n\nTopic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies\n\n•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers\n\n•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript\n\n•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java.\n\nFull-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite.\n\nUI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs.\n\nUX designer\nuser experience\n\nCreates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography.\n\n•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.\n\n•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service\n\nWeb development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies\n\n•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page.\n\nUsed to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting.\n\nA programming language that adds \ninteractivity and dynamic features to \nweb pages.\n\nA popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites.\n\nActivity\nWebsite/Web \nApplication Critique\n\nInstructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website.\n\n2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience?\n\n4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens?\n\nStep 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website.\n\nIntroduction to the Web \nDevelopment Life Cycle\n\nTopic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process\n\n•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering.\n\n•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline.\n\n•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines.\n\n•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs.\n\n•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups.\n\n•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate.\n\n1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite\n\n•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas.\n\nwireframe\n\n•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look.\n\n2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices.\n\n•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements.\n\n•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience\n\nCOMMON \nMETHODS INCLUDE\n\nCOMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE\n\nGET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPOST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation\n\nDELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account\n\nSTATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST\n\nEXAMPLE STATUS OF CODE\n\n200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully\n\n404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource\n\n400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data\n\n401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in\n\n403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view\n\n500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request\n\n503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable\n\n302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL\n\n301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent\n\n204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 15:32:14', '2025-08-29 15:32:14'),
(76, 256, 'Unit I\nIntroduction to Web Systems\n\nTopic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers\n\n•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web\n\n1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web\n\nEarly\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP).\n\nLate 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web.\n\nInternet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork.\n\nThis is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols\n\nA system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols\n\nWeb architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client.\n\nWeb Browsers and \nWeb Servers\n\nWeb browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge\n\nWeb servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache\n\nKey components of \na web server\n\nWeb server software\nThe software that handles \nincoming requests and sends out \nresponses\n\nWeb content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages.\n\nDatabase (optional)\nA database may be used to store \nand retrieve dynamic content.\n\nActivity\nWeb History Timeline\n\nAssign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s).\n\nResearch\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included.\n\nWeb \nDevelopment\n\nTopic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies\n\n•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers\n\n•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript\n\n•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java.\n\nFull-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite.\n\nUI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs.\n\nUX designer\nuser experience\n\nCreates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography.\n\n•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.\n\n•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service\n\nWeb development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies\n\n•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page.\n\nUsed to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting.\n\nA programming language that adds \ninteractivity and dynamic features to \nweb pages.\n\nA popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites.\n\nActivity\nWebsite/Web \nApplication Critique\n\nInstructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website.\n\n2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience?\n\n4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens?\n\nStep 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website.\n\nIntroduction to the Web \nDevelopment Life Cycle\n\nTopic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process\n\n•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering.\n\n•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline.\n\n•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines.\n\n•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs.\n\n•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups.\n\n•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate.\n\n1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite\n\n•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas.\n\nwireframe\n\n•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look.\n\n2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices.\n\n•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements.\n\n•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience\n\nCOMMON \nMETHODS INCLUDE\n\nCOMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE\n\nGET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPOST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation\n\nDELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account\n\nSTATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST\n\nEXAMPLE STATUS OF CODE\n\n200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully\n\n404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource\n\n400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data\n\n401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in\n\n403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view\n\n500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request\n\n503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable\n\n302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL\n\n301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent\n\n204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 15:32:14', '2025-08-29 15:32:14');
INSERT INTO `text_repository` (`content_id`, `file_id`, `extracted_text`, `page_texts`, `page_count`, `ocr_attempts`, `ocr_status`, `error_message`, `ocr_engine`, `extraction_date`, `last_processed`) VALUES
(77, 257, 'Unit I\nIntroduction to Web Systems\n\nTopic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers\n\n•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web\n\n1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web\n\nEarly\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP).\n\nLate 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web.\n\nInternet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork.\n\nThis is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols\n\nA system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols\n\nWeb architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client.\n\nWeb Browsers and \nWeb Servers\n\nWeb browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge\n\nWeb servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache\n\nKey components of \na web server\n\nWeb server software\nThe software that handles \nincoming requests and sends out \nresponses\n\nWeb content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages.\n\nDatabase (optional)\nA database may be used to store \nand retrieve dynamic content.\n\nActivity\nWeb History Timeline\n\nAssign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s).\n\nResearch\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included.\n\nWeb \nDevelopment\n\nTopic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies\n\n•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers\n\n•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript\n\n•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java.\n\nFull-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite.\n\nUI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs.\n\nUX designer\nuser experience\n\nCreates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography.\n\n•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.\n\n•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service\n\nWeb development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies\n\n•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page.\n\nUsed to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting.\n\nA programming language that adds \ninteractivity and dynamic features to \nweb pages.\n\nA popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites.\n\nActivity\nWebsite/Web \nApplication Critique\n\nInstructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website.\n\n2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience?\n\n4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens?\n\nStep 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website.\n\nIntroduction to the Web \nDevelopment Life Cycle\n\nTopic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process\n\n•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering.\n\n•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline.\n\n•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines.\n\n•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs.\n\n•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups.\n\n•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate.\n\n1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite\n\n•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas.\n\nwireframe\n\n•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look.\n\n2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices.\n\n•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements.\n\n•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience\n\nCOMMON \nMETHODS INCLUDE\n\nCOMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE\n\nGET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPOST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation\n\nDELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account\n\nSTATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST\n\nEXAMPLE STATUS OF CODE\n\n200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully\n\n404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource\n\n400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data\n\n401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in\n\n403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view\n\n500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request\n\n503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable\n\n302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL\n\n301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent\n\n204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 16:30:59', '2025-08-29 16:30:59'),
(78, 257, 'Unit I\nIntroduction to Web Systems\n\nTopic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers\n\n•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web\n\n1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web\n\nEarly\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP).\n\nLate 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web.\n\nInternet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork.\n\nThis is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols\n\nA system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols\n\nWeb architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client.\n\nWeb Browsers and \nWeb Servers\n\nWeb browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge\n\nWeb servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache\n\nKey components of \na web server\n\nWeb server software\nThe software that handles \nincoming requests and sends out \nresponses\n\nWeb content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages.\n\nDatabase (optional)\nA database may be used to store \nand retrieve dynamic content.\n\nActivity\nWeb History Timeline\n\nAssign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s).\n\nResearch\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included.\n\nWeb \nDevelopment\n\nTopic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies\n\n•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers\n\n•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript\n\n•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java.\n\nFull-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite.\n\nUI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs.\n\nUX designer\nuser experience\n\nCreates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography.\n\n•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.\n\n•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service\n\nWeb development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies\n\n•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page.\n\nUsed to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting.\n\nA programming language that adds \ninteractivity and dynamic features to \nweb pages.\n\nA popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites.\n\nActivity\nWebsite/Web \nApplication Critique\n\nInstructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website.\n\n2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience?\n\n4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens?\n\nStep 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website.\n\nIntroduction to the Web \nDevelopment Life Cycle\n\nTopic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process\n\n•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering.\n\n•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline.\n\n•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines.\n\n•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs.\n\n•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups.\n\n•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate.\n\n1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite\n\n•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas.\n\nwireframe\n\n•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look.\n\n2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices.\n\n•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements.\n\n•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience\n\nCOMMON \nMETHODS INCLUDE\n\nCOMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE\n\nGET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPOST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation\n\nDELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account\n\nSTATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST\n\nEXAMPLE STATUS OF CODE\n\n200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully\n\n404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource\n\n400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data\n\n401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in\n\n403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view\n\n500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request\n\n503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable\n\n302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL\n\n301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent\n\n204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 16:30:59', '2025-08-29 16:30:59'),
(79, 258, 'Unit I\nIntroduction to Web Systems\n\nTopic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers\n\n•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web\n\n1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web\n\nEarly\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP).\n\nLate 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web.\n\nInternet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork.\n\nThis is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols\n\nA system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols\n\nWeb architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client.\n\nWeb Browsers and \nWeb Servers\n\nWeb browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge\n\nWeb servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache\n\nKey components of \na web server\n\nWeb server software\nThe software that handles \nincoming requests and sends out \nresponses\n\nWeb content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages.\n\nDatabase (optional)\nA database may be used to store \nand retrieve dynamic content.\n\nActivity\nWeb History Timeline\n\nAssign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s).\n\nResearch\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included.\n\nWeb \nDevelopment\n\nTopic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies\n\n•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers\n\n•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript\n\n•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java.\n\nFull-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite.\n\nUI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs.\n\nUX designer\nuser experience\n\nCreates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography.\n\n•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.\n\n•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service\n\nWeb development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies\n\n•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page.\n\nUsed to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting.\n\nA programming language that adds \ninteractivity and dynamic features to \nweb pages.\n\nA popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites.\n\nActivity\nWebsite/Web \nApplication Critique\n\nInstructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website.\n\n2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience?\n\n4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens?\n\nStep 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website.\n\nIntroduction to the Web \nDevelopment Life Cycle\n\nTopic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process\n\n•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering.\n\n•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline.\n\n•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines.\n\n•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs.\n\n•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups.\n\n•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate.\n\n1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite\n\n•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas.\n\nwireframe\n\n•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look.\n\n2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices.\n\n•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements.\n\n•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience\n\nCOMMON \nMETHODS INCLUDE\n\nCOMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE\n\nGET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPOST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation\n\nDELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account\n\nSTATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST\n\nEXAMPLE STATUS OF CODE\n\n200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully\n\n404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource\n\n400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data\n\n401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in\n\n403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view\n\n500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request\n\n503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable\n\n302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL\n\n301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent\n\n204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 16:31:30', '2025-08-29 16:31:30');
INSERT INTO `text_repository` (`content_id`, `file_id`, `extracted_text`, `page_texts`, `page_count`, `ocr_attempts`, `ocr_status`, `error_message`, `ocr_engine`, `extraction_date`, `last_processed`) VALUES
(80, 258, 'Unit I\nIntroduction to Web Systems\n\nTopic Outline\n•History and evolution \nof the web \n•Internet protocols and \nweb architecture \n•Web browsers and \nweb servers\n\n•The World Wide Web, as we know it today, is a \nproduct of decades of technological \nadvancement and innovation. \n•Its roots can be traced back to the early days of \nthe internet, when researchers and scientists \nwere developing interconnected networks to \nshare information and resources.\nHistory and Evolution of the Web\n\n1960s\nThe ARPANET (Advanced Research Projects Agency \nNetwork) is established, laying the groundwork for the \ninternet.\n1989\nTim Berners-Lee develops the Hypertext Markup \nLanguage (HTML), a language for creating structured \ndocuments.\nKey milestones in the evolution of the web\n\nEarly\n1990s\nThe first web browsers (such as Mosaic) and web \nservers emerge, making it possible for people to access \nand create web content.\n1990\nBerners-Lee proposes the concept of the World Wide \nWeb, a global information system based on HTML and \nthe Hypertext Transfer Protocol (HTTP).\n\nLate 1990s \nand early \n2000s\nThe dot-com boom and the rise of e-commerce \ndrive rapid growth in the web.\n2010s\nThe mobile revolution and the emergence of \nsocial media platforms transform the way \npeople interact with the web.\n\nInternet Protocols \nand Web Architecture\n•The internet is a vast network of interconnected \ncomputers that communicate using a set of \nstandardized protocols. \n•These protocols ensure that data can be \ntransmitted reliably and efficiently across the \nnetwork.\n\nThis is a sample text.\nInsert your desired text here.\nSample text\nTCP/IP \n(Transmission \nControl \nProtocol/Intern\net Protocol)\nThe fundamental \nprotocols that govern \ncommunication on the \ninternet.\nHTTP (Hypertext \nTransfer Protocol\nThe protocol used to \ntransfer web pages \nand other data \nbetween web servers \nand web browsers.\nKey internet protocols\n\nA system that translates human-readable domain \nnames into machine-readable IP addresses.\nDNS (Domain Name \nSystem)\nA protocol for transferring files between \ncomputers.\nFTP (File Transfer \nProtocol)\nKey internet protocols\n\nWeb architecture\n•The web is typically structured as a client-server \narchitecture, where clients (web browsers) send \nrequests to servers (web servers) for web content. \n•The server processes the request and sends the \nrequested content back to the client.\n\nWeb Browsers and \nWeb Servers\n\nWeb browsers\nA web browser is a \nsoftware application \nthat allows users to \naccess and view web \ncontent\nPopular web \nbrowsers include:\nGoogle Chrome\nMozilla Firefox\nSafari\nMicrosoft Edge\n\nWeb servers\ncomputer system that delivers \nweb pages to clients. Web servers \ntypically run software such as \nApache\n\nKey components of \na web server\n\nWeb server software\nThe software that handles \nincoming requests and sends out \nresponses\n\nWeb content\nThe files (HTML, CSS, JavaScript, \nimages, etc.) that make up the \nweb pages.\n\nDatabase (optional)\nA database may be used to store \nand retrieve dynamic content.\n\nActivity\nWeb History Timeline\n\nAssign topics:\n \n•Milestone in the history of the web \n(1960s, 1980s, 1990s, 2000s, 2010s).\n\nResearch\n•Identify key events, inventions, or people that contributed to \nthe development of the web.\nCreate timeline\n•Have each group create a timeline on their assigned topic, \nhighlighting the most important events and discoveries.\nPresent and discuss\n•Have each group present their timeline to the class, \nexplaining the significance of the events they included.\n\nWeb \nDevelopment\n\nTopic Outline\n•Roles and \nResponsibilities of Web \nDevelopers\n•Overview of Web \nDevelopment \nTechnologies\n\n•Web developers play a crucial \nrole in creating and maintaining \nwebsites. \n•Their responsibilities can vary \ndepending on their specific \nexpertise and the project \nrequirements. \nRoles and Responsibilities of Web Developers\n\n•Focuses on the \nvisual elements of a \nwebsite, including \nthe layout, design, \nand user interface. \n•They primarily work \nwith HTML, CSS, and \nJavaScript\n\n•Handles the server-side \nlogic and functionality \nof a website, such as \ndatabase interactions \nand API integrations.\n•They often work with \nlanguages like PHP, \nPython, Ruby, or Java.\n\nFull-stack \ndeveloperPossesses skills in both \nfront-end and back-\nend development, \nallowing them to work \non all aspects of a \nwebsite.\n\nUI/UX designer\n•Designs the user interface \nand user experience of a \nwebsite, focusing on \ncreating intuitive and \nvisually appealing designs.\n\nUX designer\nuser experience\n\nCreates the overall look and feel of a website, \nincluding the layout, color scheme, and \ntypography.\n\n•is a professional who creates the visual interface of a website. \n•responsible for designing the User interface, and the visuals of \na website. \n•creates a website design that is visually appealing, user-\nfriendly, and effectively communicates the mission of the \nwebsite.\n\n•38% of visitors will stop engaging with a \nwebsite if the design is unattractive, and \n•48% say the design of the website is the \nmost important factor in determining a \nbusiness’ credibility (Blue Corona)\n•98% of people who’ve had a bad \nwebsite experience will shop with a \ncompetitor (Web FX)\nhttps://www.manypixels.co/blog/web-design/scope-of-service\n\nWeb development \ninvolves a wide range \nof technologies and \ntools\nOverview of Web Development Technologies\n\n•The fundamental language for \ncreating web pages. \n•It defines the structure and \ncontent of a page.\n\nUsed to style HTML elements, \ncontrolling their appearance, \nlayout, and formatting.\n\nA programming language that adds \ninteractivity and dynamic features to \nweb pages.\n\nA popular front-end framework \nthat provides pre-built \ncomponents and styles for \ncreating responsive websites.\n\nActivity\nWebsite/Web \nApplication Critique\n\nInstructions\n1. Choose a Website\n•Select a website to critique. \n•This could be a personal blog, a corporate site, an \ne-commerce platform, or a non-profit \norganization’s website.\n\n2. Review the Website\nPay attention to the following aspects:\n1.Design and Aesthetics: Is the website visually appealing? Are colors, \nfonts, and images used effectively?\n2. Usability: Is the website easy to navigate? Are menus and links \nintuitive? Is information easy to find?\n3. Content Quality: Is the content well-written and informative? Does it \nengage the target audience?\n\n4. Functionality: Do all features \n(forms, buttons, links) work \ncorrectly? Are there any broken \nlinks or errors?\n5. Mobile Responsiveness: How \ndoes the website perform on a \nmobile device? Is it user-friendly \non smaller screens?\n\nStep 3: Use the Critique Guidelines\nRefer to the following critique guidelines to structure \nyour evaluation:\n1.Strengths: List three things the website does well.\n2. Weaknesses: Identify three areas for improvement.\n3. User Experience: Describe your overall experience \nas a user. How did it feel to interact with the site?\n4. Recommendations: Suggest specific changes or \nenhancements that could improve the website.\n\nIntroduction to the Web \nDevelopment Life Cycle\n\nTopic Outline\n•Project Planning and \nRequirements Gathering\n•Web Design and User \nExperience\n•Web Development Process\n\n•The web development life cycle (WDLC) is a \nstructured process that outlines the steps involved \nin creating a website/web application. It helps \nensure that the project is completed efficiently and \neffectively. \nProject Planning and Requirements Gathering\n•Phase of the WDLC is project \nplanning and requirements \ngathering.\n\n•Define project goals \nand objectives.\n•Identify target \naudience and their \nneeds.\n•Determine project \nscope and timeline.\n\n•Assign roles and \nresponsibilities to team \nmembers.\n•Create a project plan \nwith milestones and \ndeadlines.\n\n•Gather information \nabout the website\'s \nfunctionality, features, \nand design preferences\n•Conduct interviews, \nsurveys, and user \nresearch to understand \nuser needs.\n\n•Create detailed \nrequirements \ndocuments, such as \nwireframes and \nmockups.\n\n•Once the requirements are gathered, the next phase \nis web design and user experience (UX). \nWeb Design and User Experience\n•This involves creating the visual \nelements of the website, as well as \nensuring that it is easy to use and \nnavigate.\n\n1. Create wireframes \nand mockups to \nvisualize the layout and \nstructure of the \nwebsite\n\n•wireframe is a set of schematic \n(usually black and white) blocks \nthat outline the arrangement of \nthe elements on the future \nwebsite/app interface. \n•It usually shows the layout of the \nbuttons, visuals, copy, but \ndoesn’t go into details presenting \nonly the main design ideas.\n\nwireframe\n\n•mockup is a page or screen of \nthe finished application \ndesign, as it will look to the \nuser\n•It is colorful, with thought-out \nvisuals and typography, and it \ngives viewers a realistic \nimpression of the future \nproduct’s look.\n\n2. Design the visual elements, \nincluding color scheme, typography, \nand imagery.\n3. Ensure that the design is \nresponsive and looks good on \ndifferent devices.\n\n•Consider usability \nfactors such as \nnavigation, \naccessibility, and load \ntimes.\n•Conduct user testing \nto gather feedback \nand make \nimprovements.\n\n•Ensure that the \nwebsite is intuitive \nand easy to use for \nthe target audience\n\nCOMMON \nMETHODS INCLUDE\n\nCOMMON \nMETHODS INCLUDE\n•GET\n•POST\n•PUT\n•DELETE\n\nGET\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPOST\nPurpose: Send data \nto the server to be \nprocessed\nExample: Submitting \na form with user \ninput\n\nPUT\nPurpose: Update \nexisting data on the \nserver\nExample: Modifying \nuser profile \ninformation\n\nDELETEPurpose: Remove \ndata from the server\nExample: Deleting a \nuser account\n\nSTATUS CODES\nHTTP RESPONSES \nINCLUDE STATUS CODES \nTHAT INDICATE THE \nOUTCOME OF THE \nREQUEST\n\nEXAMPLE STATUS OF CODE\n\n200 OK\nThe request was \nsuccessful, and the server \nhas returned the \nrequested data\nExample Use: When a \nuser accesses a web \npage, and the page \nloads successfully\n\n404 \nNOT FOUND\nThe requested resource was \nnot found on the server\nExample Use: When a user \ntries to access a URL that \ndoesn\'t correspond to an \nexisting web page or \nresource\n\n400 BAD \nREQUESTS\nMeaning: The server couldn\'t \nunderstand the request due \nto a client error, often due to \nmalformed syntax\nExample Use: When a user \nsubmits a form with missing \nor incorrect data\n\n401 \nUNAUTHORIZED\nThe request requires \nauthentication, and the \nuser\'s credentials are either \nmissing or invalid\nExample Use: When a user \ntries to access a restricted \npage without logging in\n\n403 \nFORBIDDEN\nMeaning: The server \nunderstood the request, but \nthe server refuses to \nauthorize it\nExample Use: When a user \nattempts to access a \nresource they don\'t have \npermission to view\n\n500 \nINTERNAL \nSERVER ERROR\nThe server encountered an \nerror it couldn\'t handle, \naffecting its ability to fulfill \nthe request\nExample Use: When there\'s \na problem on the server \nside that prevents it from \nprocessing the request\n\n503 \nSERVICE \nUNAVAILABLE\nMeaning: The server is \ncurrently unable to handle \nthe request due to temporary \noverloading or maintenance\nExample Use: When a website \nis undergoing maintenance \nand is temporarily unavailable\n\n302 \nFOUND\nThe requested resource has \nbeen temporarily moved to a \ndifferent location\nExample Use: When a web \npage has been moved, and \nthe server provides a temporary \nredirection to the new URL\n\n301 \nMOVED \nPERMANENTLY\nThe requested resource has \nbeen permanently moved \nto a different location\nExample Use: Similar to the \n302 status but indicating that \nthe redirection is permanent\n\n204 \nNO\nCONTENT\nThe server successfully \nprocessed the request, but \nthere\'s no new content to \nsend back\nExample Use: Commonly used \nwith AJAX requests where the \nclient doesn\'t need a new \npage or content update', NULL, 0, 1, 'completed', NULL, 'tesseract', '2025-08-29 16:31:30', '2025-08-29 16:31:30');

-- --------------------------------------------------------

--
-- Table structure for table `transactions`
--

CREATE TABLE `transactions` (
  `transaction_id` int(11) NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  `file_id` int(11) DEFAULT NULL,
  `users_department_id` int(11) DEFAULT NULL,
  `transaction_status` enum('completed','pending','failed') NOT NULL,
  `transaction_time` datetime NOT NULL,
  `date_updated` datetime NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `description` varchar(255) DEFAULT NULL,
  `transaction_type` enum('upload','send','request','accept','reject','access','scan','relocation','login','other','ocr_process','ocr_retry') NOT NULL DEFAULT 'other'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `transactions`
--

INSERT INTO `transactions` (`transaction_id`, `user_id`, `file_id`, `users_department_id`, `transaction_status`, `transaction_time`, `date_updated`, `description`, `transaction_type`) VALUES
(157, NULL, NULL, NULL, 'failed', '2025-08-20 15:37:03', '2025-08-25 20:39:56', 'Invalid login attempt for username: user', 'login'),
(158, 15, NULL, NULL, 'completed', '2025-08-20 15:43:18', '2025-08-25 20:39:56', 'Successful login for username: user', 'login'),
(159, 15, NULL, NULL, 'completed', '2025-08-20 15:48:39', '2025-08-25 20:39:56', 'Successful login for username: user', 'login'),
(160, 15, NULL, NULL, 'completed', '2025-08-21 18:33:46', '2025-08-25 20:39:56', 'Successful login for username: user', 'login'),
(161, 15, NULL, NULL, 'completed', '2025-08-21 18:36:05', '2025-08-25 20:39:56', 'Edited user: user', 'other'),
(162, 15, NULL, NULL, 'completed', '2025-08-21 18:37:07', '2025-08-25 20:39:56', 'Successful login for username: user', 'login'),
(163, 15, NULL, NULL, 'completed', '2025-08-21 22:10:20', '2025-08-25 20:39:56', 'Successful login for username: user', 'login'),
(164, 15, NULL, NULL, 'completed', '2025-08-23 12:00:15', '2025-08-25 20:39:56', 'Successful login for username: user', 'upload'),
(165, 15, NULL, NULL, 'completed', '2025-08-23 15:22:23', '2025-08-25 20:39:56', 'Uploaded document', 'other'),
(166, 15, NULL, NULL, 'completed', '2025-08-23 15:34:55', '2025-08-25 20:39:56', 'Uploaded document', 'other'),
(167, 15, NULL, NULL, 'completed', '2025-08-23 15:44:00', '2025-08-25 20:39:56', 'Uploaded document (file_id: 117)', 'upload'),
(168, 15, NULL, NULL, 'completed', '2025-08-23 15:52:13', '2025-08-25 20:39:56', 'Uploaded document (file_id: 118)', 'upload'),
(169, 15, NULL, NULL, 'completed', '2025-08-23 16:37:11', '2025-08-25 20:39:56', 'Successful login for username: user', 'other'),
(170, 15, NULL, NULL, 'completed', '2025-08-23 16:47:01', '2025-08-25 20:39:56', 'Uploaded Moodle.docx', 'upload'),
(171, NULL, NULL, NULL, 'completed', '2025-08-23 16:47:01', '2025-08-25 20:39:56', 'OCR processed for file ID 122', 'ocr_process'),
(172, 15, NULL, NULL, 'completed', '2025-08-23 18:55:13', '2025-08-25 20:39:56', 'Successful login for username: user', 'other'),
(173, 15, NULL, NULL, 'completed', '2025-08-23 19:58:41', '2025-08-25 20:39:56', 'Successful login for username: user', 'other'),
(174, 15, NULL, NULL, 'completed', '2025-08-23 20:49:34', '2025-08-25 20:39:56', 'Successful login for username: user', 'other'),
(175, 15, NULL, NULL, 'completed', '2025-08-23 21:16:36', '2025-08-25 20:39:56', 'Successful login for username: user', 'other'),
(176, 15, NULL, NULL, 'completed', '2025-08-23 23:01:59', '2025-08-25 20:39:56', 'Successful login for username: user', 'other'),
(177, 15, NULL, NULL, 'completed', '2025-08-23 23:02:16', '2025-08-25 20:39:56', 'Successful login for username: user', 'other'),
(178, 15, NULL, NULL, 'completed', '2025-08-23 23:23:41', '2025-08-25 20:39:56', 'Added user: SwenkaDenka', 'other'),
(179, 15, NULL, NULL, 'completed', '2025-08-23 23:37:47', '2025-08-25 20:39:56', 'Deleted user ID: 26', 'other'),
(180, 15, NULL, NULL, 'completed', '2025-08-23 23:55:21', '2025-08-25 20:39:56', 'Successful login for username: user', 'other'),
(181, 15, NULL, NULL, 'completed', '2025-08-24 00:42:19', '2025-08-25 20:39:56', 'Successful login for username: user', 'other'),
(182, 15, NULL, NULL, 'completed', '2025-08-24 07:51:19', '2025-08-25 20:39:56', 'Added user: SwenkaDenka', 'other'),
(183, 15, NULL, NULL, 'completed', '2025-08-24 08:29:19', '2025-08-25 20:39:56', 'Edited user: Trevor Mundo', 'other'),
(184, 15, NULL, NULL, 'completed', '2025-08-24 15:14:00', '2025-08-25 20:39:56', 'Successful login for username: user', 'other'),
(185, 15, NULL, NULL, 'completed', '2025-08-25 12:39:13', '2025-08-25 20:39:56', 'Successful login for username: user', 'other'),
(186, 15, NULL, NULL, 'completed', '2025-08-25 12:40:59', '2025-08-25 20:39:56', 'Successful login for username: user', 'other'),
(187, 15, NULL, NULL, 'completed', '2025-08-25 16:59:40', '2025-08-25 20:39:56', 'Successful login for username: user', 'other'),
(188, 15, NULL, NULL, 'completed', '2025-08-25 17:46:05', '2025-08-25 20:39:56', 'Successful login for username: user', 'other'),
(189, 15, NULL, NULL, 'completed', '2025-08-25 21:08:42', '2025-08-25 21:08:42', 'Successful login for username: user', 'other'),
(190, 15, NULL, NULL, 'completed', '2025-08-26 09:22:16', '2025-08-26 09:22:16', 'Successful login for username: user', 'other'),
(191, 15, NULL, NULL, 'completed', '2025-08-26 11:48:41', '2025-08-26 11:48:41', 'Successful login for username: user', 'other'),
(192, 15, NULL, NULL, 'completed', '2025-08-26 12:34:40', '2025-08-26 12:34:40', 'Successful login for username: user', 'other'),
(193, 15, NULL, NULL, 'completed', '2025-08-26 13:52:57', '2025-08-26 13:52:57', 'Added user: rivz_rivera', 'other'),
(194, 28, NULL, NULL, 'completed', '2025-08-26 13:53:06', '2025-08-26 13:53:06', 'Successful login for username: rivz_rivera', 'other'),
(195, 15, NULL, NULL, 'completed', '2025-08-26 14:16:39', '2025-08-26 14:16:39', 'Successful login for username: user', 'other'),
(196, 15, NULL, NULL, 'completed', '2025-08-26 14:21:44', '2025-08-26 14:21:44', 'Edited user: rivz_rivera', 'other'),
(197, 28, NULL, NULL, 'completed', '2025-08-26 15:44:40', '2025-08-26 15:44:40', 'Successful login for username: rivz_rivera', 'other'),
(198, 28, NULL, NULL, 'completed', '2025-08-26 16:07:10', '2025-08-26 16:07:10', 'Successful login for username: rivz_rivera', 'other'),
(199, 28, NULL, NULL, 'completed', '2025-08-26 16:12:59', '2025-08-26 16:12:59', 'Successful login for username: rivz_rivera', 'other'),
(200, 28, NULL, NULL, 'completed', '2025-08-26 16:30:42', '2025-08-26 16:30:42', 'Successful login for username: rivz_rivera', 'other'),
(201, 28, NULL, NULL, 'completed', '2025-08-27 06:59:31', '2025-08-27 06:59:31', 'Successful login for username: rivz_rivera', 'other'),
(202, 28, NULL, NULL, 'completed', '2025-08-27 09:35:29', '2025-08-27 09:35:29', 'Successful login for username: rivz_rivera', 'other'),
(203, 28, NULL, NULL, 'completed', '2025-08-27 12:15:02', '2025-08-27 12:15:02', 'Uploaded file: COPY-TEST-LAST-again_1.pdf', 'other'),
(204, 28, NULL, NULL, 'completed', '2025-08-27 12:16:34', '2025-08-27 12:16:34', 'Uploaded file: COPY-TEST-LAST-again_2.pdf', 'other'),
(205, 28, NULL, NULL, 'completed', '2025-08-27 12:16:34', '2025-08-27 12:16:34', 'Triggered OCR for file: COPY-TEST-LAST-again_2.pdf', 'other'),
(206, 28, NULL, NULL, 'completed', '2025-08-27 13:17:27', '2025-08-27 13:17:27', 'Uploaded file: COPY-TEST-LAST-again_3.pdf', 'other'),
(207, 28, NULL, NULL, 'completed', '2025-08-27 13:17:27', '2025-08-27 13:17:27', 'Triggered OCR for file: COPY-TEST-LAST-again_3.pdf', 'other'),
(208, 28, NULL, NULL, 'completed', '2025-08-27 13:18:48', '2025-08-27 13:18:48', 'Uploaded file: COPY-TEST-LAST-again.pdf', 'other'),
(209, 28, NULL, NULL, 'completed', '2025-08-27 13:18:48', '2025-08-27 13:18:48', 'Triggered OCR for file: COPY-TEST-LAST-again.pdf', 'other'),
(210, 28, NULL, NULL, 'completed', '2025-08-27 13:20:26', '2025-08-27 13:20:26', 'Deleted user ID: 21', 'other'),
(211, 28, NULL, NULL, 'completed', '2025-08-27 13:20:32', '2025-08-27 13:20:32', 'Deleted user ID: 10', 'other'),
(212, 28, NULL, NULL, 'completed', '2025-08-27 13:22:25', '2025-08-27 13:22:25', 'Edited user: user', 'other'),
(213, 28, NULL, NULL, 'completed', '2025-08-27 13:24:37', '2025-08-27 13:24:37', 'Uploaded file: Classification of Social Media_3.pdf', 'other'),
(214, 28, NULL, NULL, 'completed', '2025-08-27 13:24:37', '2025-08-27 13:24:37', 'Triggered OCR for file: Classification of Social Media_3.pdf', 'other'),
(215, 28, NULL, NULL, 'completed', '2025-08-28 12:33:09', '2025-08-28 12:33:09', 'Successful login for username: rivz_rivera', 'other'),
(216, 28, NULL, NULL, 'completed', '2025-08-28 14:17:37', '2025-08-28 14:17:37', 'Uploaded file: FileUploadTrends_TESTER.pdf', 'other'),
(217, 28, NULL, NULL, 'completed', '2025-08-28 14:17:37', '2025-08-28 14:17:37', 'Triggered OCR for file: FileUploadTrends_TESTER.pdf', 'other'),
(218, 28, NULL, NULL, 'completed', '2025-08-28 14:51:35', '2025-08-28 14:51:35', 'Uploaded file: FileUploadTrends_TESTEe.pdf', 'other'),
(219, 28, NULL, NULL, 'completed', '2025-08-28 14:51:35', '2025-08-28 14:51:35', 'Triggered OCR for file: FileUploadTrends_TESTEe.pdf', 'other'),
(220, 28, NULL, NULL, 'completed', '2025-08-28 14:52:24', '2025-08-28 14:52:24', 'Uploaded file: FileUploadTrends_TESTEe_1.pdf', 'other'),
(221, 28, NULL, NULL, 'completed', '2025-08-28 14:52:25', '2025-08-28 14:52:25', 'Triggered OCR for file: FileUploadTrends_TESTEe_1.pdf', 'other'),
(222, 28, NULL, NULL, 'completed', '2025-08-28 15:00:21', '2025-08-28 15:00:21', 'Uploaded file: TESTER-FILE.pdf', 'other'),
(223, 28, NULL, NULL, 'completed', '2025-08-28 15:00:22', '2025-08-28 15:00:22', 'Triggered OCR for file: TESTER-FILE.pdf', 'other'),
(224, 28, NULL, NULL, 'completed', '2025-08-28 22:44:36', '2025-08-28 22:44:36', 'Uploaded file: TESTER-Klee.pdf', 'other'),
(225, 28, NULL, NULL, 'completed', '2025-08-28 22:44:36', '2025-08-28 22:44:36', 'Uploaded file: TESTER-Klee_1.pdf', 'other'),
(226, 28, NULL, NULL, 'completed', '2025-08-28 22:54:27', '2025-08-28 22:54:27', 'Uploaded file: TESTER-Kleesta.pdf', 'other'),
(227, 28, NULL, NULL, 'completed', '2025-08-28 22:54:27', '2025-08-28 22:54:27', 'Uploaded file: TESTER-Kleesta_1.pdf', 'other'),
(228, 28, NULL, NULL, 'completed', '2025-08-28 22:59:08', '2025-08-28 22:59:08', 'Uploaded file: TESTER-Kleester.pdf', 'other'),
(229, 28, NULL, NULL, 'completed', '2025-08-28 22:59:08', '2025-08-28 22:59:08', 'Uploaded file: TESTER-Kleester_1.pdf', 'other'),
(230, 28, NULL, NULL, 'completed', '2025-08-28 23:13:59', '2025-08-28 23:13:59', 'Uploaded file: TESTER-Kleesterx.pdf', 'other'),
(231, 28, NULL, NULL, 'completed', '2025-08-28 23:14:00', '2025-08-28 23:14:00', 'Uploaded file: TESTER-Kleesterx_1.pdf', 'other'),
(232, 28, NULL, NULL, 'completed', '2025-08-29 00:03:02', '2025-08-29 00:03:02', 'Uploaded file: TESTER-Kleesterxer.pdf', 'other'),
(233, 28, NULL, NULL, 'completed', '2025-08-29 00:03:02', '2025-08-29 00:03:02', 'Uploaded file: TESTER-Kleesterxer_1.pdf', 'other'),
(234, 28, NULL, NULL, 'completed', '2025-08-29 00:44:44', '2025-08-29 00:44:44', 'Uploaded file: TESTER-OCR.pdf', 'other'),
(235, 28, NULL, NULL, 'completed', '2025-08-29 00:44:44', '2025-08-29 00:44:44', 'Uploaded file: TESTER-OCR_1.pdf', 'other'),
(236, 28, NULL, NULL, 'completed', '2025-08-29 00:46:35', '2025-08-29 00:46:35', 'Uploaded file: TESTER-OCR_2.pdf', 'other'),
(237, 28, NULL, NULL, 'completed', '2025-08-29 00:46:35', '2025-08-29 00:46:35', 'Uploaded file: TESTER-OCR_3.pdf', 'other'),
(238, 28, NULL, NULL, 'completed', '2025-08-29 00:58:29', '2025-08-29 00:58:29', 'Uploaded file: TESTER-OCR-ii.pdf', 'other'),
(239, 28, NULL, NULL, 'completed', '2025-08-29 00:58:29', '2025-08-29 00:58:29', 'Uploaded file: TESTER-OCR-ii_1.pdf', 'other'),
(240, 28, NULL, NULL, 'completed', '2025-08-29 01:00:25', '2025-08-29 01:00:25', 'Uploaded file: TESTER-OCR-iii.pdf', 'other'),
(241, 28, NULL, NULL, 'completed', '2025-08-29 01:00:25', '2025-08-29 01:00:25', 'Uploaded file: TESTER-OCR-iii_1.pdf', 'other'),
(242, 28, NULL, NULL, 'completed', '2025-08-29 06:09:55', '2025-08-29 06:09:55', 'Successful login for username: rivz_rivera', 'other'),
(243, 28, NULL, NULL, 'completed', '2025-08-29 06:36:07', '2025-08-29 06:36:07', 'Uploaded file: TESTER-OCR-777.pdf', 'other'),
(244, 28, NULL, NULL, 'completed', '2025-08-29 06:36:07', '2025-08-29 06:36:07', 'Uploaded file: TESTER-OCR-777_1.pdf', 'other'),
(245, 28, NULL, NULL, 'completed', '2025-08-29 06:43:04', '2025-08-29 06:43:04', 'Uploaded file: png-ocr-TEST.png', 'other'),
(246, 28, NULL, NULL, 'completed', '2025-08-29 06:43:04', '2025-08-29 06:43:04', 'Uploaded file: png-ocr-TEST_1.png', 'other'),
(247, 28, NULL, NULL, 'completed', '2025-08-29 06:45:53', '2025-08-29 06:45:53', 'Successful login for username: rivz_rivera', 'other'),
(248, 28, NULL, NULL, 'completed', '2025-08-29 06:48:24', '2025-08-29 06:48:24', 'Uploaded file: png-ocr-TEST-II.png', 'other'),
(249, 28, NULL, NULL, 'completed', '2025-08-29 06:48:24', '2025-08-29 06:48:24', 'Uploaded file: png-ocr-TEST-II_1.png', 'other'),
(250, 28, NULL, NULL, 'completed', '2025-08-29 06:48:44', '2025-08-29 06:48:44', 'Uploaded file: png-ocr-TEST-II_2.png', 'other'),
(251, 28, NULL, NULL, 'completed', '2025-08-29 06:48:44', '2025-08-29 06:48:44', 'Uploaded file: png-ocr-TEST-II_3.png', 'other'),
(252, 28, NULL, NULL, 'completed', '2025-08-29 06:50:21', '2025-08-29 06:50:21', 'Uploaded file: png-ocr-TEST-II_4.png', 'other'),
(253, 28, NULL, NULL, 'completed', '2025-08-29 06:50:21', '2025-08-29 06:50:21', 'Uploaded file: png-ocr-TEST-II_5.png', 'other'),
(254, 28, NULL, NULL, 'completed', '2025-08-29 06:50:32', '2025-08-29 06:50:32', 'Uploaded file: png-ocr-TEST-II_6.png', 'other'),
(255, 28, NULL, NULL, 'completed', '2025-08-29 06:50:32', '2025-08-29 06:50:32', 'Uploaded file: png-ocr-TEST-II_7.png', 'other'),
(256, 28, NULL, NULL, 'completed', '2025-08-29 07:06:03', '2025-08-29 07:06:03', 'Uploaded file: png-ocr-TEST-II_8.png', 'other'),
(257, 28, NULL, NULL, 'completed', '2025-08-29 07:06:03', '2025-08-29 07:06:03', 'Uploaded file: png-ocr-TEST-II_9.png', 'other'),
(258, 28, NULL, NULL, 'completed', '2025-08-29 07:21:24', '2025-08-29 07:21:24', 'Uploaded file: png-ocr-TEST-II_10.png', 'other'),
(259, 28, NULL, NULL, 'completed', '2025-08-29 07:21:24', '2025-08-29 07:21:24', 'Uploaded file: png-ocr-TEST-II_11.png', 'other'),
(260, 28, NULL, NULL, 'completed', '2025-08-29 07:29:38', '2025-08-29 07:29:38', 'Uploaded file: png-ocr-TEST-II.png', 'other'),
(261, 28, NULL, NULL, 'completed', '2025-08-29 07:29:38', '2025-08-29 07:29:38', 'Uploaded file: png-ocr-TEST-II_1.png', 'other'),
(262, 28, NULL, NULL, 'completed', '2025-08-29 07:33:50', '2025-08-29 07:33:50', 'Uploaded file: png-ocr-TEST-II.png', 'other'),
(263, 28, NULL, NULL, 'completed', '2025-08-29 08:02:08', '2025-08-29 08:02:08', 'Uploaded file: png-ocr-TEST-II_1.png', 'other'),
(264, 28, NULL, NULL, 'completed', '2025-08-29 08:02:08', '2025-08-29 08:02:08', 'Uploaded file: png-ocr-TEST-II_2.png', 'other'),
(265, NULL, NULL, NULL, 'failed', '2025-08-29 08:10:21', '2025-08-29 08:10:21', 'File not accessible for file ID 124: Uploads/42956a4854b89778_FlexiContactUserGuide15.01.pdf', 'ocr_process'),
(266, NULL, NULL, NULL, 'failed', '2025-08-29 08:10:22', '2025-08-29 08:10:22', 'File not accessible for file ID 147: Uploads/Users/rivz_rivera/68ae48c262fce_REVIEWER_1Introduction_to_SIA__1_.pdf', 'ocr_process'),
(267, NULL, NULL, NULL, 'completed', '2025-08-29 08:10:22', '2025-08-29 08:10:22', 'OCR processed for file ID 179 with 4 pages (execution time: 0.15992498397827s)', 'ocr_process'),
(268, NULL, NULL, NULL, 'completed', '2025-08-29 08:10:22', '2025-08-29 08:10:22', 'OCR processed for file ID 180 with 4 pages (execution time: 0.14013600349426s)', 'ocr_process'),
(269, NULL, NULL, NULL, 'failed', '2025-08-29 08:10:22', '2025-08-29 08:10:22', 'File not accessible for file ID 181: Uploads/College of Engineering and Technology/R001/C001/L001/B001/F001/COPY-TEST-LAST-again.pdf', 'ocr_process'),
(270, NULL, NULL, NULL, 'completed', '2025-08-29 08:10:22', '2025-08-29 08:10:22', 'OCR processed for file ID 182 with 4 pages (execution time: 0.1412091255188s)', 'ocr_process'),
(271, NULL, NULL, NULL, 'failed', '2025-08-29 08:10:23', '2025-08-29 08:10:23', 'OCR failed for file ID 183: OCR failed to produce output', 'ocr_process'),
(272, NULL, NULL, NULL, 'failed', '2025-08-29 08:10:23', '2025-08-29 08:10:23', 'OCR failed for file ID 184: OCR failed to produce output', 'ocr_process'),
(273, NULL, NULL, NULL, 'failed', '2025-08-29 08:10:23', '2025-08-29 08:10:23', 'OCR failed for file ID 185: OCR failed to produce output', 'ocr_process'),
(274, 28, NULL, NULL, 'completed', '2025-08-29 08:18:38', '2025-08-29 08:18:38', 'Uploaded file: png-ocr-TEST-II_3.png', 'other'),
(275, 28, NULL, NULL, 'completed', '2025-08-29 08:18:38', '2025-08-29 08:18:38', 'Uploaded file: png-ocr-TEST-II_4.png', 'other'),
(276, 28, NULL, NULL, 'completed', '2025-08-29 08:25:25', '2025-08-29 08:25:25', 'Uploaded file: png-ocr-TESER.png', 'other'),
(277, 28, NULL, NULL, 'completed', '2025-08-29 08:33:57', '2025-08-29 08:33:57', 'Uploaded file: PNG.png', 'other'),
(278, 28, NULL, NULL, 'completed', '2025-08-29 08:34:41', '2025-08-29 08:34:41', 'Successful login for username: rivz_rivera', 'other'),
(279, 28, 230, NULL, 'completed', '2025-08-29 08:43:33', '2025-08-29 08:43:33', 'Uploaded file: Untitled00.png', 'other'),
(280, NULL, 230, NULL, 'completed', '2025-08-29 08:49:58', '2025-08-29 08:49:58', 'OCR processed for file ID 230 with 1 pages (execution time: 1.8577120304108s)', 'ocr_process'),
(281, 28, 231, NULL, 'completed', '2025-08-29 08:50:58', '2025-08-29 08:50:58', 'Uploaded file: websystem-OCR-test.pdf', 'other'),
(282, NULL, 231, NULL, 'completed', '2025-08-29 08:51:48', '2025-08-29 08:51:48', 'OCR processed for file ID 231 with 2 pages (execution time: 0.16521096229553s)', 'ocr_process'),
(283, 28, 232, NULL, 'completed', '2025-08-29 09:11:31', '2025-08-29 09:11:31', 'Uploaded file: BASIC LINUX COMMANDS.pdf', 'other'),
(284, NULL, 232, NULL, 'completed', '2025-08-29 09:12:44', '2025-08-29 09:12:44', 'OCR processed for file ID 232 with 2 pages (execution time: 0.47847509384155s)', 'ocr_process'),
(285, 28, NULL, NULL, 'completed', '2025-08-29 09:17:03', '2025-08-29 09:17:03', 'Uploaded file: OCR-DATA-ETHICS-Presentation - Copy.pdf', 'other'),
(286, 28, NULL, NULL, 'completed', '2025-08-29 09:20:43', '2025-08-29 09:20:43', 'Uploaded file: ocr-Unit 3.pdf', 'other'),
(287, 28, NULL, NULL, 'completed', '2025-08-29 09:24:00', '2025-08-29 09:24:00', 'Uploaded file: ocr-Unit 3.pdf', 'other'),
(288, 28, NULL, NULL, 'completed', '2025-08-29 09:28:52', '2025-08-29 09:28:52', 'Uploaded file: ocr-Unit 3.pdf', 'other'),
(289, 28, NULL, NULL, 'completed', '2025-08-29 09:33:26', '2025-08-29 09:33:26', 'Uploaded file: ocr-Unit 3.pdf', 'other'),
(290, NULL, NULL, NULL, 'completed', '2025-08-29 09:34:12', '2025-08-29 09:34:12', 'OCR processed for file ID 237 with 15 pages (execution time: 0.18943786621094s)', 'ocr_process'),
(291, 28, NULL, NULL, 'completed', '2025-08-29 09:52:29', '2025-08-29 09:52:29', 'Uploaded file: ocr-Unit 3.pdf', 'other'),
(292, NULL, NULL, NULL, 'completed', '2025-08-29 09:54:13', '2025-08-29 09:54:13', 'OCR processed for file ID 238 with 15 pages (execution time: 1.2907860279083s)', 'ocr_process'),
(293, 28, NULL, NULL, 'completed', '2025-08-29 10:05:07', '2025-08-29 10:05:07', 'Successful login for username: rivz_rivera', 'other'),
(294, 28, NULL, NULL, 'completed', '2025-08-29 10:05:40', '2025-08-29 10:05:40', 'Uploaded file: retrigger-ocr-Unit 3.pdf', 'other'),
(295, 28, NULL, NULL, 'completed', '2025-08-29 10:05:41', '2025-08-29 10:05:41', 'Triggered OCR for file: retrigger-ocr-Unit 3.pdf', 'other'),
(296, 28, NULL, NULL, 'completed', '2025-08-29 10:14:22', '2025-08-29 10:14:22', 'Uploaded file: trigger-ocr-Unit 3.pdf', 'other'),
(297, 28, NULL, NULL, 'completed', '2025-08-29 10:14:22', '2025-08-29 10:14:22', 'Triggered OCR for file: trigger-ocr-Unit 3.pdf', 'other'),
(298, 28, NULL, NULL, 'completed', '2025-08-29 10:46:40', '2025-08-29 10:46:40', 'Uploaded file: tententen-trigger-ocr-Unit 3.pdf', 'other'),
(299, 28, NULL, NULL, 'completed', '2025-08-29 10:46:40', '2025-08-29 10:46:40', 'Triggered OCR for file: tententen-trigger-ocr-Unit 3.pdf', 'other'),
(300, 28, NULL, NULL, 'completed', '2025-08-29 11:01:09', '2025-08-29 11:01:09', 'Uploaded file: TYUGASDGBHJDSBHJASDBHJDAS_2.pdf', 'other'),
(301, 28, NULL, NULL, 'completed', '2025-08-29 11:01:09', '2025-08-29 11:01:09', 'Triggered OCR for file: TYUGASDGBHJDSBHJASDBHJDAS_2.pdf', 'other'),
(302, 28, NULL, NULL, 'completed', '2025-08-29 11:01:09', '2025-08-29 11:01:09', 'Uploaded file: TYUGASDGBHJDSBHJASDBHJDAS_3.pdf', 'other'),
(303, 28, NULL, NULL, 'completed', '2025-08-29 11:01:09', '2025-08-29 11:01:09', 'Triggered OCR for file: TYUGASDGBHJDSBHJASDBHJDAS_3.pdf', 'other'),
(304, 28, NULL, NULL, 'completed', '2025-08-29 11:15:15', '2025-08-29 11:15:15', 'Uploaded file: rererere-OCR-test.pdf', 'other'),
(305, 28, NULL, NULL, 'completed', '2025-08-29 11:15:15', '2025-08-29 11:15:15', 'Triggered OCR for file: rererere-OCR-test.pdf', 'other'),
(306, 28, 245, NULL, 'completed', '2025-08-29 11:24:23', '2025-08-29 11:24:23', 'Uploaded file: LAST TEST.pdf', 'other'),
(307, 28, 245, NULL, 'completed', '2025-08-29 11:24:23', '2025-08-29 11:24:23', 'Triggered OCR for file: LAST TEST.pdf', 'other'),
(308, 28, 246, NULL, 'completed', '2025-08-29 11:28:14', '2025-08-29 11:28:14', 'Uploaded file: LAST-OCR-TEST.pdf', 'other'),
(309, 28, 246, NULL, 'completed', '2025-08-29 11:28:14', '2025-08-29 11:28:14', 'Triggered OCR for file: LAST-OCR-TEST.pdf', 'other'),
(310, NULL, 246, NULL, 'completed', '2025-08-29 11:31:07', '2025-08-29 11:31:07', 'OCR processed for file ID 246 with 15 pages (execution time: 0.21861910820007s)', 'ocr_process'),
(311, 28, NULL, NULL, 'completed', '2025-08-29 11:50:07', '2025-08-29 11:50:07', 'Uploaded file: TESTETSGDTETSTEST.pdf', 'other'),
(312, 28, NULL, NULL, 'completed', '2025-08-29 11:50:08', '2025-08-29 11:50:08', 'Triggered OCR for file: TESTETSGDTETSTEST.pdf', 'other'),
(313, 28, 248, NULL, 'completed', '2025-08-29 12:03:50', '2025-08-29 12:03:50', 'Uploaded file: OCR-DATA-ETHICS-Presentation - Copy.pdf', 'other'),
(314, 28, 248, NULL, 'completed', '2025-08-29 12:03:51', '2025-08-29 12:03:51', 'Triggered OCR for file: OCR-DATA-ETHICS-Presentation - Copy.pdf', 'other'),
(315, 28, 249, NULL, 'completed', '2025-08-29 12:06:06', '2025-08-29 12:06:06', 'Uploaded file: REVIEWER-1Introduction-to-SIA (1).pdf', 'other'),
(316, 28, 249, NULL, 'completed', '2025-08-29 12:06:07', '2025-08-29 12:06:07', 'Triggered OCR for file: REVIEWER-1Introduction-to-SIA (1).pdf', 'other'),
(317, NULL, 249, NULL, 'completed', '2025-08-29 12:06:47', '2025-08-29 12:06:47', 'OCR processed for file ID 249 with 3 pages (execution time: 0.20827388763428s)', 'ocr_process'),
(318, 28, 250, NULL, 'completed', '2025-08-29 12:08:20', '2025-08-29 12:08:20', 'Uploaded file: REVIEWER-1Introduction-to-SIA.pdf', 'other'),
(319, NULL, 250, NULL, 'completed', '2025-08-29 12:08:21', '2025-08-29 12:08:21', 'OCR processed for file ID 250 with 3 pages (execution time: 0.20792412757874s)', 'ocr_process'),
(320, 28, 250, NULL, 'completed', '2025-08-29 12:08:21', '2025-08-29 12:08:21', 'Triggered OCR for file: REVIEWER-1Introduction-to-SIA.pdf', 'other'),
(321, 28, 251, NULL, 'completed', '2025-08-29 12:09:31', '2025-08-29 12:09:31', 'Uploaded file: CHECK-TEST.pdf', 'other'),
(322, NULL, 251, NULL, 'completed', '2025-08-29 12:09:33', '2025-08-29 12:09:33', 'OCR processed for file ID 251 with 74 pages (execution time: 1.8748321533203s)', 'ocr_process'),
(323, 28, 251, NULL, 'completed', '2025-08-29 12:09:33', '2025-08-29 12:09:33', 'Triggered OCR for file: CHECK-TEST.pdf', 'other'),
(324, 28, 252, NULL, 'completed', '2025-08-29 12:59:20', '2025-08-29 12:59:20', 'Uploaded file: Re-CHECK-TEST.pdf', 'other'),
(325, NULL, 252, NULL, 'completed', '2025-08-29 12:59:22', '2025-08-29 12:59:22', 'OCR processed for file ID 252 with 74 pages (execution time: 1.4664251804352s)', 'ocr_process'),
(326, 28, 252, NULL, 'completed', '2025-08-29 12:59:22', '2025-08-29 12:59:22', 'Triggered OCR for file: Re-CHECK-TEST.pdf', 'other'),
(327, 28, 253, NULL, 'completed', '2025-08-29 13:31:14', '2025-08-29 13:31:14', 'Uploaded file: Re-CHECK-TEST-again.pdf', 'other'),
(328, NULL, 253, NULL, 'completed', '2025-08-29 13:31:16', '2025-08-29 13:31:16', 'OCR processed for file ID 253 with 74 pages (execution time: 1.3195807933807s)', 'ocr_process'),
(329, 28, 253, NULL, 'completed', '2025-08-29 13:31:16', '2025-08-29 13:31:16', 'Triggered OCR for file: Re-CHECK-TEST-again.pdf', 'other'),
(330, 28, 254, NULL, 'completed', '2025-08-29 13:36:18', '2025-08-29 13:36:18', 'Uploaded file: Re-CHECK-TEST-again and again.pdf', 'other'),
(331, NULL, 254, NULL, 'completed', '2025-08-29 13:36:20', '2025-08-29 13:36:20', 'OCR processed for file ID 254 with 74 pages (execution time: 1.3189098834991s)', 'ocr_process'),
(332, 28, 254, NULL, 'completed', '2025-08-29 13:36:20', '2025-08-29 13:36:20', 'Triggered OCR for file: Re-CHECK-TEST-again and again.pdf', 'other'),
(333, 28, 255, NULL, 'completed', '2025-08-29 13:48:59', '2025-08-29 13:48:59', 'Uploaded file: Re-CHECK-TESTER-again and again.pdf', 'other'),
(334, NULL, 255, NULL, 'completed', '2025-08-29 13:49:00', '2025-08-29 13:49:00', 'OCR processed for file ID 255 with 74 pages (execution time: 1.2687129974365s)', 'ocr_process'),
(335, 28, 255, NULL, 'completed', '2025-08-29 13:49:00', '2025-08-29 13:49:00', 'Triggered OCR for file: Re-CHECK-TESTER-again and again.pdf', 'other'),
(336, 28, NULL, NULL, 'completed', '2025-08-29 14:42:54', '2025-08-29 14:42:54', 'Successful login for username: rivz_rivera', 'other'),
(337, 28, 256, NULL, 'completed', '2025-08-29 15:32:13', '2025-08-29 15:32:13', 'Uploaded file: HHH.pdf', 'other'),
(338, NULL, 256, NULL, 'completed', '2025-08-29 15:32:14', '2025-08-29 15:32:14', 'OCR processed for file ID 256 with 74 pages (execution time: 1.2840671539307s)', 'ocr_process'),
(339, 28, 256, NULL, 'completed', '2025-08-29 15:32:14', '2025-08-29 15:32:14', 'Triggered OCR for file: HHH.pdf', 'other'),
(340, 28, NULL, NULL, 'completed', '2025-08-29 16:20:39', '2025-08-29 16:20:39', 'Successful login for username: rivz_rivera', 'other'),
(341, 28, 257, NULL, 'completed', '2025-08-29 16:30:58', '2025-08-29 16:30:58', 'Uploaded file: RETEST.pdf', 'other'),
(342, NULL, 257, NULL, 'completed', '2025-08-29 16:30:59', '2025-08-29 16:30:59', 'OCR processed for file ID 257 with 74 pages (execution time: 1.1137931346893s)', 'ocr_process'),
(343, 28, 257, NULL, 'completed', '2025-08-29 16:30:59', '2025-08-29 16:30:59', 'Triggered OCR for file: RETEST.pdf', 'other'),
(344, 28, 258, NULL, 'completed', '2025-08-29 16:31:28', '2025-08-29 16:31:28', 'Uploaded file: RETEST-9898.pdf', 'other'),
(345, NULL, 258, NULL, 'completed', '2025-08-29 16:31:30', '2025-08-29 16:31:30', 'OCR processed for file ID 258 with 74 pages (execution time: 1.083731174469s)', 'ocr_process'),
(346, 28, 258, NULL, 'completed', '2025-08-29 16:31:30', '2025-08-29 16:31:30', 'Triggered OCR for file: RETEST-9898.pdf', 'other'),
(347, NULL, NULL, NULL, 'failed', '2025-09-01 13:52:34', '2025-09-01 13:52:34', 'Invalid login attempt for username: Sgt Caleb Steven A Lagunilla PA (Res)', 'other'),
(348, 14, NULL, NULL, 'completed', '2025-09-01 13:52:38', '2025-09-01 13:52:38', 'Successful login for username: Sgt Caleb Steven A Lagunilla PA (Res)', 'other'),
(349, 14, NULL, NULL, 'completed', '2025-09-01 14:17:14', '2025-09-01 14:17:14', 'Successful login for username: Sgt Caleb Steven A Lagunilla PA (Res)', 'other');

--
-- Triggers `transactions`
--
DELIMITER $$
CREATE TRIGGER `tr_transactions_user_department_assignments` BEFORE INSERT ON `transactions` FOR EACH ROW BEGIN
    IF NEW.transaction_type IN ('upload', 'send', 'request', 'accept', 'reject') 
       AND NEW.users_department_id IS NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'users_department_id cannot be NULL for upload, send, request, accept, or reject transactions';
    END IF;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `user_id` int(11) NOT NULL,
  `username` varchar(50) NOT NULL,
  `email` varchar(100) NOT NULL,
  `password` varchar(255) NOT NULL,
  `role` enum('admin','client') NOT NULL,
  `profile_picture` varchar(512) DEFAULT NULL COMMENT 'Path to user profile picture',
  `date_created` datetime NOT NULL DEFAULT current_timestamp(),
  `date_updated` datetime NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `personal_folder` varchar(512) DEFAULT NULL COMMENT 'Personal folder path for user'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`user_id`, `username`, `email`, `password`, `role`, `profile_picture`, `date_created`, `date_updated`, `personal_folder`) VALUES
(1, 'AdminUser', 'admin@example.com', '$2y$10$J3z1b3zK7G6kXz1Y6z3X9uJ7X8z1Y9z2K3z4L5z6M7z8N9z0P1z2', 'admin', NULL, '2025-08-24 08:20:24', '2025-08-24 08:20:33', 'Uploads/Office of the President/AdminUser'),
(12, 'ADMIN1234', 'admin1234@example.com', '$2y$10$TLlND66RAIX9Mo6D3z/Q9eQlbxsrG8ZVAB9ZLqjrTtHpVidVd4ay6', 'admin', NULL, '2025-08-24 08:20:24', '2025-08-24 08:20:33', 'Uploads/College of Arts and Sciences/AB Economics/ADMIN1234'),
(13, 'newuser', 'newuser@example.com', '$2y$10$hW3hp.Ruo.ian6EEUKoADOxGZUX8enOuwdMhjhO.y85jfUkXswS6i', 'client', NULL, '2025-08-24 08:20:24', '2025-08-24 08:20:33', 'Uploads/College of Engineering and Technology/newuser'),
(14, 'Sgt Caleb Steven A Lagunilla PA (Res)', 'caleb@example.com', '$2y$10$NHLno0YjMoh3NRgB4a76HutxvjLjBGz/5/lKEMypNY5MDH2MHiQBe', 'admin', NULL, '2025-08-24 08:20:24', '2025-08-24 08:20:33', 'Uploads/College of Education/Technology and Livelihood Education/Sgt Caleb Steven A Lagunilla PA (Res)'),
(15, 'user', 'user@example.com', '$2y$10$OVU0nH8jZ7SIec6iNs8Ate8vuxx7xUSM10YePtoUZxhd0FIz3eRXW', 'admin', NULL, '2025-08-24 08:20:24', '2025-08-24 08:20:33', 'Uploads/Users/user'),
(20, 'Mary Johnson', 'mary@example.com', '$2y$10$samplehash1', 'admin', NULL, '2025-08-24 08:20:24', '2025-08-24 08:20:33', 'Uploads/Office of the President/Mary Johnson'),
(22, 'Susan Kim', 'susan@example.com', '$2y$10$samplehash3', 'client', NULL, '2025-08-24 08:20:24', '2025-08-24 08:20:33', 'Uploads/External Linkages and International Affairs/Susan Kim'),
(23, 'James Brown', 'james@example.com', '$2y$10$samplehash4', 'admin', NULL, '2025-08-24 08:20:24', '2025-08-24 08:20:33', 'Uploads/Office of the President/James Brown'),
(24, 'Linda Davis', 'linda@example.com', '$2y$10$samplehash5', 'client', NULL, '2025-08-24 08:20:24', '2025-08-24 08:20:33', 'Uploads/Management Information Systems/Linda Davis'),
(25, 'Michael Chen', 'michael@example.com', '$2y$10$samplehash6', 'admin', NULL, '2025-08-24 08:20:24', '2025-08-24 08:20:33', 'Uploads/Office of the President/Michael Chen'),
(27, 'SwenkaDenka', 'sWENKAdENKA@gmail.com', '$2y$10$hLRpwL2./lkuHNamf1YJ8eiAhcDfF/VCqGXNW4mi1LJOcAfIIe46G', 'admin', 'Uploads/ProfilePictures/SwenkaDenka_profile_68aa53f6f08f5.jpg', '2025-08-24 08:20:24', '2025-08-24 08:20:33', 'Uploads/Users/SwenkaDenka'),
(28, 'rivz_rivera', 'rivzrivera40@gmail.com', '$2y$10$nPefeB4wOB3GHxOWmKlcAeJNDXRjMmeuAyb9hYkLgvtfqTDAnvK4W', 'admin', 'Uploads/ProfilePictures/rivz_rivera_profile_68ad4bb97e19b.jpg', '2025-08-26 13:52:57', '2025-08-26 13:52:57', 'Uploads/Users/rivz_rivera');

-- --------------------------------------------------------

--
-- Table structure for table `user_department_assignments`
--

CREATE TABLE `user_department_assignments` (
  `users_department_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `department_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `user_department_assignments`
--

INSERT INTO `user_department_assignments` (`users_department_id`, `user_id`, `department_id`) VALUES
(32, 15, 2),
(33, 15, 12),
(20, 27, 1),
(21, 27, 10),
(19, 27, 30),
(25, 28, 3),
(27, 28, 5),
(29, 28, 14),
(28, 28, 24),
(26, 28, 28);

-- --------------------------------------------------------

--
-- Stand-in structure for view `v_document_copies`
-- (See below for the actual view)
--
CREATE TABLE `v_document_copies` (
`original_file_id` int(11)
,`original_file_name` varchar(255)
,`copy_count` bigint(21)
,`offices_with_copy` mediumtext
,`physical_duplicates` mediumtext
);

-- --------------------------------------------------------

--
-- Stand-in structure for view `v_file_activity`
-- (See below for the actual view)
--
CREATE TABLE `v_file_activity` (
`transaction_id` int(11)
,`transaction_time` datetime
,`transaction_status` enum('completed','pending','failed')
,`transaction_type` enum('upload','send','request','accept','reject','access','scan','relocation','login','other','ocr_process','ocr_retry')
,`user_id` int(11)
,`username` varchar(50)
,`file_id` int(11)
,`file_name` varchar(255)
,`department_name` varchar(255)
,`storage_location` text
);

-- --------------------------------------------------------

--
-- Stand-in structure for view `v_file_distribution`
-- (See below for the actual view)
--
CREATE TABLE `v_file_distribution` (
`file_id` int(11)
,`file_name` varchar(255)
,`document_type` varchar(50)
,`department_name` varchar(255)
);

-- --------------------------------------------------------

--
-- Stand-in structure for view `v_file_uploads`
-- (See below for the actual view)
--
CREATE TABLE `v_file_uploads` (
`file_id` int(11)
,`file_name` varchar(255)
,`upload_date` datetime
,`copy_type` enum('hard_copy','soft_copy')
,`parent_file_id` int(11)
,`user_id` int(11)
,`uploader_name` varchar(50)
,`department_id` int(11)
,`department_name` varchar(255)
,`document_type_id` int(11)
,`document_type` varchar(50)
);

-- --------------------------------------------------------

--
-- Stand-in structure for view `v_storage_paths`
-- (See below for the actual view)
--
CREATE TABLE `v_storage_paths` (
`storage_location_id` int(11)
,`full_path` varchar(512)
);

-- --------------------------------------------------------

--
-- Table structure for table `v_users_per_department`
--

CREATE TABLE `v_users_per_department` (
  `department_name` varchar(255) DEFAULT NULL,
  `user_count` bigint(21) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Structure for view `v_document_copies`
--
DROP TABLE IF EXISTS `v_document_copies`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v_document_copies`  AS SELECT `f`.`file_id` AS `original_file_id`, `f`.`file_name` AS `original_file_name`, count(distinct `c`.`file_id`) AS `copy_count`, group_concat(distinct coalesce(`d2`.`department_name`,`d`.`department_name`) order by `d2`.`department_name` ASC,`d`.`department_name` ASC separator ',') AS `offices_with_copy`, group_concat(distinct coalesce(`sl`.`full_path`,`c`.`file_path`) order by `sl`.`full_path` ASC separator ' | ') AS `physical_duplicates` FROM ((((((`files` `f` left join `files` `c` on(`c`.`parent_file_id` = `f`.`file_id`)) left join `transactions` `t` on(`t`.`file_id` = `c`.`file_id` and `t`.`transaction_type` in ('send','accept'))) left join `user_department_assignments` `ud` on(`ud`.`users_department_id` = `t`.`users_department_id`)) left join `departments` `d` on(`d`.`department_id` = `ud`.`department_id`)) left join `departments` `d2` on(`d2`.`department_id` = `d`.`parent_department_id`)) left join `storage_locations` `sl` on(`sl`.`storage_location_id` = `c`.`storage_location_id`)) GROUP BY `f`.`file_id`, `f`.`file_name` ;

-- --------------------------------------------------------

--
-- Structure for view `v_file_activity`
--
DROP TABLE IF EXISTS `v_file_activity`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v_file_activity`  AS SELECT `t`.`transaction_id` AS `transaction_id`, `t`.`transaction_time` AS `transaction_time`, `t`.`transaction_status` AS `transaction_status`, `t`.`transaction_type` AS `transaction_type`, `t`.`user_id` AS `user_id`, `u`.`username` AS `username`, `t`.`file_id` AS `file_id`, `f`.`file_name` AS `file_name`, coalesce(`d2`.`department_name`,`d`.`department_name`) AS `department_name`, coalesce(`sl`.`full_path`,`f`.`file_path`) AS `storage_location` FROM ((((((`transactions` `t` left join `users` `u` on(`u`.`user_id` = `t`.`user_id`)) left join `files` `f` on(`f`.`file_id` = `t`.`file_id`)) left join `user_department_assignments` `ud` on(`ud`.`users_department_id` = `t`.`users_department_id`)) left join `departments` `d` on(`d`.`department_id` = `ud`.`department_id`)) left join `departments` `d2` on(`d2`.`department_id` = `d`.`parent_department_id`)) left join `storage_locations` `sl` on(`sl`.`storage_location_id` = `f`.`storage_location_id`)) ;

-- --------------------------------------------------------

--
-- Structure for view `v_file_distribution`
--
DROP TABLE IF EXISTS `v_file_distribution`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v_file_distribution`  AS SELECT `f`.`file_id` AS `file_id`, `f`.`file_name` AS `file_name`, `dt`.`type_name` AS `document_type`, coalesce(`sd`.`department_name`,`d2`.`department_name`,`d`.`department_name`) AS `department_name` FROM ((((`files` `f` left join `document_types` `dt` on(`dt`.`document_type_id` = `f`.`document_type_id`)) left join `departments` `d` on(`f`.`department_id` = `d`.`department_id`)) left join `departments` `sd` on(`f`.`sub_department_id` = `sd`.`department_id`)) left join `departments` `d2` on(`d`.`parent_department_id` = `d2`.`department_id`)) ;

-- --------------------------------------------------------

--
-- Structure for view `v_file_uploads`
--
DROP TABLE IF EXISTS `v_file_uploads`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v_file_uploads`  AS SELECT `f`.`file_id` AS `file_id`, `f`.`file_name` AS `file_name`, `f`.`upload_date` AS `upload_date`, `f`.`copy_type` AS `copy_type`, `f`.`parent_file_id` AS `parent_file_id`, `u`.`user_id` AS `user_id`, `u`.`username` AS `uploader_name`, `d`.`department_id` AS `department_id`, `d`.`department_name` AS `department_name`, `dt`.`document_type_id` AS `document_type_id`, `dt`.`type_name` AS `document_type` FROM (((`files` `f` join `users` `u` on(`u`.`user_id` = `f`.`user_id`)) left join `departments` `d` on(`d`.`department_id` = `f`.`department_id`)) left join `document_types` `dt` on(`dt`.`document_type_id` = `f`.`document_type_id`)) ;

-- --------------------------------------------------------

--
-- Structure for view `v_storage_paths`
--
DROP TABLE IF EXISTS `v_storage_paths`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `v_storage_paths`  AS SELECT `storage_locations`.`storage_location_id` AS `storage_location_id`, `storage_locations`.`full_path` AS `full_path` FROM `storage_locations` ;

--
-- Indexes for dumped tables
--

--
-- Indexes for table `departments`
--
ALTER TABLE `departments`
  ADD PRIMARY KEY (`department_id`),
  ADD UNIQUE KEY `idx_department_name` (`department_name`),
  ADD UNIQUE KEY `unique_folder_path` (`folder_path`) USING HASH,
  ADD KEY `fk_departments_parent` (`parent_department_id`),
  ADD KEY `idx_departments_folder_path` (`folder_path`(768));

--
-- Indexes for table `document_types`
--
ALTER TABLE `document_types`
  ADD PRIMARY KEY (`document_type_id`),
  ADD KEY `idx_type_name` (`type_name`);

--
-- Indexes for table `files`
--
ALTER TABLE `files`
  ADD PRIMARY KEY (`file_id`),
  ADD UNIQUE KEY `unique_file_path_user` (`file_path`,`user_id`) USING HASH,
  ADD KEY `fk_files_department` (`department_id`),
  ADD KEY `fk_files_sub_department` (`sub_department_id`),
  ADD KEY `fk_files_document_type` (`document_type_id`),
  ADD KEY `fk_files_user` (`user_id`),
  ADD KEY `fk_files_parent` (`parent_file_id`),
  ADD KEY `fk_files_storage_location` (`storage_location_id`),
  ADD KEY `idx_files_parent` (`parent_file_id`),
  ADD KEY `idx_files_upload_date` (`upload_date`),
  ADD KEY `idx_files_doc_type` (`document_type_id`),
  ADD KEY `idx_files_storage_location` (`storage_location_id`),
  ADD KEY `idx_files_access_level` (`access_level`),
  ADD KEY `idx_files_file_status` (`file_status`),
  ADD KEY `idx_files_sub_department` (`sub_department_id`),
  ADD KEY `idx_files_user_id` (`user_id`),
  ADD KEY `idx_files_department_id` (`department_id`),
  ADD KEY `idx_files_sub_department_id` (`sub_department_id`);

--
-- Indexes for table `file_audit`
--
ALTER TABLE `file_audit`
  ADD PRIMARY KEY (`audit_id`),
  ADD KEY `file_id` (`file_id`),
  ADD KEY `user_id` (`user_id`);

--
-- Indexes for table `file_pages`
--
ALTER TABLE `file_pages`
  ADD PRIMARY KEY (`page_id`),
  ADD KEY `fk_file_pages_file` (`file_id`),
  ADD KEY `idx_file_pages_page_number` (`file_id`,`page_number`),
  ADD KEY `idx_file_pages_status` (`file_id`,`page_status`),
  ADD KEY `idx_file_pages_ocr_attempts` (`file_id`,`ocr_attempts`);
ALTER TABLE `file_pages` ADD FULLTEXT KEY `ft_file_pages_extracted_text` (`extracted_text`);
ALTER TABLE `file_pages` ADD FULLTEXT KEY `extracted_text` (`extracted_text`);

--
-- Indexes for table `schema_change_log`
--
ALTER TABLE `schema_change_log`
  ADD PRIMARY KEY (`log_id`);

--
-- Indexes for table `storage_locations`
--
ALTER TABLE `storage_locations`
  ADD PRIMARY KEY (`storage_location_id`),
  ADD UNIQUE KEY `uk_storage_locations_full_path` (`full_path`),
  ADD KEY `fk_storage_locations_department` (`department_id`),
  ADD KEY `fk_storage_locations_sub_department` (`sub_department_id`),
  ADD KEY `fk_storage_locations_parent` (`parent_storage_location_id`),
  ADD KEY `idx_storage_locations_parent` (`parent_storage_location_id`),
  ADD KEY `idx_storage_locations_dept` (`department_id`,`sub_department_id`),
  ADD KEY `idx_storage_locations_full_path` (`full_path`);

--
-- Indexes for table `text_repository`
--
ALTER TABLE `text_repository`
  ADD PRIMARY KEY (`content_id`),
  ADD KEY `fk_text_repository_file` (`file_id`),
  ADD KEY `idx_text_repository_ocr_attempts` (`ocr_attempts`),
  ADD KEY `idx_text_repository_file_ocr` (`file_id`,`ocr_attempts`),
  ADD KEY `idx_ocr_status` (`ocr_status`),
  ADD KEY `idx_ocr_attempts` (`ocr_attempts`);
ALTER TABLE `text_repository` ADD FULLTEXT KEY `ft_text_repository_extracted_text` (`extracted_text`);
ALTER TABLE `text_repository` ADD FULLTEXT KEY `extracted_text` (`extracted_text`);

--
-- Indexes for table `transactions`
--
ALTER TABLE `transactions`
  ADD PRIMARY KEY (`transaction_id`),
  ADD KEY `fk_transactions_user` (`user_id`),
  ADD KEY `fk_transactions_file` (`file_id`),
  ADD KEY `fk_transactions_users_department` (`users_department_id`),
  ADD KEY `idx_transaction_time` (`transaction_time`),
  ADD KEY `idx_trx_type_status_time` (`transaction_type`,`transaction_status`,`transaction_time`),
  ADD KEY `idx_trx_file` (`file_id`),
  ADD KEY `idx_trx_user` (`user_id`),
  ADD KEY `idx_transactions_transaction_type` (`transaction_type`),
  ADD KEY `idx_transactions_user_file` (`user_id`,`file_id`,`transaction_type`),
  ADD KEY `idx_transactions_user_id_type` (`user_id`,`transaction_type`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`user_id`),
  ADD UNIQUE KEY `idx_username` (`username`),
  ADD UNIQUE KEY `idx_email` (`email`),
  ADD KEY `idx_role` (`role`);

--
-- Indexes for table `user_department_assignments`
--
ALTER TABLE `user_department_assignments`
  ADD PRIMARY KEY (`users_department_id`),
  ADD UNIQUE KEY `idx_user_department` (`user_id`,`department_id`),
  ADD KEY `fk_users_department_department` (`department_id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `departments`
--
ALTER TABLE `departments`
  MODIFY `department_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=31;

--
-- AUTO_INCREMENT for table `document_types`
--
ALTER TABLE `document_types`
  MODIFY `document_type_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;

--
-- AUTO_INCREMENT for table `files`
--
ALTER TABLE `files`
  MODIFY `file_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=259;

--
-- AUTO_INCREMENT for table `file_audit`
--
ALTER TABLE `file_audit`
  MODIFY `audit_id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `file_pages`
--
ALTER TABLE `file_pages`
  MODIFY `page_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=661;

--
-- AUTO_INCREMENT for table `schema_change_log`
--
ALTER TABLE `schema_change_log`
  MODIFY `log_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=12;

--
-- AUTO_INCREMENT for table `storage_locations`
--
ALTER TABLE `storage_locations`
  MODIFY `storage_location_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=120;

--
-- AUTO_INCREMENT for table `text_repository`
--
ALTER TABLE `text_repository`
  MODIFY `content_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=81;

--
-- AUTO_INCREMENT for table `transactions`
--
ALTER TABLE `transactions`
  MODIFY `transaction_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=350;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `user_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=29;

--
-- AUTO_INCREMENT for table `user_department_assignments`
--
ALTER TABLE `user_department_assignments`
  MODIFY `users_department_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=34;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `files`
--
ALTER TABLE `files`
  ADD CONSTRAINT `fk_files_department` FOREIGN KEY (`department_id`) REFERENCES `departments` (`department_id`) ON DELETE SET NULL ON UPDATE CASCADE,
  ADD CONSTRAINT `fk_files_document_type` FOREIGN KEY (`document_type_id`) REFERENCES `document_types` (`document_type_id`) ON DELETE SET NULL ON UPDATE CASCADE,
  ADD CONSTRAINT `fk_files_parent` FOREIGN KEY (`parent_file_id`) REFERENCES `files` (`file_id`) ON DELETE SET NULL ON UPDATE CASCADE,
  ADD CONSTRAINT `fk_files_storage_location` FOREIGN KEY (`storage_location_id`) REFERENCES `storage_locations` (`storage_location_id`) ON DELETE SET NULL ON UPDATE CASCADE,
  ADD CONSTRAINT `fk_files_sub_department` FOREIGN KEY (`sub_department_id`) REFERENCES `departments` (`department_id`) ON DELETE SET NULL ON UPDATE CASCADE,
  ADD CONSTRAINT `fk_files_user` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints for table `file_audit`
--
ALTER TABLE `file_audit`
  ADD CONSTRAINT `file_audit_ibfk_1` FOREIGN KEY (`file_id`) REFERENCES `files` (`file_id`) ON DELETE CASCADE,
  ADD CONSTRAINT `file_audit_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`) ON DELETE SET NULL;

--
-- Constraints for table `file_pages`
--
ALTER TABLE `file_pages`
  ADD CONSTRAINT `fk_file_pages_file` FOREIGN KEY (`file_id`) REFERENCES `files` (`file_id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints for table `storage_locations`
--
ALTER TABLE `storage_locations`
  ADD CONSTRAINT `fk_storage_locations_department` FOREIGN KEY (`department_id`) REFERENCES `departments` (`department_id`) ON DELETE SET NULL ON UPDATE CASCADE,
  ADD CONSTRAINT `fk_storage_locations_parent` FOREIGN KEY (`parent_storage_location_id`) REFERENCES `storage_locations` (`storage_location_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `fk_storage_locations_sub_department` FOREIGN KEY (`sub_department_id`) REFERENCES `departments` (`department_id`) ON DELETE SET NULL ON UPDATE CASCADE;

--
-- Constraints for table `text_repository`
--
ALTER TABLE `text_repository`
  ADD CONSTRAINT `fk_text_repository_file` FOREIGN KEY (`file_id`) REFERENCES `files` (`file_id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints for table `transactions`
--
ALTER TABLE `transactions`
  ADD CONSTRAINT `fk_transactions_file` FOREIGN KEY (`file_id`) REFERENCES `files` (`file_id`) ON DELETE SET NULL ON UPDATE CASCADE,
  ADD CONSTRAINT `fk_transactions_user` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`) ON DELETE SET NULL ON UPDATE CASCADE,
  ADD CONSTRAINT `fk_transactions_users_department` FOREIGN KEY (`users_department_id`) REFERENCES `user_department_assignments` (`users_department_id`) ON DELETE SET NULL ON UPDATE CASCADE;

--
-- Constraints for table `user_department_assignments`
--
ALTER TABLE `user_department_assignments`
  ADD CONSTRAINT `fk_users_department_department` FOREIGN KEY (`department_id`) REFERENCES `departments` (`department_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `fk_users_department_user` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
